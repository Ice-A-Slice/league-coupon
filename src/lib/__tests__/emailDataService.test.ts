import {
  aggregateSummaryEmailData,
  aggregateReminderEmailData,
  isRoundCompleted,
  getMockUserPerformance,
  getMockLeagueTable,
  getCompletedMatchResults,
  getUpcomingFixtures,
} from '../emailDataService';
import { storyGenerationService } from '../storyGenerationService';
import * as footballApiClient from '@/services/football-api/client';
import * as supabaseQueries from '@/lib/supabase/queries';

// Mock dependencies
jest.mock('../storyGenerationService');
jest.mock('@/services/football-api/client');
jest.mock('@/lib/supabase/queries');

// Import the mocked modules
const mockStoryGenerationService = storyGenerationService as jest.Mocked<typeof storyGenerationService>;
const mockFetchComprehensiveMatchData = footballApiClient.fetchComprehensiveMatchData as jest.MockedFunction<
  typeof footballApiClient.fetchComprehensiveMatchData
>;
const mockGetFixturesForRound = supabaseQueries.getFixturesForRound as jest.MockedFunction<
  typeof supabaseQueries.getFixturesForRound
>;
const mockGetCurrentBettingRoundFixtures = supabaseQueries.getCurrentBettingRoundFixtures as jest.MockedFunction<
  typeof supabaseQueries.getCurrentBettingRoundFixtures
>;

describe('Email Data Service', () => {
  // Shared mock data available to all tests
  const mockComprehensiveData = {
    fixture: {
      get: 'fixtures',
      parameters: { id: '12345' },
      errors: [],
      results: 1,
      paging: { current: 1, total: 1 },
      response: [{
        fixture: { 
          id: 12345, 
          referee: 'Michael Oliver', 
          timezone: 'UTC', 
          date: '2024-01-15T15:00:00+00:00', 
          timestamp: 1705330800, 
          periods: { first: 1705330800, second: 1705334400 }, 
          venue: { id: 556, name: 'Old Trafford', city: 'Manchester' }, 
          status: { long: 'Match Finished', short: 'FT', elapsed: 90 } 
        },
        league: { 
          id: 39, 
          name: 'Premier League', 
          country: 'England', 
          logo: 'league.png', 
          flag: 'flag.png', 
          season: 2024, 
          round: 'Regular Season - 20' 
        },
        teams: {
          home: { id: 33, name: 'Manchester United', logo: 'logo.png', winner: true },
          away: { id: 34, name: 'Liverpool', logo: 'logo2.png', winner: false },
        },
        goals: { home: 2, away: 1 },
        score: { 
          halftime: { home: 1, away: 0 }, 
          fulltime: { home: 2, away: 1 }, 
          extratime: { home: null, away: null }, 
          penalty: { home: null, away: null } 
        }
      }]
    },
    events: { get: 'events', parameters: {}, errors: [], results: 0, paging: { current: 1, total: 1 }, response: [] },
    statistics: { get: 'statistics', parameters: {}, errors: [], results: 0, paging: { current: 1, total: 1 }, response: [] },
    playerStats: []
  };

  beforeEach(() => {
    jest.clearAllMocks();
    // Set default mock for story generation service
    mockStoryGenerationService.generateStory.mockResolvedValue('Generated AI story content');
  });

  describe('aggregateSummaryEmailData', () => {
    const mockFixtures = [
      {
        id: '12345',
        homeTeam: 'Manchester United',
        awayTeam: 'Liverpool',
      },
      {
        id: '12346',
        homeTeam: 'Arsenal',
        awayTeam: 'Chelsea',
      },
    ];

    it('should aggregate summary email data successfully', async () => {
      mockGetFixturesForRound.mockResolvedValue(mockFixtures);
      mockFetchComprehensiveMatchData.mockResolvedValue(mockComprehensiveData);

      const result = await aggregateSummaryEmailData(
        'user123',
        'Gameweek 20',
        2024,
        39
      );

      expect(result).toBeDefined();
      expect(result.roundName).toBe('Gameweek 20');
      expect(result.user.userId).toBe('user123');
      expect(result.matchResults).toHaveLength(2);
      expect(result.aiStories).toBeDefined();
      expect(result.aiStories.titleRace).toBe('Generated by AI services');
    });

    it('should handle matches without comprehensive data', async () => {
      mockGetFixturesForRound.mockResolvedValue(mockFixtures);
      mockFetchComprehensiveMatchData.mockRejectedValue(new Error('API Error'));

      const result = await aggregateSummaryEmailData(
        'user123',
        'Gameweek 20',
        2024,
        39
      );

      expect(result.matchResults).toHaveLength(2);
      // Should still create match results with default scores
      expect(result.matchResults[0].homeTeam.score).toBe(0);
      expect(result.matchResults[0].awayTeam.score).toBe(0);
    });

    it('should handle empty fixtures', async () => {
      mockGetFixturesForRound.mockResolvedValue([]);

      const result = await aggregateSummaryEmailData(
        'user123',
        'Gameweek 20',
        2024,
        39
      );

      expect(result.matchResults).toHaveLength(0);
      expect(result.aiStories.titleRace).toBe('Generated by AI services');
    });

    it('should handle database errors gracefully', async () => {
      mockGetFixturesForRound.mockRejectedValue(new Error('Database error'));

      await expect(
        aggregateSummaryEmailData('user123', 'Gameweek 20', 2024, 39)
      ).rejects.toThrow('Database error');
    });
  });

  describe('aggregateReminderEmailData', () => {
    const mockCurrentRoundData = {
      roundId: 21,
      roundName: 'Regular Season - 21',
      matches: [
        {
          id: '12347',
          homeTeam: 'Manchester City',
          awayTeam: 'Newcastle',
          kickoff: '2024-01-22T15:00:00Z',
        },
        {
          id: '12348',
          homeTeam: 'Tottenham',
          awayTeam: 'Brighton',
          kickoff: '2024-01-22T17:30:00Z',
        },
      ],
    };

    it('should aggregate reminder email data successfully', async () => {
      mockGetCurrentBettingRoundFixtures.mockResolvedValue(mockCurrentRoundData);

      const result = await aggregateReminderEmailData('user123', 24);

      expect(result).toBeDefined();
      expect(result.roundName).toBe('Regular Season - 1');
      expect(result.user.name).toBe('John Doe');
      expect(result.upcomingFixtures).toHaveLength(2);
      expect(result.upcomingFixtures[0].homeTeam).toBe('Manchester City');
    });

    it('should handle missing current round data', async () => {
      mockGetCurrentBettingRoundFixtures.mockResolvedValue(null);

      await expect(
        aggregateReminderEmailData('user123', 24)
      ).rejects.toThrow('No current betting round found');
    });

    it('should transform match data correctly', async () => {
      mockGetCurrentBettingRoundFixtures.mockResolvedValue(mockCurrentRoundData);

      const result = await aggregateReminderEmailData('user123', 24);

      const firstFixture = result.upcomingFixtures[0];
      expect(firstFixture.id).toBe(12347); // Should be converted to number
      expect(firstFixture.homeTeam).toBe('Manchester City');
      expect(firstFixture.awayTeam).toBe('Newcastle');
      expect(typeof firstFixture.kickoff).toBe('string');
    });

    it('should handle database errors', async () => {
      mockGetCurrentBettingRoundFixtures.mockRejectedValue(new Error('Database connection failed'));

      await expect(
        aggregateReminderEmailData('user123', 24)
      ).rejects.toThrow('Database connection failed');
    });
  });

  describe('isRoundCompleted', () => {
    it('should return true for completed rounds', () => {
      const result = isRoundCompleted('Gameweek 20');
      expect(typeof result).toBe('boolean');
      expect(result).toBe(true); // Current implementation always returns true
    });

    it('should handle various round name formats', () => {
      const testCases = [
        'Gameweek 1',
        'Gameweek 38',
        'Regular Season - 20',
        'Final',
      ];

      testCases.forEach(roundName => {
        const result = isRoundCompleted(roundName);
        expect(typeof result).toBe('boolean');
        expect(result).toBe(true);
      });
    });

    it('should handle empty or invalid round names', () => {
      const result = isRoundCompleted('');
      expect(typeof result).toBe('boolean');
      expect(result).toBe(true);
    });
  });

  describe('getMockUserPerformance', () => {
    it('should return mock user performance data', () => {
      const result = getMockUserPerformance('user123');
      
      expect(result.userId).toBe('user123');
      expect(result.userName).toBe('John Doe');
      expect(result.position).toBe(5);
      expect(result.positionChange).toBe(2);
      expect(result.pointsEarned).toBe(12);
      expect(result.correctPredictions).toBe(7);
      expect(result.totalPredictions).toBe(10);
    });
  });

  describe('getMockLeagueTable', () => {
    it('should return mock league table data', () => {
      const result = getMockLeagueTable();
      
      expect(result).toHaveLength(6);
      expect(result[0].position).toBe(1);
      expect(result[0].team).toBe('Arsenal');
      expect(result[0].points).toBe(48);
    });
  });

  describe('getCompletedMatchResults', () => {
    const mockFixtures = [
      {
        id: '12345',
        homeTeam: 'Manchester United',
        awayTeam: 'Liverpool',
      },
    ];

    it('should fetch completed match results successfully', async () => {
      mockGetFixturesForRound.mockResolvedValue(mockFixtures);
      mockFetchComprehensiveMatchData.mockResolvedValue(mockComprehensiveData);

      const result = await getCompletedMatchResults('Gameweek 20', 2024, 39);

      expect(result).toHaveLength(1);
      expect(result[0].homeTeam.name).toBe('Manchester United');
      expect(result[0].awayTeam.name).toBe('Liverpool');
      expect(result[0].homeTeam.score).toBe(2);
      expect(result[0].awayTeam.score).toBe(1);
    });

    it('should handle API errors gracefully', async () => {
      mockGetFixturesForRound.mockResolvedValue(mockFixtures);
      mockFetchComprehensiveMatchData.mockRejectedValue(new Error('API Error'));

      const result = await getCompletedMatchResults('Gameweek 20', 2024, 39);

      expect(result).toHaveLength(1);
      expect(result[0].homeTeam.score).toBe(0); // Default score when API fails
      expect(result[0].awayTeam.score).toBe(0);
    });
  });

  describe('getUpcomingFixtures', () => {
    const mockCurrentRoundData = {
      roundId: 21,
      roundName: 'Regular Season - 21',
      matches: [
        {
          id: '12347',
          homeTeam: 'Manchester City',
          awayTeam: 'Newcastle',
          kickoff: '2024-01-22T15:00:00Z',
        },
      ],
    };

    it('should fetch upcoming fixtures successfully', async () => {
      mockGetCurrentBettingRoundFixtures.mockResolvedValue(mockCurrentRoundData);

      const result = await getUpcomingFixtures();

      expect(result).toHaveLength(1);
      expect(result[0].homeTeam).toBe('Manchester City');
      expect(result[0].awayTeam).toBe('Newcastle');
      expect(result[0].importance).toBe('medium');
      expect(result[0].difficulty).toBe('medium');
    });

    it('should handle missing current round data', async () => {
      mockGetCurrentBettingRoundFixtures.mockResolvedValue(null);

      const result = await getUpcomingFixtures();

      expect(result).toHaveLength(0);
    });
  });

  describe('Error handling and edge cases', () => {
    it('should handle partial API failures in summary data', async () => {
      const mockFixtures = [
        {
          id: '12345',
          homeTeam: 'Manchester United',
          awayTeam: 'Liverpool',
        },
      ];

      mockGetFixturesForRound.mockResolvedValue(mockFixtures);
      // First call succeeds, second fails
      mockFetchComprehensiveMatchData
        .mockResolvedValueOnce(mockComprehensiveData)
        .mockRejectedValueOnce(new Error('API Error'));

      const result = await aggregateSummaryEmailData(
        'user123',
        'Gameweek 20',
        2024,
        39
      );

      expect(result.matchResults).toHaveLength(1);
      expect(result.matchResults[0].homeTeam.name).toBe('Manchester United');
    });

    it('should handle null scores in fixtures', async () => {
      const mockFixturesWithNullScores = [
        {
          id: '12345',
          homeTeam: 'Manchester United',
          awayTeam: 'Liverpool',
        },
      ];

      mockGetFixturesForRound.mockResolvedValue(mockFixturesWithNullScores);

      const result = await aggregateSummaryEmailData(
        'user123',
        'Gameweek 20',
        2024,
        39
      );

      expect(result.matchResults).toHaveLength(1);
      expect(result.matchResults[0].homeTeam.score).toBe(0);
      expect(result.matchResults[0].awayTeam.score).toBe(0);
    });
  });
});