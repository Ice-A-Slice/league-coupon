{"numFailedTestSuites":8,"numFailedTests":50,"numPassedTestSuites":64,"numPassedTests":886,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":1,"numTotalTestSuites":72,"numTotalTests":937,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1752737019815,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Authentication"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Authentication should reject requests without authentication","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should reject requests without authentication"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Authentication"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Authentication should accept Bearer token authentication","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept Bearer token authentication"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Authentication"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Authentication should accept X-Cron-Secret header authentication","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept X-Cron-Secret header authentication"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Authentication"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Authentication should reject invalid authentication tokens","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject invalid authentication tokens"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Authentication should handle missing CRON_SECRET configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle missing CRON_SECRET configuration"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","GET /api/admin/hall-of-fame"],"duration":60,"failureDetails":[{"matcherResult":{"actual":{"total_items":1,"total_pages":1,"current_page":1,"page_size":1,"has_more":false},"expected":{"offset":0,"limit":50,"total":1,"count":1},"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  - 4\u001b[39m\n\u001b[31m+ Received  + 5\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[32m-   \"count\": 1,\u001b[39m\n\u001b[32m-   \"limit\": 50,\u001b[39m\n\u001b[32m-   \"offset\": 0,\u001b[39m\n\u001b[32m-   \"total\": 1,\u001b[39m\n\u001b[31m+   \"current_page\": 1,\u001b[39m\n\u001b[31m+   \"has_more\": false,\u001b[39m\n\u001b[31m+   \"page_size\": 1,\u001b[39m\n\u001b[31m+   \"total_items\": 1,\u001b[39m\n\u001b[31m+   \"total_pages\": 1,\u001b[39m\n\u001b[2m  }\u001b[22m","name":"toEqual","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  - 4\u001b[39m\n\u001b[31m+ Received  + 5\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[32m-   \"count\": 1,\u001b[39m\n\u001b[32m-   \"limit\": 50,\u001b[39m\n\u001b[32m-   \"offset\": 0,\u001b[39m\n\u001b[32m-   \"total\": 1,\u001b[39m\n\u001b[31m+   \"current_page\": 1,\u001b[39m\n\u001b[31m+   \"has_more\": false,\u001b[39m\n\u001b[31m+   \"page_size\": 1,\u001b[39m\n\u001b[31m+   \"total_items\": 1,\u001b[39m\n\u001b[31m+   \"total_pages\": 1,\u001b[39m\n\u001b[2m  }\u001b[22m\n    at Object.toEqual (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts:224:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API GET /api/admin/hall-of-fame should return Hall of Fame data with default parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"should return Hall of Fame data with default parameters"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","GET /api/admin/hall-of-fame"],"duration":2,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32m\"season.competition.id\"\u001b[39m, \u001b[32m\"39\"\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32m\"season.competition.id\"\u001b[39m, \u001b[32m\"39\"\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m\n    at Object.toHaveBeenCalledWith (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts:259:28)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API GET /api/admin/hall-of-fame should handle filters correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle filters correctly"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","GET /api/admin/hall-of-fame"],"duration":18,"failureDetails":[{"matcherResult":{"expected":200,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts:285:37)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API GET /api/admin/hall-of-fame should enforce maximum limit","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should enforce maximum limit"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","POST /api/admin/hall-of-fame"],"duration":7,"failureDetails":[{"matcherResult":{"actual":500,"expected":200,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts:343:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API POST /api/admin/hall-of-fame should create a new Hall of Fame entry","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should create a new Hall of Fame entry"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","POST /api/admin/hall-of-fame"],"duration":1,"failureDetails":[{"matcherResult":{"actual":500,"expected":200,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts:396:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API POST /api/admin/hall-of-fame should update existing winner when override_existing is true","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should update existing winner when override_existing is true"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","POST /api/admin/hall-of-fame"],"duration":1,"failureDetails":[{"matcherResult":{"actual":500,"expected":409,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m409\u001b[39m\nReceived: \u001b[31m500\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m409\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts:430:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API POST /api/admin/hall-of-fame should reject when winner already exists without override","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should reject when winner already exists without override"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","POST /api/admin/hall-of-fame"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API POST /api/admin/hall-of-fame should validate required fields","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate required fields"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","POST /api/admin/hall-of-fame"],"duration":1,"failureDetails":[{"matcherResult":{"actual":500,"expected":404,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m500\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts:465:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API POST /api/admin/hall-of-fame should handle non-existent season","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle non-existent season"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","POST /api/admin/hall-of-fame"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"Season not found","expected":"User not found","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mUser\u001b[27m not found\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mSeason\u001b[27m not found\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mUser\u001b[27m not found\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mSeason\u001b[27m not found\"\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts:493:26)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API POST /api/admin/hall-of-fame should handle non-existent user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle non-existent user"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","DELETE /api/admin/hall-of-fame"],"duration":1,"failureDetails":[{"matcherResult":{"actual":500,"expected":200,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts:522:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API DELETE /api/admin/hall-of-fame should delete winner by winner_id","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should delete winner by winner_id"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","DELETE /api/admin/hall-of-fame"],"duration":2,"failureDetails":[{"matcherResult":{"actual":500,"expected":200,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts:549:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API DELETE /api/admin/hall-of-fame should delete winner by season_id","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should delete winner by season_id"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","DELETE /api/admin/hall-of-fame"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API DELETE /api/admin/hall-of-fame should require either winner_id or season_id","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should require either winner_id or season_id"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","DELETE /api/admin/hall-of-fame"],"duration":1,"failureDetails":[{"matcherResult":{"actual":200,"expected":404,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m200\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts:579:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API DELETE /api/admin/hall-of-fame should handle non-existent winner","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle non-existent winner"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","DELETE /api/admin/hall-of-fame"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"Internal server error","expected":"Failed to delete winner","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mFailed to delete winne\u001b[27mr\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mInternal server erro\u001b[27mr\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"\u001b[7mFailed to delete winne\u001b[27mr\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mInternal server erro\u001b[27mr\"\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts:604:26)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API DELETE /api/admin/hall-of-fame should handle delete errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle delete errors"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Error handling"],"duration":0,"failureDetails":[{"matcherResult":{"actual":200,"expected":500,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts:628:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Error handling should handle database errors in GET","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle database errors in GET"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Error handling"],"duration":1,"failureDetails":[{"matcherResult":{"actual":200,"expected":500,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts:656:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Error handling should handle unexpected errors","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle unexpected errors"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Logging"],"duration":2,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32m\"Admin HallOfFame API: GET request completed\"\u001b[39m, \u001b[32mObjectContaining {\"processingTime\": Any<Number>, \"resultCount\": 1, \"totalCount\": 1}\u001b[39m\nReceived\n       1: \u001b[31m\"Admin HallOfFame API: Processing GET request\"\u001b[39m, \u001b[31m{\"method\": \"GET\", \"requestId\": \"3baee953-e9d1-425b-9d58-937587bd4c90\", \"timestamp\": \"2025-07-17T07:23:41.361Z\"}\u001b[39m\n       2: \u001b[31m\"Admin HallOfFame API: Successfully retrieved data\"\u001b[39m, \u001b[2m{\"processingTime\": 0, \"requestId\": \"3baee953-e9d1-425b-9d58-937587bd4c90\", \"resultCount\": 1, \"totalCount\": 1}\u001b[22m\n\nNumber of calls: \u001b[31m2\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32m\"Admin HallOfFame API: GET request completed\"\u001b[39m, \u001b[32mObjectContaining {\"processingTime\": Any<Number>, \"resultCount\": 1, \"totalCount\": 1}\u001b[39m\nReceived\n       1: \u001b[31m\"Admin HallOfFame API: Processing GET request\"\u001b[39m, \u001b[31m{\"method\": \"GET\", \"requestId\": \"3baee953-e9d1-425b-9d58-937587bd4c90\", \"timestamp\": \"2025-07-17T07:23:41.361Z\"}\u001b[39m\n       2: \u001b[31m\"Admin HallOfFame API: Successfully retrieved data\"\u001b[39m, \u001b[2m{\"processingTime\": 0, \"requestId\": \"3baee953-e9d1-425b-9d58-937587bd4c90\", \"resultCount\": 1, \"totalCount\": 1}\u001b[22m\n\nNumber of calls: \u001b[31m2\u001b[39m\n    at Object.toHaveBeenCalledWith (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts:700:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Logging should log successful operations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should log successful operations"}],"endTime":1752737021455,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/admin/hall-of-fame - Admin Hall of Fame Management API › GET /api/admin/hall-of-fame › should return Hall of Fame data with default parameters\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    \u001b[32m- Expected  - 4\u001b[39m\n    \u001b[31m+ Received  + 5\u001b[39m\n\n    \u001b[2m  Object {\u001b[22m\n    \u001b[32m-   \"count\": 1,\u001b[39m\n    \u001b[32m-   \"limit\": 50,\u001b[39m\n    \u001b[32m-   \"offset\": 0,\u001b[39m\n    \u001b[32m-   \"total\": 1,\u001b[39m\n    \u001b[31m+   \"current_page\": 1,\u001b[39m\n    \u001b[31m+   \"has_more\": false,\u001b[39m\n    \u001b[31m+   \"page_size\": 1,\u001b[39m\n    \u001b[31m+   \"total_items\": 1,\u001b[39m\n    \u001b[31m+   \"total_pages\": 1,\u001b[39m\n    \u001b[2m  }\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 222 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 223 |\u001b[39m       expect(data\u001b[33m.\u001b[39mdata)\u001b[33m.\u001b[39mtoHaveLength(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 224 |\u001b[39m       expect(data\u001b[33m.\u001b[39mpagination)\u001b[33m.\u001b[39mtoEqual({\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 225 |\u001b[39m         offset\u001b[33m:\u001b[39m \u001b[35m0\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 226 |\u001b[39m         limit\u001b[33m:\u001b[39m \u001b[35m50\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 227 |\u001b[39m         total\u001b[33m:\u001b[39m \u001b[35m1\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/admin/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:224:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/admin/hall-of-fame - Admin Hall of Fame Management API › GET /api/admin/hall-of-fame › should handle filters correctly\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32m\"season.competition.id\"\u001b[39m, \u001b[32m\"39\"\u001b[39m\n\n    Number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 257 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 258 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 259 |\u001b[39m       expect(mockQuery\u001b[33m.\u001b[39meq)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[32m'season.competition.id'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'39'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 260 |\u001b[39m       expect(mockQuery\u001b[33m.\u001b[39meq)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[32m'season_id'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'1'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 261 |\u001b[39m       expect(mockQuery\u001b[33m.\u001b[39meq)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[32m'user_id'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'user-1'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 262 |\u001b[39m       expect(mockQuery\u001b[33m.\u001b[39morder)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[32m'total_points'\u001b[39m\u001b[33m,\u001b[39m { ascending\u001b[33m:\u001b[39m \u001b[36mfalse\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toHaveBeenCalledWith (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/admin/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:259:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/admin/hall-of-fame - Admin Hall of Fame Management API › GET /api/admin/hall-of-fame › should enforce maximum limit\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 283 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 284 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 285 |\u001b[39m       expect(data\u001b[33m.\u001b[39mpagination\u001b[33m.\u001b[39mlimit)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m \u001b[90m// Max limit enforced\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 286 |\u001b[39m       expect(mockQuery\u001b[33m.\u001b[39mrange)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[35m0\u001b[39m\u001b[33m,\u001b[39m \u001b[35m199\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 287 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 288 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/admin/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:285:37)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/admin/hall-of-fame - Admin Hall of Fame Management API › POST /api/admin/hall-of-fame › should create a new Hall of Fame entry\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 341 |\u001b[39m       \u001b[36mconst\u001b[39m data \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m response\u001b[33m.\u001b[39mjson()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 342 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 343 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 344 |\u001b[39m       expect(data\u001b[33m.\u001b[39mdata)\u001b[33m.\u001b[39mtoEqual(mockHallOfFameData[\u001b[35m0\u001b[39m])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 345 |\u001b[39m       expect(data\u001b[33m.\u001b[39moperation)\u001b[33m.\u001b[39mtoBe(\u001b[32m'created'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 346 |\u001b[39m       expect(data\u001b[33m.\u001b[39mseason)\u001b[33m.\u001b[39mtoEqual(mockSeason)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/admin/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:343:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/admin/hall-of-fame - Admin Hall of Fame Management API › POST /api/admin/hall-of-fame › should update existing winner when override_existing is true\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 394 |\u001b[39m       \u001b[36mconst\u001b[39m data \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m response\u001b[33m.\u001b[39mjson()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 395 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 396 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 397 |\u001b[39m       expect(data\u001b[33m.\u001b[39moperation)\u001b[33m.\u001b[39mtoBe(\u001b[32m'updated'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 398 |\u001b[39m       expect(mockQuery\u001b[33m.\u001b[39mupdate)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 399 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/admin/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:396:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/admin/hall-of-fame - Admin Hall of Fame Management API › POST /api/admin/hall-of-fame › should reject when winner already exists without override\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m409\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 428 |\u001b[39m       \u001b[36mconst\u001b[39m data \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m response\u001b[33m.\u001b[39mjson()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 429 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 430 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m409\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 431 |\u001b[39m       expect(data\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoContain(\u001b[32m'Winner already exists'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 432 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 433 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/admin/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:430:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/admin/hall-of-fame - Admin Hall of Fame Management API › POST /api/admin/hall-of-fame › should handle non-existent season\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 463 |\u001b[39m       \u001b[36mconst\u001b[39m data \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m response\u001b[33m.\u001b[39mjson()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 464 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 465 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 466 |\u001b[39m       expect(data\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoBe(\u001b[32m'Season not found'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 467 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 468 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/admin/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:465:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/admin/hall-of-fame - Admin Hall of Fame Management API › POST /api/admin/hall-of-fame › should handle non-existent user\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mUser\u001b[27m not found\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mSeason\u001b[27m not found\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 491 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 492 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 493 |\u001b[39m       expect(data\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoBe(\u001b[32m'User not found'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 494 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 495 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 496 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/admin/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:493:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/admin/hall-of-fame - Admin Hall of Fame Management API › DELETE /api/admin/hall-of-fame › should delete winner by winner_id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 520 |\u001b[39m       \u001b[36mconst\u001b[39m data \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m response\u001b[33m.\u001b[39mjson()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 521 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 522 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 523 |\u001b[39m       expect(data\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m'Winner deleted successfully'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 524 |\u001b[39m       expect(data\u001b[33m.\u001b[39mdeleted_winner)\u001b[33m.\u001b[39mtoEqual(mockHallOfFameData[\u001b[35m0\u001b[39m])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 525 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/admin/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:522:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/admin/hall-of-fame - Admin Hall of Fame Management API › DELETE /api/admin/hall-of-fame › should delete winner by season_id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 547 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[33mDELETE\u001b[39m(request)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 548 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 549 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 550 |\u001b[39m       expect(mockQuery\u001b[33m.\u001b[39meq)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[32m'season_id'\u001b[39m\u001b[33m,\u001b[39m \u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 551 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 552 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/admin/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:549:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/admin/hall-of-fame - Admin Hall of Fame Management API › DELETE /api/admin/hall-of-fame › should handle non-existent winner\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 577 |\u001b[39m       \u001b[36mconst\u001b[39m data \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m response\u001b[33m.\u001b[39mjson()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 578 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 579 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 580 |\u001b[39m       expect(data\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoBe(\u001b[32m'Winner not found'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 581 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 582 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/admin/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:579:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/admin/hall-of-fame - Admin Hall of Fame Management API › DELETE /api/admin/hall-of-fame › should handle delete errors\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"\u001b[7mFailed to delete winne\u001b[27mr\"\u001b[39m\n    Received: \u001b[31m\"\u001b[7mInternal server erro\u001b[27mr\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 602 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 603 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 604 |\u001b[39m       expect(data\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoBe(\u001b[32m'Failed to delete winner'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 605 |\u001b[39m       expect(data\u001b[33m.\u001b[39mdetails)\u001b[33m.\u001b[39mtoBe(\u001b[32m'Delete failed'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 606 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 607 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/admin/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:604:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/admin/hall-of-fame - Admin Hall of Fame Management API › Error handling › should handle database errors in GET\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 626 |\u001b[39m       \u001b[36mconst\u001b[39m data \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m response\u001b[33m.\u001b[39mjson()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 627 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 628 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 629 |\u001b[39m       expect(data\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoBe(\u001b[32m'Database error'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 630 |\u001b[39m       expect(data\u001b[33m.\u001b[39mdetails)\u001b[33m.\u001b[39mtoBe(\u001b[32m'Database connection failed'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 631 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/admin/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:628:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/admin/hall-of-fame - Admin Hall of Fame Management API › Error handling › should handle unexpected errors\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 654 |\u001b[39m       \u001b[36mconst\u001b[39m data \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m response\u001b[33m.\u001b[39mjson()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 655 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 656 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 657 |\u001b[39m       expect(data\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoBe(\u001b[32m'Internal server error'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 658 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 659 |\u001b[39m       \u001b[90m// Verify that the error was logged\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/admin/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:656:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/admin/hall-of-fame - Admin Hall of Fame Management API › Logging › should log successful operations\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32m\"Admin HallOfFame API: GET request completed\"\u001b[39m, \u001b[32mObjectContaining {\"processingTime\": Any<Number>, \"resultCount\": 1, \"totalCount\": 1}\u001b[39m\n    Received\n           1: \u001b[31m\"Admin HallOfFame API: Processing GET request\"\u001b[39m, \u001b[31m{\"method\": \"GET\", \"requestId\": \"3baee953-e9d1-425b-9d58-937587bd4c90\", \"timestamp\": \"2025-07-17T07:23:41.361Z\"}\u001b[39m\n           2: \u001b[31m\"Admin HallOfFame API: Successfully retrieved data\"\u001b[39m, \u001b[2m{\"processingTime\": 0, \"requestId\": \"3baee953-e9d1-425b-9d58-937587bd4c90\", \"resultCount\": 1, \"totalCount\": 1}\u001b[22m\n\n    Number of calls: \u001b[31m2\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 698 |\u001b[39m       )\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 699 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 700 |\u001b[39m       expect(mockLogger\u001b[33m.\u001b[39minfo)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 701 |\u001b[39m         \u001b[32m'Admin HallOfFame API: GET request completed'\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 702 |\u001b[39m         expect\u001b[33m.\u001b[39mobjectContaining({\u001b[22m\n\u001b[2m     \u001b[90m 703 |\u001b[39m           resultCount\u001b[33m:\u001b[39m \u001b[35m1\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toHaveBeenCalledWith (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/admin/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:700:31)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts","startTime":1752737020395,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/hall-of-fame - Main Hall of Fame API","Successful requests"],"duration":478,"failureDetails":[{}],"failureMessages":["Error: Failed to seed test data: Failed to seed betting round fixtures: insert or update on table \"betting_round_fixtures\" violates foreign key constraint \"betting_round_fixtures_fixture_id_fkey\"\n    at seedTestData (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:463:11)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/hall-of-fame/route.test.ts:20:5)"],"fullName":"/api/hall-of-fame - Main Hall of Fame API Successful requests should return Hall of Fame data with default parameters","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return Hall of Fame data with default parameters"}],"endTime":1752737021661,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/hall-of-fame - Main Hall of Fame API › Successful requests › should return Hall of Fame data with default parameters\u001b[39m\u001b[22m\n\n    Failed to seed test data: Failed to seed betting round fixtures: insert or update on table \"betting_round_fixtures\" violates foreign key constraint \"betting_round_fixtures_fixture_id_fkey\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 461 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 462 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Seeding failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 463 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to seed test data: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 464 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 465 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 466 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat seedTestData (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:463:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:20:5)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/hall-of-fame/route.test.ts","startTime":1752737020316,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot set property url of #<NextRequest> which has only a getter\n    at new Request (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/whatwg-fetch/dist/fetch.umd.js:381:16)\n    at new NextRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/next/src/server/web/spec-extension/request.ts:38:10)\n    at createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:33:12)\n    at Object.createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:97:23)\n    at Promise.then.completed (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should return cup standings with default pagination","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return cup standings with default pagination"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot set property url of #<NextRequest> which has only a getter\n    at new Request (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/whatwg-fetch/dist/fetch.umd.js:381:16)\n    at new NextRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/next/src/server/web/spec-extension/request.ts:38:10)\n    at createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:33:12)\n    at Object.createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:147:23)\n    at Promise.then.completed (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should return cup standings with custom pagination","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return cup standings with custom pagination"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":2,"failureDetails":[{}],"failureMessages":["TypeError: Cannot set property url of #<NextRequest> which has only a getter\n    at new Request (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/whatwg-fetch/dist/fetch.umd.js:381:16)\n    at new NextRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/next/src/server/web/spec-extension/request.ts:38:10)\n    at createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:33:12)\n    at Object.createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:183:23)\n    at Promise.then.completed (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should handle custom sorting by points descending","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle custom sorting by points descending"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot set property url of #<NextRequest> which has only a getter\n    at new Request (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/whatwg-fetch/dist/fetch.umd.js:381:16)\n    at new NextRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/next/src/server/web/spec-extension/request.ts:38:10)\n    at createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:33:12)\n    at Object.createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:213:23)\n    at Promise.then.completed (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should handle specific season filter","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle specific season filter"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot set property url of #<NextRequest> which has only a getter\n    at new Request (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/whatwg-fetch/dist/fetch.umd.js:381:16)\n    at new NextRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/next/src/server/web/spec-extension/request.ts:38:10)\n    at createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:33:12)\n    at Object.createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:233:23)\n    at Promise.then.completed (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should return empty results when no standings data exists","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return empty results when no standings data exists"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":0,"failureDetails":[{}],"failureMessages":["TypeError: Cannot set property url of #<NextRequest> which has only a getter\n    at new Request (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/whatwg-fetch/dist/fetch.umd.js:381:16)\n    at new NextRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/next/src/server/web/spec-extension/request.ts:38:10)\n    at createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:33:12)\n    at Object.createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:262:23)\n    at Promise.then.completed (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should handle profile fetch errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle profile fetch errors gracefully"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":2,"failureDetails":[{}],"failureMessages":["TypeError: Cannot set property url of #<NextRequest> which has only a getter\n    at new Request (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/whatwg-fetch/dist/fetch.umd.js:381:16)\n    at new NextRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/next/src/server/web/spec-extension/request.ts:38:10)\n    at createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:33:12)\n    at Object.createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:286:23)\n    at Promise.then.completed (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should handle invalid sort parameter","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle invalid sort parameter"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":0,"failureDetails":[{}],"failureMessages":["TypeError: Cannot set property url of #<NextRequest> which has only a getter\n    at new Request (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/whatwg-fetch/dist/fetch.umd.js:381:16)\n    at new NextRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/next/src/server/web/spec-extension/request.ts:38:10)\n    at createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:33:12)\n    at Object.createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:297:23)\n    at Promise.then.completed (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should handle cup scoring service errors","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle cup scoring service errors"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot set property url of #<NextRequest> which has only a getter\n    at new Request (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/whatwg-fetch/dist/fetch.umd.js:381:16)\n    at new NextRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/next/src/server/web/spec-extension/request.ts:38:10)\n    at createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:33:12)\n    at Object.createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:325:23)\n    at Promise.then.completed (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should include proper cache headers","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should include proper cache headers"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":0,"failureDetails":[{}],"failureMessages":["TypeError: Cannot set property url of #<NextRequest> which has only a getter\n    at new Request (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/whatwg-fetch/dist/fetch.umd.js:381:16)\n    at new NextRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/next/src/server/web/spec-extension/request.ts:38:10)\n    at createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:33:12)\n    at Object.createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:352:23)\n    at Promise.then.completed (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should validate pagination limits","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should validate pagination limits"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot set property url of #<NextRequest> which has only a getter\n    at new Request (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/whatwg-fetch/dist/fetch.umd.js:381:16)\n    at new NextRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/next/src/server/web/spec-extension/request.ts:38:10)\n    at createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:33:12)\n    at Object.createMockRequest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts:378:23)\n    at Promise.then.completed (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should include metadata and query info in response","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should include metadata and query info in response"}],"endTime":1752737022072,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/last-round-special/standings - Cup Standings API › GET /api/last-round-special/standings › should return cup standings with default pagination\u001b[39m\u001b[22m\n\n    TypeError: Cannot set property url of #<NextRequest> which has only a getter\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 |\u001b[39m       url\u001b[33m.\u001b[39msearchParams\u001b[33m.\u001b[39mappend(key\u001b[33m,\u001b[39m value)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 33 |\u001b[39m     \u001b[36mreturn\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mNextRequest\u001b[39m(url\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 35 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 36 |\u001b[39m   \u001b[36mconst\u001b[39m mockStandingsData \u001b[33m=\u001b[39m [\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Request (\u001b[22m\u001b[2mnode_modules/whatwg-fetch/dist/fetch.umd.js\u001b[2m:381:16)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new NextRequest (\u001b[22m\u001b[2mnode_modules/next/src/server/web/spec-extension/request.ts\u001b[2m:38:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:33:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:97:23)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/last-round-special/standings - Cup Standings API › GET /api/last-round-special/standings › should return cup standings with custom pagination\u001b[39m\u001b[22m\n\n    TypeError: Cannot set property url of #<NextRequest> which has only a getter\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 |\u001b[39m       url\u001b[33m.\u001b[39msearchParams\u001b[33m.\u001b[39mappend(key\u001b[33m,\u001b[39m value)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 33 |\u001b[39m     \u001b[36mreturn\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mNextRequest\u001b[39m(url\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 35 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 36 |\u001b[39m   \u001b[36mconst\u001b[39m mockStandingsData \u001b[33m=\u001b[39m [\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Request (\u001b[22m\u001b[2mnode_modules/whatwg-fetch/dist/fetch.umd.js\u001b[2m:381:16)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new NextRequest (\u001b[22m\u001b[2mnode_modules/next/src/server/web/spec-extension/request.ts\u001b[2m:38:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:33:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:147:23)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/last-round-special/standings - Cup Standings API › GET /api/last-round-special/standings › should handle custom sorting by points descending\u001b[39m\u001b[22m\n\n    TypeError: Cannot set property url of #<NextRequest> which has only a getter\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 |\u001b[39m       url\u001b[33m.\u001b[39msearchParams\u001b[33m.\u001b[39mappend(key\u001b[33m,\u001b[39m value)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 33 |\u001b[39m     \u001b[36mreturn\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mNextRequest\u001b[39m(url\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 35 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 36 |\u001b[39m   \u001b[36mconst\u001b[39m mockStandingsData \u001b[33m=\u001b[39m [\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Request (\u001b[22m\u001b[2mnode_modules/whatwg-fetch/dist/fetch.umd.js\u001b[2m:381:16)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new NextRequest (\u001b[22m\u001b[2mnode_modules/next/src/server/web/spec-extension/request.ts\u001b[2m:38:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:33:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:183:23)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/last-round-special/standings - Cup Standings API › GET /api/last-round-special/standings › should handle specific season filter\u001b[39m\u001b[22m\n\n    TypeError: Cannot set property url of #<NextRequest> which has only a getter\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 |\u001b[39m       url\u001b[33m.\u001b[39msearchParams\u001b[33m.\u001b[39mappend(key\u001b[33m,\u001b[39m value)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 33 |\u001b[39m     \u001b[36mreturn\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mNextRequest\u001b[39m(url\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 35 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 36 |\u001b[39m   \u001b[36mconst\u001b[39m mockStandingsData \u001b[33m=\u001b[39m [\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Request (\u001b[22m\u001b[2mnode_modules/whatwg-fetch/dist/fetch.umd.js\u001b[2m:381:16)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new NextRequest (\u001b[22m\u001b[2mnode_modules/next/src/server/web/spec-extension/request.ts\u001b[2m:38:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:33:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:213:23)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/last-round-special/standings - Cup Standings API › GET /api/last-round-special/standings › should return empty results when no standings data exists\u001b[39m\u001b[22m\n\n    TypeError: Cannot set property url of #<NextRequest> which has only a getter\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 |\u001b[39m       url\u001b[33m.\u001b[39msearchParams\u001b[33m.\u001b[39mappend(key\u001b[33m,\u001b[39m value)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 33 |\u001b[39m     \u001b[36mreturn\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mNextRequest\u001b[39m(url\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 35 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 36 |\u001b[39m   \u001b[36mconst\u001b[39m mockStandingsData \u001b[33m=\u001b[39m [\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Request (\u001b[22m\u001b[2mnode_modules/whatwg-fetch/dist/fetch.umd.js\u001b[2m:381:16)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new NextRequest (\u001b[22m\u001b[2mnode_modules/next/src/server/web/spec-extension/request.ts\u001b[2m:38:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:33:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:233:23)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/last-round-special/standings - Cup Standings API › GET /api/last-round-special/standings › should handle profile fetch errors gracefully\u001b[39m\u001b[22m\n\n    TypeError: Cannot set property url of #<NextRequest> which has only a getter\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 |\u001b[39m       url\u001b[33m.\u001b[39msearchParams\u001b[33m.\u001b[39mappend(key\u001b[33m,\u001b[39m value)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 33 |\u001b[39m     \u001b[36mreturn\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mNextRequest\u001b[39m(url\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 35 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 36 |\u001b[39m   \u001b[36mconst\u001b[39m mockStandingsData \u001b[33m=\u001b[39m [\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Request (\u001b[22m\u001b[2mnode_modules/whatwg-fetch/dist/fetch.umd.js\u001b[2m:381:16)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new NextRequest (\u001b[22m\u001b[2mnode_modules/next/src/server/web/spec-extension/request.ts\u001b[2m:38:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:33:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:262:23)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/last-round-special/standings - Cup Standings API › GET /api/last-round-special/standings › should handle invalid sort parameter\u001b[39m\u001b[22m\n\n    TypeError: Cannot set property url of #<NextRequest> which has only a getter\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 |\u001b[39m       url\u001b[33m.\u001b[39msearchParams\u001b[33m.\u001b[39mappend(key\u001b[33m,\u001b[39m value)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 33 |\u001b[39m     \u001b[36mreturn\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mNextRequest\u001b[39m(url\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 35 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 36 |\u001b[39m   \u001b[36mconst\u001b[39m mockStandingsData \u001b[33m=\u001b[39m [\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Request (\u001b[22m\u001b[2mnode_modules/whatwg-fetch/dist/fetch.umd.js\u001b[2m:381:16)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new NextRequest (\u001b[22m\u001b[2mnode_modules/next/src/server/web/spec-extension/request.ts\u001b[2m:38:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:33:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:286:23)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/last-round-special/standings - Cup Standings API › GET /api/last-round-special/standings › should handle cup scoring service errors\u001b[39m\u001b[22m\n\n    TypeError: Cannot set property url of #<NextRequest> which has only a getter\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 |\u001b[39m       url\u001b[33m.\u001b[39msearchParams\u001b[33m.\u001b[39mappend(key\u001b[33m,\u001b[39m value)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 33 |\u001b[39m     \u001b[36mreturn\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mNextRequest\u001b[39m(url\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 35 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 36 |\u001b[39m   \u001b[36mconst\u001b[39m mockStandingsData \u001b[33m=\u001b[39m [\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Request (\u001b[22m\u001b[2mnode_modules/whatwg-fetch/dist/fetch.umd.js\u001b[2m:381:16)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new NextRequest (\u001b[22m\u001b[2mnode_modules/next/src/server/web/spec-extension/request.ts\u001b[2m:38:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:33:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:297:23)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/last-round-special/standings - Cup Standings API › GET /api/last-round-special/standings › should include proper cache headers\u001b[39m\u001b[22m\n\n    TypeError: Cannot set property url of #<NextRequest> which has only a getter\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 |\u001b[39m       url\u001b[33m.\u001b[39msearchParams\u001b[33m.\u001b[39mappend(key\u001b[33m,\u001b[39m value)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 33 |\u001b[39m     \u001b[36mreturn\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mNextRequest\u001b[39m(url\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 35 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 36 |\u001b[39m   \u001b[36mconst\u001b[39m mockStandingsData \u001b[33m=\u001b[39m [\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Request (\u001b[22m\u001b[2mnode_modules/whatwg-fetch/dist/fetch.umd.js\u001b[2m:381:16)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new NextRequest (\u001b[22m\u001b[2mnode_modules/next/src/server/web/spec-extension/request.ts\u001b[2m:38:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:33:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:325:23)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/last-round-special/standings - Cup Standings API › GET /api/last-round-special/standings › should validate pagination limits\u001b[39m\u001b[22m\n\n    TypeError: Cannot set property url of #<NextRequest> which has only a getter\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 |\u001b[39m       url\u001b[33m.\u001b[39msearchParams\u001b[33m.\u001b[39mappend(key\u001b[33m,\u001b[39m value)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 33 |\u001b[39m     \u001b[36mreturn\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mNextRequest\u001b[39m(url\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 35 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 36 |\u001b[39m   \u001b[36mconst\u001b[39m mockStandingsData \u001b[33m=\u001b[39m [\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Request (\u001b[22m\u001b[2mnode_modules/whatwg-fetch/dist/fetch.umd.js\u001b[2m:381:16)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new NextRequest (\u001b[22m\u001b[2mnode_modules/next/src/server/web/spec-extension/request.ts\u001b[2m:38:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:33:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:352:23)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/last-round-special/standings - Cup Standings API › GET /api/last-round-special/standings › should include metadata and query info in response\u001b[39m\u001b[22m\n\n    TypeError: Cannot set property url of #<NextRequest> which has only a getter\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 |\u001b[39m       url\u001b[33m.\u001b[39msearchParams\u001b[33m.\u001b[39mappend(key\u001b[33m,\u001b[39m value)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 33 |\u001b[39m     \u001b[36mreturn\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mNextRequest\u001b[39m(url\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 35 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 36 |\u001b[39m   \u001b[36mconst\u001b[39m mockStandingsData \u001b[33m=\u001b[39m [\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Request (\u001b[22m\u001b[2mnode_modules/whatwg-fetch/dist/fetch.umd.js\u001b[2m:381:16)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new NextRequest (\u001b[22m\u001b[2mnode_modules/next/src/server/web/spec-extension/request.ts\u001b[2m:38:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:33:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.createMockRequest (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/last-round-special/standings/route.test.ts\u001b[39m\u001b[0m\u001b[2m:378:23)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts","startTime":1752737021809,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/hall-of-fame/stats - Hall of Fame Statistics API","Successful requests"],"duration":828,"failureDetails":[{}],"failureMessages":["Error: Failed to seed test data: Failed to seed betting round fixtures: insert or update on table \"betting_round_fixtures\" violates foreign key constraint \"betting_round_fixtures_fixture_id_fkey\"\n    at seedTestData (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:463:11)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at /Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:694:9"],"fullName":"/api/hall-of-fame/stats - Hall of Fame Statistics API Successful requests should return aggregated stats with default parameters","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return aggregated stats with default parameters"}],"endTime":1752737022106,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/hall-of-fame/stats - Hall of Fame Statistics API › Successful requests › should return aggregated stats with default parameters\u001b[39m\u001b[22m\n\n    Failed to seed test data: Failed to seed betting round fixtures: insert or update on table \"betting_round_fixtures\" violates foreign key constraint \"betting_round_fixtures_fixture_id_fkey\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 461 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 462 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Seeding failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 463 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to seed test data: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 464 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 465 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 466 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat seedTestData (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:463:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:694:9\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/hall-of-fame/stats/route.test.ts","startTime":1752737020338,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["SummaryEmail","Rendering"],"duration":105,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Rendering renders without crashing","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"renders without crashing"},{"ancestorTitles":["SummaryEmail","Rendering"],"duration":54,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Rendering displays correct round number in header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays correct round number in header"},{"ancestorTitles":["SummaryEmail","Rendering"],"duration":45,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Rendering displays user name and position correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"displays user name and position correctly"},{"ancestorTitles":["SummaryEmail","Rendering"],"duration":36,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Rendering shows position change correctly for improvement","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"shows position change correctly for improvement"},{"ancestorTitles":["SummaryEmail","Rendering"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Rendering shows points earned this round","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"shows points earned this round"},{"ancestorTitles":["SummaryEmail","Rendering"],"duration":62,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Rendering displays prediction accuracy","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays prediction accuracy"},{"ancestorTitles":["SummaryEmail","Position Changes"],"duration":48,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Position Changes handles position improvement correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles position improvement correctly"},{"ancestorTitles":["SummaryEmail","Position Changes"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Position Changes handles position decline correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles position decline correctly"},{"ancestorTitles":["SummaryEmail","Position Changes"],"duration":33,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Position Changes handles no position change","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles no position change"},{"ancestorTitles":["SummaryEmail","Position Changes"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Position Changes handles missing previous position","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles missing previous position"},{"ancestorTitles":["SummaryEmail","Match Results"],"duration":49,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Match Results displays all match results","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"displays all match results"},{"ancestorTitles":["SummaryEmail","Match Results"],"duration":36,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Match Results shows dramatic badge for highlighted matches","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"shows dramatic badge for highlighted matches"},{"ancestorTitles":["SummaryEmail","Match Results"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Match Results displays correct scores","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"displays correct scores"},{"ancestorTitles":["SummaryEmail","AI Stories"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail AI Stories displays AI-generated stories","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"displays AI-generated stories"},{"ancestorTitles":["SummaryEmail","AI Stories"],"duration":46,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail AI Stories limits stories to 3 maximum","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"limits stories to 3 maximum"},{"ancestorTitles":["SummaryEmail","AI Stories"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail AI Stories handles empty AI stories gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles empty AI stories gracefully"},{"ancestorTitles":["SummaryEmail","League Table"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail League Table displays top 6 league standings","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"displays top 6 league standings"},{"ancestorTitles":["SummaryEmail","League Table"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail League Table shows team statistics correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"shows team statistics correctly"},{"ancestorTitles":["SummaryEmail","Coming Up Next - Next Round Preview"],"duration":58,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Coming Up Next - Next Round Preview displays next round preview when provided","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"displays next round preview when provided"},{"ancestorTitles":["SummaryEmail","Coming Up Next - Next Round Preview"],"duration":54,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Coming Up Next - Next Round Preview limits key fixtures to 3 maximum","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"limits key fixtures to 3 maximum"},{"ancestorTitles":["SummaryEmail","Coming Up Next - Next Round Preview"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Coming Up Next - Next Round Preview handles missing next round preview gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles missing next round preview gracefully"},{"ancestorTitles":["SummaryEmail","Week Highlights"],"duration":45,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Week Highlights displays week highlights when provided","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"displays week highlights when provided"},{"ancestorTitles":["SummaryEmail","Call to Action"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Call to Action shows CTA button with correct tracking parameters","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"shows CTA button with correct tracking parameters"},{"ancestorTitles":["SummaryEmail","Call to Action"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Call to Action CTA button links to the correct app URL","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"CTA button links to the correct app URL"},{"ancestorTitles":["SummaryEmail","Call to Action"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Call to Action renders CTA button regardless of next round preview availability","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"renders CTA button regardless of next round preview availability"},{"ancestorTitles":["SummaryEmail","Best Prediction"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Best Prediction displays best prediction when available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays best prediction when available"},{"ancestorTitles":["SummaryEmail","Best Prediction"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Best Prediction handles missing best prediction","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles missing best prediction"},{"ancestorTitles":["SummaryEmail","Email Preview"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Email Preview generates appropriate preview text","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"generates appropriate preview text"},{"ancestorTitles":["SummaryEmail","Email Preview"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"SummaryEmail Email Preview handles missing AI stories in preview","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles missing AI stories in preview"}],"endTime":1752737023840,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/components/emails/__tests__/SummaryEmail.test.tsx","startTime":1752737022536,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["POST /api/bets"],"duration":608,"failureDetails":[{}],"failureMessages":["Error: Failed to seed test data: Failed to seed betting round fixtures: insert or update on table \"betting_round_fixtures\" violates foreign key constraint \"betting_round_fixtures_fixture_id_fkey\"\n    at seedTestData (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:463:11)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at /Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:694:9"],"fullName":"POST /api/bets should return 200 OK on successful bet submission for an open round","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return 200 OK on successful bet submission for an open round"},{"ancestorTitles":["POST /api/bets"],"duration":245,"failureDetails":[{}],"failureMessages":["Error: Failed to seed test data: Failed to seed seasons: insert or update on table \"seasons\" violates foreign key constraint \"seasons_competition_id_fkey\"\n    at seedTestData (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:463:11)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at /Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:694:9"],"fullName":"POST /api/bets should return 401 Unauthorized if user is not authenticated","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return 401 Unauthorized if user is not authenticated"},{"ancestorTitles":["POST /api/bets"],"duration":646,"failureDetails":[{}],"failureMessages":["Error: Failed to seed test data: Failed to seed rounds: insert or update on table \"rounds\" violates foreign key constraint \"rounds_season_id_fkey\"\n    at seedTestData (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:463:11)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at /Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:694:9"],"fullName":"POST /api/bets should return 400 Bad Request if request body is not a valid array","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return 400 Bad Request if request body is not a valid array"},{"ancestorTitles":["POST /api/bets"],"duration":981,"failureDetails":[{"matcherResult":{"actual":400,"expected":403,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m403\u001b[39m\nReceived: \u001b[31m400\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m403\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/bets/route.test.ts:185:29)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"POST /api/bets should return 403 Forbidden if kickoff time is in the past","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return 403 Forbidden if kickoff time is in the past"},{"ancestorTitles":["POST /api/bets"],"duration":754,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/bets should return 400 Bad Request if any submitted fixture is not in a betting round","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if any submitted fixture is not in a betting round"}],"endTime":1752737024306,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPOST /api/bets › should return 200 OK on successful bet submission for an open round\u001b[39m\u001b[22m\n\n    Failed to seed test data: Failed to seed betting round fixtures: insert or update on table \"betting_round_fixtures\" violates foreign key constraint \"betting_round_fixtures_fixture_id_fkey\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 461 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 462 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Seeding failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 463 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to seed test data: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 464 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 465 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 466 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat seedTestData (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:463:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:694:9\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPOST /api/bets › should return 401 Unauthorized if user is not authenticated\u001b[39m\u001b[22m\n\n    Failed to seed test data: Failed to seed seasons: insert or update on table \"seasons\" violates foreign key constraint \"seasons_competition_id_fkey\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 461 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 462 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Seeding failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 463 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to seed test data: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 464 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 465 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 466 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat seedTestData (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:463:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:694:9\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPOST /api/bets › should return 400 Bad Request if request body is not a valid array\u001b[39m\u001b[22m\n\n    Failed to seed test data: Failed to seed rounds: insert or update on table \"rounds\" violates foreign key constraint \"rounds_season_id_fkey\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 461 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 462 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Seeding failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 463 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to seed test data: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 464 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 465 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 466 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat seedTestData (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:463:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:694:9\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPOST /api/bets › should return 403 Forbidden if kickoff time is in the past\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m403\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 183 |\u001b[39m     \u001b[36mconst\u001b[39m body \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m response\u001b[33m.\u001b[39mjson()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 184 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 185 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m403\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 186 |\u001b[39m     expect(body\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoBe(\u001b[32m'Cannot submit bets, the betting deadline has passed.'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 187 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 188 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/bets/route.test.ts\u001b[39m\u001b[0m\u001b[2m:185:29)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/bets/route.test.ts","startTime":1752737020278,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Questionnaire Component with Combobox"],"duration":174,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire Component with Combobox renders all dropdown sections correctly","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"renders all dropdown sections correctly"},{"ancestorTitles":["Questionnaire Component with Combobox"],"duration":58,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire Component with Combobox displays validation errors when form is submitted with empty values","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"displays validation errors when form is submitted with empty values"},{"ancestorTitles":["Questionnaire Component with Combobox"],"duration":377,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire Component with Combobox selects a team from the league winner dropdown","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"selects a team from the league winner dropdown"},{"ancestorTitles":["Questionnaire Component with Combobox"],"duration":218,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire Component with Combobox selects a player from the top scorer dropdown","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"selects a player from the top scorer dropdown"},{"ancestorTitles":["Questionnaire Component with Combobox"],"duration":264,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire Component with Combobox filters options when typing in the search field","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"filters options when typing in the search field"},{"ancestorTitles":["Questionnaire Component with Combobox"],"duration":182,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire Component with Combobox handles keyboard navigation correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"handles keyboard navigation correctly"},{"ancestorTitles":["Questionnaire Component with Combobox"],"duration":163,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire Component with Combobox clears selected value when clear button is clicked","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"clears selected value when clear button is clicked"},{"ancestorTitles":["Questionnaire Component with Combobox"],"duration":76,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire Component with Combobox validates form successfully when all fields are filled","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"validates form successfully when all fields are filled"},{"ancestorTitles":["Questionnaire Component with Combobox"],"duration":84,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire Component with Combobox toggles content visibility when header is clicked","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"toggles content visibility when header is clicked"},{"ancestorTitles":["Questionnaire Component with Combobox","Zod Validation"],"duration":55,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire Component with Combobox Zod Validation uses the Zod schema for validation","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"uses the Zod schema for validation"},{"ancestorTitles":["Questionnaire Component with Combobox","Zod Validation"],"duration":57,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire Component with Combobox Zod Validation returns valid when all fields pass Zod validation","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns valid when all fields pass Zod validation"},{"ancestorTitles":["Questionnaire Component with Combobox"],"duration":48,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire Component with Combobox formats answers correctly for API submission with getAnswers()","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"formats answers correctly for API submission with getAnswers()"},{"ancestorTitles":["Questionnaire"],"duration":37,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire renders all questions","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"renders all questions"},{"ancestorTitles":["Questionnaire"],"duration":165,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire calls onPredictionChange when a selection is made","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"calls onPredictionChange when a selection is made"},{"ancestorTitles":["Questionnaire"],"duration":47,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire validates predictions correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"validates predictions correctly"},{"ancestorTitles":["Questionnaire"],"duration":55,"failureDetails":[],"failureMessages":[],"fullName":"Questionnaire validates with complete predictions as valid","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"validates with complete predictions as valid"}],"endTime":1752737024835,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/components/Questionnaire/__tests__/Questionnaire.test.tsx","startTime":1752737022123,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReminderEmail","Rendering"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Rendering renders without crashing","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"renders without crashing"},{"ancestorTitles":["ReminderEmail","Rendering"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Rendering displays correct round number in header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays correct round number in header"},{"ancestorTitles":["ReminderEmail","Rendering"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Rendering displays user name correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays user name correctly"},{"ancestorTitles":["ReminderEmail","Rendering"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Rendering shows time remaining","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"shows time remaining"},{"ancestorTitles":["ReminderEmail","Rendering"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Rendering displays user position correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"displays user position correctly"},{"ancestorTitles":["ReminderEmail","Urgency Handling"],"duration":38,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Urgency Handling shows non-urgent styling for regular deadline","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"shows non-urgent styling for regular deadline"},{"ancestorTitles":["ReminderEmail","Urgency Handling"],"duration":45,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Urgency Handling shows urgent styling for urgent deadline","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"shows urgent styling for urgent deadline"},{"ancestorTitles":["ReminderEmail","Urgency Handling"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Urgency Handling shows different CTA button for urgent deadlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"shows different CTA button for urgent deadlines"},{"ancestorTitles":["ReminderEmail","Urgency Handling"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Urgency Handling shows regular CTA button for non-urgent deadlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"shows regular CTA button for non-urgent deadlines"},{"ancestorTitles":["ReminderEmail","Position Suffix"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Position Suffix displays correct suffix for 1st position","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays correct suffix for 1st position"},{"ancestorTitles":["ReminderEmail","Position Suffix"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Position Suffix displays correct suffix for 2nd position","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays correct suffix for 2nd position"},{"ancestorTitles":["ReminderEmail","Position Suffix"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Position Suffix displays correct suffix for 3rd position","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays correct suffix for 3rd position"},{"ancestorTitles":["ReminderEmail","Position Suffix"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Position Suffix displays correct suffix for 4th position","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays correct suffix for 4th position"},{"ancestorTitles":["ReminderEmail","Position Suffix"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Position Suffix displays correct suffix for 11th position","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays correct suffix for 11th position"},{"ancestorTitles":["ReminderEmail","Position Suffix"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Position Suffix displays correct suffix for 21st position","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays correct suffix for 21st position"},{"ancestorTitles":["ReminderEmail","User Performance"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail User Performance displays points behind leader","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"displays points behind leader"},{"ancestorTitles":["ReminderEmail","User Performance"],"duration":42,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail User Performance shows recent form with correct icon","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"shows recent form with correct icon"},{"ancestorTitles":["ReminderEmail","User Performance"],"duration":31,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail User Performance handles declining form correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"handles declining form correctly"},{"ancestorTitles":["ReminderEmail","User Performance"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail User Performance handles steady form correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"handles steady form correctly"},{"ancestorTitles":["ReminderEmail","User Performance"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail User Performance shows points ahead of next player when available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"shows points ahead of next player when available"},{"ancestorTitles":["ReminderEmail","User Performance"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail User Performance handles missing points ahead gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles missing points ahead gracefully"},{"ancestorTitles":["ReminderEmail","AI Content"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail AI Content displays AI-generated personal message","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays AI-generated personal message"},{"ancestorTitles":["ReminderEmail","AI Content"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail AI Content displays strategy tip when provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"displays strategy tip when provided"},{"ancestorTitles":["ReminderEmail","AI Content"],"duration":38,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail AI Content displays fixture insight when provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"displays fixture insight when provided"},{"ancestorTitles":["ReminderEmail","AI Content"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail AI Content displays encouragement message","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays encouragement message"},{"ancestorTitles":["ReminderEmail","AI Content"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail AI Content handles missing strategy tip gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles missing strategy tip gracefully"},{"ancestorTitles":["ReminderEmail","AI Content"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail AI Content handles missing fixture insight gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles missing fixture insight gracefully"},{"ancestorTitles":["ReminderEmail","Key Matches"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Key Matches displays key matches section when provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays key matches section when provided"},{"ancestorTitles":["ReminderEmail","Key Matches"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Key Matches shows match importance badges","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"shows match importance badges"},{"ancestorTitles":["ReminderEmail","Key Matches"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Key Matches displays team names for key matches","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"displays team names for key matches"},{"ancestorTitles":["ReminderEmail","Key Matches"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Key Matches shows team form when available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"shows team form when available"},{"ancestorTitles":["ReminderEmail","Key Matches"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Key Matches handles missing key matches gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles missing key matches gracefully"},{"ancestorTitles":["ReminderEmail","All Fixtures"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail All Fixtures displays all upcoming fixtures","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays all upcoming fixtures"},{"ancestorTitles":["ReminderEmail","All Fixtures"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail All Fixtures shows fixture matchups","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"shows fixture matchups"},{"ancestorTitles":["ReminderEmail","League Context"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail League Context displays league context when provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"displays league context when provided"},{"ancestorTitles":["ReminderEmail","League Context"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail League Context shows user last round score","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"shows user last round score"},{"ancestorTitles":["ReminderEmail","League Context"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail League Context shows league average","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"shows league average"},{"ancestorTitles":["ReminderEmail","League Context"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail League Context shows round high score","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"shows round high score"},{"ancestorTitles":["ReminderEmail","League Context"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail League Context handles missing league context gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles missing league context gracefully"},{"ancestorTitles":["ReminderEmail","Call to Action"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Call to Action includes correct CTA button with tracking parameters","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"includes correct CTA button with tracking parameters"},{"ancestorTitles":["ReminderEmail","Call to Action"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Call to Action shows motivational text","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"shows motivational text"},{"ancestorTitles":["ReminderEmail","Email Preview"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Email Preview generates appropriate preview text for non-urgent","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"generates appropriate preview text for non-urgent"},{"ancestorTitles":["ReminderEmail","Email Preview"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Email Preview generates appropriate preview text for urgent","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"generates appropriate preview text for urgent"},{"ancestorTitles":["ReminderEmail","Footer"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Footer includes personalized footer message","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"includes personalized footer message"},{"ancestorTitles":["ReminderEmail","Footer"],"duration":74,"failureDetails":[],"failureMessages":[],"fullName":"ReminderEmail Footer includes unsubscribe and preferences links","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"includes unsubscribe and preferences links"}],"endTime":1752737024990,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/components/emails/__tests__/ReminderEmail.test.tsx","startTime":1752737023864,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Standings Service","calculateStandings integration tests"],"duration":1053,"failureDetails":[],"failureMessages":[],"fullName":"Standings Service calculateStandings integration tests should return null if aggregation (aggregateUserPoints) fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null if aggregation (aggregateUserPoints) fails"},{"ancestorTitles":["Standings Service","calculateStandings integration tests"],"duration":1859,"failureDetails":[],"failureMessages":[],"fullName":"Standings Service calculateStandings integration tests should return null if getUserDynamicQuestionnairePoints returns null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if getUserDynamicQuestionnairePoints returns null"},{"ancestorTitles":["Standings Service","calculateStandings logic tests"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Standings Service calculateStandings logic tests should correctly calculate standings for multiple users with ties","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should correctly calculate standings for multiple users with ties"},{"ancestorTitles":["Standings Service","calculateStandings logic tests"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Standings Service calculateStandings logic tests should handle an empty array of user points","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle an empty array of user points"},{"ancestorTitles":["Standings Service","calculateStandings logic tests"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Standings Service calculateStandings logic tests should handle a single user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle a single user"},{"ancestorTitles":["Standings Service","calculateStandings logic tests"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"Standings Service calculateStandings logic tests should assign rank 1 to all users if all have the same score","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should assign rank 1 to all users if all have the same score"},{"ancestorTitles":["Standings Service","calculateStandings logic tests"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Standings Service calculateStandings logic tests should correctly rank users with zero points","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should correctly rank users with zero points"},{"ancestorTitles":["Standings Service","calculateStandings logic tests"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Standings Service calculateStandings logic tests should return null if dynamicPointsMap (from getUserDynamicQuestionnairePoints) is null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if dynamicPointsMap (from getUserDynamicQuestionnairePoints) is null"},{"ancestorTitles":["Standings Service","calculateStandings logic tests"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Standings Service calculateStandings logic tests should return null if aggregateUserPoints returns null","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null if aggregateUserPoints returns null"},{"ancestorTitles":["getUserDynamicQuestionnairePoints Tests"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getUserDynamicQuestionnairePoints Tests should return a map of user points for the latest scored round","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return a map of user points for the latest scored round"},{"ancestorTitles":["getUserDynamicQuestionnairePoints Tests"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"getUserDynamicQuestionnairePoints Tests should return an empty map if no dynamic points data is found for the round","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return an empty map if no dynamic points data is found for the round"},{"ancestorTitles":["getUserDynamicQuestionnairePoints Tests"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"getUserDynamicQuestionnairePoints Tests should return an empty map if no scored rounds are found","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return an empty map if no scored rounds are found"},{"ancestorTitles":["getUserDynamicQuestionnairePoints Tests"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"getUserDynamicQuestionnairePoints Tests should return null if fetching the latest round fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null if fetching the latest round fails"},{"ancestorTitles":["getUserDynamicQuestionnairePoints Tests"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getUserDynamicQuestionnairePoints Tests should return null if fetching dynamic points data fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null if fetching dynamic points data fails"},{"ancestorTitles":["getUserDynamicQuestionnairePoints Tests"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"getUserDynamicQuestionnairePoints Tests should skip entries with missing user_id or non-numeric total_points and log a warning","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should skip entries with missing user_id or non-numeric total_points and log a warning"}],"endTime":1752737025146,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/standingsService.test.ts","startTime":1752737021966,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/cron/season-completion","Authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Authentication should reject requests without CRON_SECRET","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject requests without CRON_SECRET"},{"ancestorTitles":["/api/cron/season-completion","Authentication"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Authentication should reject requests with invalid CRON_SECRET","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject requests with invalid CRON_SECRET"},{"ancestorTitles":["/api/cron/season-completion","Authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Authentication should accept requests with valid Bearer token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept requests with valid Bearer token"},{"ancestorTitles":["/api/cron/season-completion","Authentication"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Authentication should accept requests with valid X-Cron-Secret header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept requests with valid X-Cron-Secret header"},{"ancestorTitles":["/api/cron/season-completion","Season completion detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Season completion detection should handle successful detection with no completed seasons","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle successful detection with no completed seasons"},{"ancestorTitles":["/api/cron/season-completion","Season completion detection"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Season completion detection should handle successful detection with completed seasons","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle successful detection with completed seasons"},{"ancestorTitles":["/api/cron/season-completion","Season completion detection"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Season completion detection should handle detection with errors but still succeed if some seasons completed","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle detection with errors but still succeed if some seasons completed"},{"ancestorTitles":["/api/cron/season-completion","Season completion detection"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Season completion detection should handle detection with only errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle detection with only errors"},{"ancestorTitles":["/api/cron/season-completion","Season completion detection"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Season completion detection should handle service throwing an error","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle service throwing an error"},{"ancestorTitles":["/api/cron/season-completion","Season completion detection"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Season completion detection should handle winner determination errors without failing season completion","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle winner determination errors without failing season completion"},{"ancestorTitles":["/api/cron/season-completion","Response format"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Response format should include all required fields in successful response","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include all required fields in successful response"},{"ancestorTitles":["/api/cron/season-completion","Response format"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Response format should include all required fields in error response","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include all required fields in error response"}],"endTime":1752737025483,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/cron/season-completion/route.test.ts","startTime":1752737025272,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Combobox Responsive Behavior"],"duration":153,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Responsive Behavior adapts input width on mobile screen sizes","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"adapts input width on mobile screen sizes"},{"ancestorTitles":["Combobox Responsive Behavior"],"duration":74,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Responsive Behavior ensures dropdown fits within viewport on mobile","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"ensures dropdown fits within viewport on mobile"},{"ancestorTitles":["Combobox Responsive Behavior"],"duration":170,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Responsive Behavior handles touch interactions properly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"handles touch interactions properly"},{"ancestorTitles":["Combobox Responsive Behavior"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Responsive Behavior adapts font size for readability on small screens","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"adapts font size for readability on small screens"},{"ancestorTitles":["Combobox Responsive Behavior"],"duration":113,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Responsive Behavior ensures dropdown options are touch-friendly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"ensures dropdown options are touch-friendly"},{"ancestorTitles":["Combobox Responsive Behavior"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Responsive Behavior handles orientation changes properly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles orientation changes properly"}],"endTime":1752737025995,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/components/ui/__tests__/combobox-responsive.test.tsx","startTime":1752737025015,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Story Generation Service","StoryGenerationService class"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service StoryGenerationService class should be instantiated correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be instantiated correctly"},{"ancestorTitles":["Story Generation Service","StoryGenerationService class"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service StoryGenerationService class should have a generateStory method","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have a generateStory method"},{"ancestorTitles":["Story Generation Service","generateStory method"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service generateStory method should return fallback content when AI is not available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return fallback content when AI is not available"},{"ancestorTitles":["Story Generation Service","generateStory method"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service generateStory method should return fallback content for match drama type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return fallback content for match drama type"},{"ancestorTitles":["Story Generation Service","generateStory method"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service generateStory method should return fallback content for performance type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return fallback content for performance type"},{"ancestorTitles":["Story Generation Service","generateStory method"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service generateStory method should return default fallback for unknown type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return default fallback for unknown type"},{"ancestorTitles":["Story Generation Service","exported service instance"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service exported service instance should export a default service instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should export a default service instance"},{"ancestorTitles":["Story Generation Service","exported service instance"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service exported service instance should be able to generate stories using the exported instance","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should be able to generate stories using the exported instance"},{"ancestorTitles":["Story Generation Service","type definitions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service type definitions should have correct MatchData structure","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should have correct MatchData structure"},{"ancestorTitles":["Story Generation Service","type definitions"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service type definitions should have correct StandingsData structure","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should have correct StandingsData structure"},{"ancestorTitles":["Story Generation Service","type definitions"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service type definitions should have correct UserPerformanceData structure","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should have correct UserPerformanceData structure"},{"ancestorTitles":["Story Generation Service","type definitions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service type definitions should have correct StoryGenerationContext structure","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should have correct StoryGenerationContext structure"},{"ancestorTitles":["Story Generation Service","error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service error handling should handle empty prompts gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty prompts gracefully"},{"ancestorTitles":["Story Generation Service","error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service error handling should handle null prompts gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle null prompts gracefully"},{"ancestorTitles":["Story Generation Service","error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service error handling should handle API errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle API errors gracefully"},{"ancestorTitles":["Story Generation Service","error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service error handling should handle malformed API responses","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle malformed API responses"},{"ancestorTitles":["Story Generation Service","integration with AI service"],"duration":1188,"failureDetails":[],"failureMessages":[],"fullName":"Story Generation Service integration with AI service should use fallback when AI is not available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use fallback when AI is not available"}],"endTime":1752737026230,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/storyGenerationService.test.ts","startTime":1752737024859,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["BettingCoupon"],"duration":106,"failureDetails":[],"failureMessages":[],"fullName":"BettingCoupon renders all matches","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"renders all matches"},{"ancestorTitles":["BettingCoupon"],"duration":41,"failureDetails":[],"failureMessages":[],"fullName":"BettingCoupon allows selection of match outcomes","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"allows selection of match outcomes"},{"ancestorTitles":["BettingCoupon"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"BettingCoupon de-selects when clicking the same button twice","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"de-selects when clicking the same button twice"},{"ancestorTitles":["BettingCoupon"],"duration":76,"failureDetails":[],"failureMessages":[],"fullName":"BettingCoupon exposes validation function via ref","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"exposes validation function via ref"},{"ancestorTitles":["BettingCoupon"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"BettingCoupon applies error styling when validation errors are passed","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"applies error styling when validation errors are passed"},{"ancestorTitles":["BettingCoupon"],"duration":115,"failureDetails":[],"failureMessages":[],"fullName":"BettingCoupon applies error styling but does not display summary text internally","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"applies error styling but does not display summary text internally"},{"ancestorTitles":["BettingCoupon"],"duration":69,"failureDetails":[],"failureMessages":[],"fullName":"BettingCoupon maintains multiple selections across different matches","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"maintains multiple selections across different matches"}],"endTime":1752737026284,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/components/BettingCoupon/__tests__/BettingCoupon.test.tsx","startTime":1752737025501,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Combobox Accessibility"],"duration":128,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Accessibility should not have accessibility violations in default state","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not have accessibility violations in default state"},{"ancestorTitles":["Combobox Accessibility"],"duration":141,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Accessibility should not have accessibility violations when open","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not have accessibility violations when open"},{"ancestorTitles":["Combobox Accessibility"],"duration":42,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Accessibility should not have accessibility violations with selection","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not have accessibility violations with selection"},{"ancestorTitles":["Combobox Accessibility"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Accessibility should have proper ARIA attributes in collapsed state","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should have proper ARIA attributes in collapsed state"},{"ancestorTitles":["Combobox Accessibility"],"duration":152,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Accessibility should have proper ARIA attributes in expanded state","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should have proper ARIA attributes in expanded state"},{"ancestorTitles":["Combobox Accessibility"],"duration":600,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Accessibility supports keyboard navigation","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"supports keyboard navigation"},{"ancestorTitles":["Combobox Accessibility"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Accessibility has proper focus management","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"has proper focus management"},{"ancestorTitles":["Combobox Accessibility"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Accessibility has accessible clear button","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"has accessible clear button"}],"endTime":1752737026532,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/components/ui/__tests__/combobox-accessibility.test.tsx","startTime":1752737024722,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Email Data Service","aggregateSummaryEmailData"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service aggregateSummaryEmailData should aggregate summary email data successfully","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should aggregate summary email data successfully"},{"ancestorTitles":["Email Data Service","aggregateSummaryEmailData"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service aggregateSummaryEmailData should handle matches without comprehensive data","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle matches without comprehensive data"},{"ancestorTitles":["Email Data Service","aggregateSummaryEmailData"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service aggregateSummaryEmailData should handle empty fixtures","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty fixtures"},{"ancestorTitles":["Email Data Service","aggregateSummaryEmailData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service aggregateSummaryEmailData should handle database errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database errors gracefully"},{"ancestorTitles":["Email Data Service","aggregateReminderEmailData"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service aggregateReminderEmailData should aggregate reminder email data successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should aggregate reminder email data successfully"},{"ancestorTitles":["Email Data Service","aggregateReminderEmailData"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service aggregateReminderEmailData should handle missing current round data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing current round data"},{"ancestorTitles":["Email Data Service","aggregateReminderEmailData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service aggregateReminderEmailData should transform match data correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should transform match data correctly"},{"ancestorTitles":["Email Data Service","aggregateReminderEmailData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service aggregateReminderEmailData should handle database errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database errors"},{"ancestorTitles":["Email Data Service","isRoundCompleted"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service isRoundCompleted should return true for completed rounds","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return true for completed rounds"},{"ancestorTitles":["Email Data Service","isRoundCompleted"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service isRoundCompleted should handle various round name formats","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should handle various round name formats"},{"ancestorTitles":["Email Data Service","isRoundCompleted"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service isRoundCompleted should handle empty or invalid round names","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty or invalid round names"},{"ancestorTitles":["Email Data Service","getMockUserPerformance"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service getMockUserPerformance should return mock user performance data","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return mock user performance data"},{"ancestorTitles":["Email Data Service","getMockLeagueTable"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service getMockLeagueTable should return mock league table data","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return mock league table data"},{"ancestorTitles":["Email Data Service","getCompletedMatchResults"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service getCompletedMatchResults should fetch completed match results successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should fetch completed match results successfully"},{"ancestorTitles":["Email Data Service","getCompletedMatchResults"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service getCompletedMatchResults should handle API errors gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle API errors gracefully"},{"ancestorTitles":["Email Data Service","getUpcomingFixtures"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service getUpcomingFixtures should fetch upcoming fixtures successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should fetch upcoming fixtures successfully"},{"ancestorTitles":["Email Data Service","getUpcomingFixtures"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service getUpcomingFixtures should handle missing current round data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing current round data"},{"ancestorTitles":["Email Data Service","Error handling and edge cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service Error handling and edge cases should handle partial API failures in summary data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle partial API failures in summary data"},{"ancestorTitles":["Email Data Service","Error handling and edge cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Email Data Service Error handling and edge cases should handle null scores in fixtures","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle null scores in fixtures"}],"endTime":1752737026543,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/emailDataService.test.ts","startTime":1752737026327,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["useFixtures Hook"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"useFixtures Hook should return initial loading state and empty matches","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return initial loading state and empty matches"},{"ancestorTitles":["useFixtures Hook"],"duration":56,"failureDetails":[],"failureMessages":[],"fullName":"useFixtures Hook should fetch matches successfully and update state","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should fetch matches successfully and update state"},{"ancestorTitles":["useFixtures Hook"],"duration":56,"failureDetails":[],"failureMessages":[],"fullName":"useFixtures Hook should handle fetch error and update state","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle fetch error and update state"},{"ancestorTitles":["useFixtures Hook"],"duration":56,"failureDetails":[],"failureMessages":[],"fullName":"useFixtures Hook should handle fetch throwing an error (e.g., network error)","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle fetch throwing an error (e.g., network error)"},{"ancestorTitles":["useFixtures Hook"],"duration":55,"failureDetails":[],"failureMessages":[],"fullName":"useFixtures Hook should refetch data when refetch function is called","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should refetch data when refetch function is called"},{"ancestorTitles":["useFixtures Hook"],"duration":110,"failureDetails":[],"failureMessages":[],"fullName":"useFixtures Hook should refetch data when dependencies (props) change","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"should refetch data when dependencies (props) change"}],"endTime":1752737026587,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/features/betting/hooks/useFixtures.test.ts","startTime":1752737026023,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["useAuth Hook"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"useAuth Hook should return initial loading state","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return initial loading state"},{"ancestorTitles":["useAuth Hook"],"duration":57,"failureDetails":[],"failureMessages":[],"fullName":"useAuth Hook should set user and stop loading on successful initial fetch","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should set user and stop loading on successful initial fetch"},{"ancestorTitles":["useAuth Hook"],"duration":65,"failureDetails":[],"failureMessages":[],"fullName":"useAuth Hook should stop loading and keep user null on failed initial fetch","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should stop loading and keep user null on failed initial fetch"},{"ancestorTitles":["useAuth Hook"],"duration":59,"failureDetails":[],"failureMessages":[],"fullName":"useAuth Hook should update user when onAuthStateChange provides a session","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should update user when onAuthStateChange provides a session"},{"ancestorTitles":["useAuth Hook"],"duration":59,"failureDetails":[],"failureMessages":[],"fullName":"useAuth Hook should set user to null when onAuthStateChange provides no session","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should set user to null when onAuthStateChange provides no session"},{"ancestorTitles":["useAuth Hook"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"useAuth Hook should call unsubscribe on unmount","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should call unsubscribe on unmount"}],"endTime":1752737026642,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/features/auth/hooks/useAuth.test.ts","startTime":1752737026257,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["GET /api/players"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 200 OK with players on valid request","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return 200 OK with players on valid request"},{"ancestorTitles":["GET /api/players"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 400 Bad Request if league parameter is missing","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if league parameter is missing"},{"ancestorTitles":["GET /api/players"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 400 Bad Request if season parameter is missing","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if season parameter is missing"},{"ancestorTitles":["GET /api/players"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 400 Bad Request if league parameter is not a number","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if league parameter is not a number"},{"ancestorTitles":["GET /api/players"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 400 Bad Request if season parameter is not a number","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if season parameter is not a number"},{"ancestorTitles":["GET /api/players"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 404 Not Found if season is not found in DB","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 404 Not Found if season is not found in DB"},{"ancestorTitles":["GET /api/players"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 500 Internal Server Error if findSeasonId query fails","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 500 Internal Server Error if findSeasonId query fails"},{"ancestorTitles":["GET /api/players"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 500 Internal Server Error if getPlayersForSeason query fails","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 500 Internal Server Error if getPlayersForSeason query fails"},{"ancestorTitles":["GET /api/players"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 200 OK with an empty array if no players are found","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 200 OK with an empty array if no players are found"}],"endTime":1752737026780,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/players/route.test.ts","startTime":1752737026675,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ActivationConditionCalculator","calculateActivationCondition"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator calculateActivationCondition should return conditionMet=true when exactly 60% of teams have ≤5 games","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return conditionMet=true when exactly 60% of teams have ≤5 games"},{"ancestorTitles":["ActivationConditionCalculator","calculateActivationCondition"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator calculateActivationCondition should return conditionMet=false when only 50% of teams have ≤5 games","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return conditionMet=false when only 50% of teams have ≤5 games"},{"ancestorTitles":["ActivationConditionCalculator","calculateActivationCondition"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator calculateActivationCondition should return conditionMet=true when 70% of teams have ≤5 games","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return conditionMet=true when 70% of teams have ≤5 games"},{"ancestorTitles":["ActivationConditionCalculator","calculateActivationCondition"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator calculateActivationCondition should return conditionMet=true when all teams have ≤5 games","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return conditionMet=true when all teams have ≤5 games"},{"ancestorTitles":["ActivationConditionCalculator","calculateActivationCondition"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator calculateActivationCondition should return conditionMet=false when no teams have ≤5 games","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return conditionMet=false when no teams have ≤5 games"},{"ancestorTitles":["ActivationConditionCalculator","calculateActivationCondition"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator calculateActivationCondition should work with custom threshold values","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should work with custom threshold values"},{"ancestorTitles":["ActivationConditionCalculator","calculateActivationCondition"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator calculateActivationCondition should handle edge case with exactly 0 teams","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle edge case with exactly 0 teams"},{"ancestorTitles":["ActivationConditionCalculator","calculateActivationCondition"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator calculateActivationCondition should throw error for invalid threshold values","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for invalid threshold values"},{"ancestorTitles":["ActivationConditionCalculator","calculateActivationCondition"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator calculateActivationCondition should throw error for null/undefined fixture data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for null/undefined fixture data"},{"ancestorTitles":["ActivationConditionCalculator","calculateActivationConditionFromTeams"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator calculateActivationConditionFromTeams should correctly calculate from raw teams data","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should correctly calculate from raw teams data"},{"ancestorTitles":["ActivationConditionCalculator","calculateActivationConditionFromTeams"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator calculateActivationConditionFromTeams should handle empty teams array","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle empty teams array"},{"ancestorTitles":["ActivationConditionCalculator","calculateActivationConditionFromTeams"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator calculateActivationConditionFromTeams should throw error for invalid teams data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for invalid teams data"},{"ancestorTitles":["ActivationConditionCalculator","isActivationConditionMet"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator isActivationConditionMet should return boolean result for condition check","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return boolean result for condition check"},{"ancestorTitles":["ActivationConditionCalculator","_generateReasoning"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator _generateReasoning should generate appropriate reasoning for met condition","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate appropriate reasoning for met condition"},{"ancestorTitles":["ActivationConditionCalculator","_generateReasoning"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator _generateReasoning should generate appropriate reasoning for unmet condition","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate appropriate reasoning for unmet condition"},{"ancestorTitles":["ActivationConditionCalculator","constants"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ActivationConditionCalculator constants should export the correct activation threshold","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should export the correct activation threshold"}],"endTime":1752737026800,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/cup/__tests__/activationConditionCalculator.test.ts","startTime":1752737026629,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["BettingCoupon Ref Integration"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"BettingCoupon Ref Integration exposes validation function through ref that returns correct structure","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"exposes validation function through ref that returns correct structure"},{"ancestorTitles":["BettingCoupon Ref Integration"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"BettingCoupon Ref Integration validates as valid when all matches have selections","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"validates as valid when all matches have selections"},{"ancestorTitles":["BettingCoupon Ref Integration"],"duration":48,"failureDetails":[],"failureMessages":[],"fullName":"BettingCoupon Ref Integration updates validation result after user interactions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"updates validation result after user interactions"}],"endTime":1752737026865,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/components/BettingCoupon/__tests__/BettingCouponRef.test.tsx","startTime":1752737026617,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["useQuestionnaireData Hook"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"useQuestionnaireData Hook should return initial loading state and empty data","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return initial loading state and empty data"},{"ancestorTitles":["useQuestionnaireData Hook"],"duration":58,"failureDetails":[],"failureMessages":[],"fullName":"useQuestionnaireData Hook should fetch teams and players successfully","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should fetch teams and players successfully"},{"ancestorTitles":["useQuestionnaireData Hook"],"duration":59,"failureDetails":[],"failureMessages":[],"fullName":"useQuestionnaireData Hook should handle error if teams fetch fails","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle error if teams fetch fails"},{"ancestorTitles":["useQuestionnaireData Hook"],"duration":61,"failureDetails":[],"failureMessages":[],"fullName":"useQuestionnaireData Hook should handle error if players fetch fails","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle error if players fetch fails"},{"ancestorTitles":["useQuestionnaireData Hook"],"duration":58,"failureDetails":[],"failureMessages":[],"fullName":"useQuestionnaireData Hook should handle error if fetch itself throws (network error)","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle error if fetch itself throws (network error)"}],"endTime":1752737026918,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/features/questionnaire/hooks/useQuestionnaireData.test.ts","startTime":1752737026548,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["submissionHelpers","validateCouponSelections"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"submissionHelpers validateCouponSelections should return isValid: true for complete selections","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return isValid: true for complete selections"},{"ancestorTitles":["submissionHelpers","validateCouponSelections"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"submissionHelpers validateCouponSelections should return isValid: false if selections are null or empty","invocations":1,"location":null,"numPassingAsserts":12,"retryReasons":[],"status":"passed","title":"should return isValid: false if selections are null or empty"},{"ancestorTitles":["submissionHelpers","validateCouponSelections"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"submissionHelpers validateCouponSelections should return isValid: false if some selections are missing","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return isValid: false if some selections are missing"},{"ancestorTitles":["submissionHelpers","validateCouponSelections"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"submissionHelpers validateCouponSelections should return isValid: true if matches array is empty (nothing to validate)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return isValid: true if matches array is empty (nothing to validate)"},{"ancestorTitles":["submissionHelpers","validateQuestionnaireAnswers"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"submissionHelpers validateQuestionnaireAnswers should return isValid: true for complete and answered questions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return isValid: true for complete and answered questions"},{"ancestorTitles":["submissionHelpers","validateQuestionnaireAnswers"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"submissionHelpers validateQuestionnaireAnswers should return isValid: false if answers are null or undefined","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return isValid: false if answers are null or undefined"},{"ancestorTitles":["submissionHelpers","validateQuestionnaireAnswers"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"submissionHelpers validateQuestionnaireAnswers should return isValid: false if fewer than expected answers are provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return isValid: false if fewer than expected answers are provided"},{"ancestorTitles":["submissionHelpers","validateQuestionnaireAnswers"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"submissionHelpers validateQuestionnaireAnswers should return isValid: false if one or more questions are unanswered","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return isValid: false if one or more questions are unanswered"},{"ancestorTitles":["submissionHelpers","prepareBetSubmissionData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"submissionHelpers prepareBetSubmissionData should format selections correctly for the API","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should format selections correctly for the API"},{"ancestorTitles":["submissionHelpers","prepareBetSubmissionData"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"submissionHelpers prepareBetSubmissionData should return an empty array for empty selections","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return an empty array for empty selections"},{"ancestorTitles":["submissionHelpers","prepareAnswersSubmissionData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"submissionHelpers prepareAnswersSubmissionData should return the answers array as is","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the answers array as is"},{"ancestorTitles":["submissionHelpers","prepareAnswersSubmissionData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"submissionHelpers prepareAnswersSubmissionData should return an empty array if input is empty","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return an empty array if input is empty"}],"endTime":1752737026961,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/features/betting/utils/submissionHelpers.test.ts","startTime":1752737026848,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["PromptTemplateService","Match Story Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptTemplateService Match Story Generation should generate match story prompt with context","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate match story prompt with context"},{"ancestorTitles":["PromptTemplateService","Match Story Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptTemplateService Match Story Generation should handle match without scores","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle match without scores"},{"ancestorTitles":["PromptTemplateService","User Analysis Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptTemplateService User Analysis Generation should generate user analysis prompt","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate user analysis prompt"},{"ancestorTitles":["PromptTemplateService","Email Content Generation"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"PromptTemplateService Email Content Generation should generate email content prompt","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate email content prompt"},{"ancestorTitles":["PromptTemplateService","Match Analysis Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptTemplateService Match Analysis Generation should generate match analysis prompt","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate match analysis prompt"},{"ancestorTitles":["PromptTemplateService","Improvement Suggestions Generation"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"PromptTemplateService Improvement Suggestions Generation should generate improvement suggestions prompt","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate improvement suggestions prompt"},{"ancestorTitles":["PromptTemplateService","Motivational Message Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptTemplateService Motivational Message Generation should generate motivational message prompt","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate motivational message prompt"},{"ancestorTitles":["PromptTemplateService","Configuration Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptTemplateService Configuration Management should return appropriate configs for different content types","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return appropriate configs for different content types"}],"endTime":1752737027055,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/promptTemplateService.test.ts","startTime":1752737026958,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["IdempotentActivationService","activateCurrentSeasonCup"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService activateCurrentSeasonCup should return success when cup is already activated","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return success when cup is already activated"},{"ancestorTitles":["IdempotentActivationService","activateCurrentSeasonCup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService activateCurrentSeasonCup should return failure when no current season exists","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return failure when no current season exists"},{"ancestorTitles":["IdempotentActivationService","activateCurrentSeasonCup"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService activateCurrentSeasonCup should successfully activate cup when conditions are met","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should successfully activate cup when conditions are met"},{"ancestorTitles":["IdempotentActivationService","activateCurrentSeasonCup"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService activateCurrentSeasonCup should handle race condition when cup gets activated during transaction","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle race condition when cup gets activated during transaction"},{"ancestorTitles":["IdempotentActivationService","activateCurrentSeasonCup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService activateCurrentSeasonCup should handle RPC error","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle RPC error"},{"ancestorTitles":["IdempotentActivationService","activateCurrentSeasonCup"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService activateCurrentSeasonCup should handle unexpected errors","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle unexpected errors"},{"ancestorTitles":["IdempotentActivationService","activateSeasonCup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService activateSeasonCup should return success when cup is already activated for specific season","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return success when cup is already activated for specific season"},{"ancestorTitles":["IdempotentActivationService","activateSeasonCup"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService activateSeasonCup should return failure when season does not exist","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return failure when season does not exist"},{"ancestorTitles":["IdempotentActivationService","activateSeasonCup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService activateSeasonCup should successfully activate cup for specific season","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should successfully activate cup for specific season"},{"ancestorTitles":["IdempotentActivationService","activateSeasonCup"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService activateSeasonCup should validate season ID input","invocations":1,"location":null,"numPassingAsserts":24,"retryReasons":[],"status":"passed","title":"should validate season ID input"},{"ancestorTitles":["IdempotentActivationService","activateSeasonCup"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService activateSeasonCup should handle RPC failure for specific season","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle RPC failure for specific season"},{"ancestorTitles":["IdempotentActivationService","attemptActivation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService attemptActivation should return true when activation succeeds for current season","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when activation succeeds for current season"},{"ancestorTitles":["IdempotentActivationService","attemptActivation"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService attemptActivation should return true when activation succeeds for specific season","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when activation succeeds for specific season"},{"ancestorTitles":["IdempotentActivationService","attemptActivation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService attemptActivation should return false when activation fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when activation fails"},{"ancestorTitles":["IdempotentActivationService","attemptActivation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService attemptActivation should return true when already activated","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when already activated"},{"ancestorTitles":["IdempotentActivationService","_performActivationTransaction"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService _performActivationTransaction should handle successful transaction","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle successful transaction"},{"ancestorTitles":["IdempotentActivationService","_performActivationTransaction"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService _performActivationTransaction should handle concurrent activation in transaction","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle concurrent activation in transaction"},{"ancestorTitles":["IdempotentActivationService","_performActivationTransaction"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService _performActivationTransaction should handle transaction failure","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle transaction failure"},{"ancestorTitles":["IdempotentActivationService","_performActivationTransaction"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService _performActivationTransaction should handle RPC errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle RPC errors"},{"ancestorTitles":["IdempotentActivationService","_performActivationTransaction"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"IdempotentActivationService _performActivationTransaction should handle unexpected errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle unexpected errors"}],"endTime":1752737027052,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/cup/__tests__/idempotentActivationService.test.ts","startTime":1752737026823,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CupActivationDetectionService","detectAndActivateCup"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService detectAndActivateCup should successfully activate cup when conditions are met","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should successfully activate cup when conditions are met"},{"ancestorTitles":["CupActivationDetectionService","detectAndActivateCup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService detectAndActivateCup should skip activation when cup is already activated","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should skip activation when cup is already activated"},{"ancestorTitles":["CupActivationDetectionService","detectAndActivateCup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService detectAndActivateCup should skip activation when conditions are not met","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should skip activation when conditions are not met"},{"ancestorTitles":["CupActivationDetectionService","detectAndActivateCup"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService detectAndActivateCup should handle fixture data service failure","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle fixture data service failure"},{"ancestorTitles":["CupActivationDetectionService","detectAndActivateCup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService detectAndActivateCup should handle activation condition calculator failure","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle activation condition calculator failure"},{"ancestorTitles":["CupActivationDetectionService","detectAndActivateCup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService detectAndActivateCup should handle status checker failure","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle status checker failure"},{"ancestorTitles":["CupActivationDetectionService","detectAndActivateCup"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService detectAndActivateCup should handle activation service failure","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle activation service failure"},{"ancestorTitles":["CupActivationDetectionService","detectAndActivateCup"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService detectAndActivateCup should handle successful activation but service returns failure","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle successful activation but service returns failure"},{"ancestorTitles":["CupActivationDetectionService","detectAndActivateCup"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService detectAndActivateCup should handle race condition (was already activated during process)","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle race condition (was already activated during process)"},{"ancestorTitles":["CupActivationDetectionService","detectAndActivateCup"],"duration":108,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService detectAndActivateCup should include proper metadata in result","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should include proper metadata in result"},{"ancestorTitles":["CupActivationDetectionService","shouldActivateCup"],"duration":165,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService shouldActivateCup should return true when conditions are met","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when conditions are met"},{"ancestorTitles":["CupActivationDetectionService","shouldActivateCup"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService shouldActivateCup should return false when conditions are not met","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when conditions are not met"},{"ancestorTitles":["CupActivationDetectionService","checkActivationConditions"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService checkActivationConditions should return conditions without attempting activation","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return conditions without attempting activation"},{"ancestorTitles":["CupActivationDetectionService","checkActivationConditions"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService checkActivationConditions should handle errors in check-only mode","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle errors in check-only mode"},{"ancestorTitles":["CupActivationDetectionService","Custom threshold"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService Custom threshold should use custom threshold when provided","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should use custom threshold when provided"},{"ancestorTitles":["CupActivationDetectionService","Convenience Functions"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService Convenience Functions should use singleton service for convenience functions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should use singleton service for convenience functions"},{"ancestorTitles":["CupActivationDetectionService","Logging Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService Logging Integration should call all logging methods during successful flow","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should call all logging methods during successful flow"},{"ancestorTitles":["CupActivationDetectionService","Logging Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationDetectionService Logging Integration should log errors appropriately","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log errors appropriately"}],"endTime":1752737027458,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/cup/__tests__/cupActivationDetectionService.test.ts","startTime":1752737026916,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Successful requests"],"duration":302,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Successful requests should return season winner data for valid season ID","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return season winner data for valid season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Successful requests"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Successful requests should handle string season ID correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle string season ID correctly"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Successful requests"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Successful requests should return correct data structure","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return correct data structure"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Error handling should return 400 for invalid season ID","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 for invalid season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Error handling"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Error handling should return 400 for negative season ID","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 for negative season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Error handling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Error handling should return 400 for zero season ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for zero season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Error handling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Error handling should return 404 when season winner not found","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 404 when season winner not found"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Error handling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Error handling should handle database errors","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle database errors"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Error handling"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Error handling should handle unexpected errors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle unexpected errors"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Edge cases"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Edge cases should handle very large season IDs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle very large season IDs"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Edge cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Edge cases should handle floating point season IDs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle floating point season IDs"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Edge cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Edge cases should handle empty season ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Logging"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Logging should log successful requests","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should log successful requests"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Logging"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Logging should log failed requests","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log failed requests"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Database query structure"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Database query structure should use correct select query with all required joins","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should use correct select query with all required joins"}],"endTime":1752737027522,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/hall-of-fame/season/[id]/route.test.ts","startTime":1752737026970,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["roundManagementService","defineAndOpenNextBettingRound"],"duration":37,"failureDetails":[],"failureMessages":[],"fullName":"roundManagementService defineAndOpenNextBettingRound should exist as a function on the service","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should exist as a function on the service"},{"ancestorTitles":["roundManagementService","defineAndOpenNextBettingRound"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"roundManagementService defineAndOpenNextBettingRound should check for existing open rounds before proceeding","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"todo","title":"should check for existing open rounds before proceeding"},{"ancestorTitles":["roundManagementService","groupFixturesForRound"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"roundManagementService groupFixturesForRound should group fixtures before the first gap > 72 hours","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should group fixtures before the first gap > 72 hours"},{"ancestorTitles":["roundManagementService","groupFixturesForRound"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"roundManagementService groupFixturesForRound should return all fixtures if no gap exceeds the threshold","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return all fixtures if no gap exceeds the threshold"},{"ancestorTitles":["roundManagementService","groupFixturesForRound"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"roundManagementService groupFixturesForRound should return a valid group for a single fixture","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return a valid group for a single fixture"},{"ancestorTitles":["roundManagementService","groupFixturesForRound"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"roundManagementService groupFixturesForRound should return null if the input array is empty","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if the input array is empty"}],"endTime":1752737027635,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/roundManagementService.test.ts","startTime":1752737027071,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["EmailSchedulerService","checkAndScheduleEmails"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService checkAndScheduleEmails should check both summary and reminder emails successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should check both summary and reminder emails successfully"},{"ancestorTitles":["EmailSchedulerService","checkAndScheduleEmails"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService checkAndScheduleEmails should handle errors gracefully and return error results","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle errors gracefully and return error results"},{"ancestorTitles":["EmailSchedulerService","checkForSummaryEmails"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService checkForSummaryEmails should process newly completed rounds and trigger summary emails","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should process newly completed rounds and trigger summary emails"},{"ancestorTitles":["EmailSchedulerService","checkForSummaryEmails"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService checkForSummaryEmails should handle no completed rounds gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle no completed rounds gracefully"},{"ancestorTitles":["EmailSchedulerService","checkForSummaryEmails"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService checkForSummaryEmails should continue processing other rounds if one fails","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should continue processing other rounds if one fails"},{"ancestorTitles":["EmailSchedulerService","checkForReminderEmails"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService checkForReminderEmails should process rounds due for reminder emails","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should process rounds due for reminder emails"},{"ancestorTitles":["EmailSchedulerService","checkForReminderEmails"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService checkForReminderEmails should skip rounds where reminder was already sent","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should skip rounds where reminder was already sent"},{"ancestorTitles":["EmailSchedulerService","checkForReminderEmails"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService checkForReminderEmails should not process rounds that are not due for reminders yet","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not process rounds that are not due for reminders yet"},{"ancestorTitles":["EmailSchedulerService","getOpenRoundTimings"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService getOpenRoundTimings should calculate correct timing information for open rounds","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should calculate correct timing information for open rounds"},{"ancestorTitles":["EmailSchedulerService","getOpenRoundTimings"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService getOpenRoundTimings should return empty array when no open rounds exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array when no open rounds exist"},{"ancestorTitles":["EmailSchedulerService","getOpenRoundTimings"],"duration":33,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService getOpenRoundTimings should handle database errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database errors gracefully"},{"ancestorTitles":["EmailSchedulerService","triggerSummaryEmail"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService triggerSummaryEmail should successfully trigger summary email API","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should successfully trigger summary email API"},{"ancestorTitles":["EmailSchedulerService","triggerSummaryEmail"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService triggerSummaryEmail should handle API failures gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle API failures gracefully"},{"ancestorTitles":["EmailSchedulerService","triggerSummaryEmail"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService triggerSummaryEmail should respect EMAIL_TEST_MODE environment variable","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should respect EMAIL_TEST_MODE environment variable"},{"ancestorTitles":["EmailSchedulerService","triggerReminderEmail"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService triggerReminderEmail should successfully trigger reminder email API","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should successfully trigger reminder email API"},{"ancestorTitles":["EmailSchedulerService","triggerReminderEmail"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService triggerReminderEmail should handle network errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle network errors gracefully"},{"ancestorTitles":["EmailSchedulerService","wasReminderAlreadySent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService wasReminderAlreadySent should return true when reminder was already sent","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when reminder was already sent"},{"ancestorTitles":["EmailSchedulerService","wasReminderAlreadySent"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService wasReminderAlreadySent should return false when reminder was not sent yet","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when reminder was not sent yet"},{"ancestorTitles":["EmailSchedulerService","wasReminderAlreadySent"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService wasReminderAlreadySent should return false on database errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false on database errors"},{"ancestorTitles":["EmailSchedulerService","markReminderAsSent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService markReminderAsSent should successfully mark reminder as sent","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should successfully mark reminder as sent"},{"ancestorTitles":["EmailSchedulerService","markReminderAsSent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService markReminderAsSent should throw error on database update failure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error on database update failure"},{"ancestorTitles":["EmailSchedulerService","getUpcomingEmailSchedule"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmailSchedulerService getUpcomingEmailSchedule should return upcoming email events only","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return upcoming email events only"},{"ancestorTitles":["Module exports"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Module exports should export emailSchedulerService singleton","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should export emailSchedulerService singleton"},{"ancestorTitles":["Module exports"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Module exports should export runEmailSchedulingCheck function","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should export runEmailSchedulingCheck function"}],"endTime":1752737027715,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/emailScheduler.test.ts","startTime":1752737027090,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SelectionsSchema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SelectionsSchema should validate valid selections","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate valid selections"},{"ancestorTitles":["SelectionsSchema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SelectionsSchema should reject invalid selection values","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject invalid selection values"},{"ancestorTitles":["createSelectionsValidator"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"createSelectionsValidator should validate when all matches have selections","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate when all matches have selections"},{"ancestorTitles":["createSelectionsValidator"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"createSelectionsValidator should invalidate when matches are missing selections","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should invalidate when matches are missing selections"},{"ancestorTitles":["createSelectionsValidator"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createSelectionsValidator should invalidate when selections are null","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should invalidate when selections are null"},{"ancestorTitles":["validateCoupon"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"validateCoupon should validate when all matches have valid selections","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate when all matches have valid selections"},{"ancestorTitles":["validateCoupon"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"validateCoupon should invalidate when selections have invalid structure","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should invalidate when selections have invalid structure"},{"ancestorTitles":["validateCoupon"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"validateCoupon should invalidate when matches are missing selections","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should invalidate when matches are missing selections"},{"ancestorTitles":["validateCoupon"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"validateCoupon should handle selections with extra matches not in the match list","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle selections with extra matches not in the match list"}],"endTime":1752737027758,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/schemas/__tests__/bettingCouponSchema.test.ts","startTime":1752737027483,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/cron/winner-determination","Authentication"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Authentication should reject requests without CRON_SECRET environment variable","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject requests without CRON_SECRET environment variable"},{"ancestorTitles":["/api/cron/winner-determination","Authentication"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Authentication should reject requests without CRON_SECRET","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject requests without CRON_SECRET"},{"ancestorTitles":["/api/cron/winner-determination","Authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Authentication should reject requests with invalid CRON_SECRET","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject requests with invalid CRON_SECRET"},{"ancestorTitles":["/api/cron/winner-determination","Authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Authentication should accept requests with valid Bearer token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept requests with valid Bearer token"},{"ancestorTitles":["/api/cron/winner-determination","Authentication"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Authentication should accept requests with valid X-Cron-Secret header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept requests with valid X-Cron-Secret header"},{"ancestorTitles":["/api/cron/winner-determination","Winner determination processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Winner determination processing should handle successful processing with no seasons to process","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle successful processing with no seasons to process"},{"ancestorTitles":["/api/cron/winner-determination","Winner determination processing"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Winner determination processing should handle successful processing with new winners determined","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle successful processing with new winners determined"},{"ancestorTitles":["/api/cron/winner-determination","Winner determination processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Winner determination processing should handle processing with already determined seasons","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle processing with already determined seasons"},{"ancestorTitles":["/api/cron/winner-determination","Winner determination processing"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Winner determination processing should handle processing with some errors but still succeed","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle processing with some errors but still succeed"},{"ancestorTitles":["/api/cron/winner-determination","Winner determination processing"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Winner determination processing should handle processing with only errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle processing with only errors"},{"ancestorTitles":["/api/cron/winner-determination","Winner determination processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Winner determination processing should handle service throwing an error","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle service throwing an error"},{"ancestorTitles":["/api/cron/winner-determination","Winner determination processing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Winner determination processing should handle cache revalidation errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle cache revalidation errors gracefully"},{"ancestorTitles":["/api/cron/winner-determination","Response format"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Response format should include all required fields in successful response","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include all required fields in successful response"},{"ancestorTitles":["/api/cron/winner-determination","Response format"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Response format should include all required fields in error response","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include all required fields in error response"},{"ancestorTitles":["/api/cron/winner-determination","Response format"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Response format should only include detailed_errors when there are errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should only include detailed_errors when there are errors"}],"endTime":1752737027817,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/cron/winner-determination/route.test.ts","startTime":1752737027605,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Combobox Reducer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Reducer should return the initial state","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the initial state"},{"ancestorTitles":["Combobox Reducer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Reducer should handle SET_SELECTION","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle SET_SELECTION"},{"ancestorTitles":["Combobox Reducer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Reducer should handle CLEAR_SELECTION","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle CLEAR_SELECTION"},{"ancestorTitles":["Combobox Reducer"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Reducer should handle SET_OPEN_STATE","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle SET_OPEN_STATE"},{"ancestorTitles":["Combobox Reducer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Reducer should handle SET_SEARCH_TERM","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle SET_SEARCH_TERM"},{"ancestorTitles":["Combobox Reducer"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Combobox Reducer should handle RESET","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle RESET"},{"ancestorTitles":["useComboboxState hook"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"useComboboxState hook should initialize with default values","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize with default values"},{"ancestorTitles":["useComboboxState hook"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"useComboboxState hook should initialize with provided initial value","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize with provided initial value"},{"ancestorTitles":["useComboboxState hook"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"useComboboxState hook should update selection and call onChange","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update selection and call onChange"},{"ancestorTitles":["useComboboxState hook"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"useComboboxState hook should clear selection and call onChange with null","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should clear selection and call onChange with null"},{"ancestorTitles":["useComboboxState hook"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"useComboboxState hook should update open state","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update open state"},{"ancestorTitles":["useComboboxState hook"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"useComboboxState hook should update search term","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update search term"},{"ancestorTitles":["useComboboxState hook"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"useComboboxState hook should reset state","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reset state"}],"endTime":1752737027893,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/combobox-state.test.ts","startTime":1752737027744,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Fixture Synchronization Logic"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Fixture Synchronization Logic Scenario 1: should not update when API and DB data match","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"Scenario 1: should not update when API and DB data match"},{"ancestorTitles":["Fixture Synchronization Logic"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Fixture Synchronization Logic Scenario 2: should update fixture when status changes","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"Scenario 2: should update fixture when status changes"},{"ancestorTitles":["Fixture Synchronization Logic"],"duration":58,"failureDetails":[],"failureMessages":[],"fullName":"Fixture Synchronization Logic Scenario 7: should return success:false when DB select fails","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"Scenario 7: should return success:false when DB select fails"},{"ancestorTitles":["Fixture Synchronization Logic"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Fixture Synchronization Logic Scenario 8: should return success:false when DB upsert fails","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"Scenario 8: should return success:false when DB upsert fails"}],"endTime":1752737028007,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/sync/__tests__/syncFixtures.test.ts","startTime":1752737027742,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["FixtureDataService","getTeamRemainingGames"],"duration":55,"failureDetails":[],"failureMessages":[],"fullName":"FixtureDataService getTeamRemainingGames should return empty result when no current season exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty result when no current season exists"},{"ancestorTitles":["FixtureDataService","getTeamRemainingGames"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FixtureDataService getTeamRemainingGames should return empty result when no fixtures exist for current season","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty result when no fixtures exist for current season"},{"ancestorTitles":["FixtureDataService","getTeamRemainingGames"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"FixtureDataService getTeamRemainingGames should correctly count remaining games for teams with various scenarios","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"should correctly count remaining games for teams with various scenarios"},{"ancestorTitles":["FixtureDataService","getTeamRemainingGames"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FixtureDataService getTeamRemainingGames should handle fixtures with array-style team data","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle fixtures with array-style team data"},{"ancestorTitles":["FixtureDataService","getTeamRemainingGames"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"FixtureDataService getTeamRemainingGames should handle database errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database errors gracefully"},{"ancestorTitles":["FixtureDataService","getTeamRemainingGames"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"FixtureDataService getTeamRemainingGames should correctly filter out completed fixtures","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should correctly filter out completed fixtures"},{"ancestorTitles":["FixtureDataService","getTeamsSummary"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FixtureDataService getTeamsSummary should return teams array from getTeamRemainingGames","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return teams array from getTeamRemainingGames"}],"endTime":1752737028019,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/cup/__tests__/fixtureDataService.test.ts","startTime":1752737027818,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","ExactMatchStrategy","Single Valid Answer Scenarios"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic ExactMatchStrategy Single Valid Answer Scenarios should match when user prediction equals single valid answer","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should match when user prediction equals single valid answer"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","ExactMatchStrategy","Single Valid Answer Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic ExactMatchStrategy Single Valid Answer Scenarios should not match when user prediction differs from single valid answer","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should not match when user prediction differs from single valid answer"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","ExactMatchStrategy","Multiple Valid Answers Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic ExactMatchStrategy Multiple Valid Answers Scenarios should match when user prediction equals one of multiple valid answers","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should match when user prediction equals one of multiple valid answers"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","ExactMatchStrategy","Multiple Valid Answers Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic ExactMatchStrategy Multiple Valid Answers Scenarios should not match when user prediction is not in multiple valid answers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should not match when user prediction is not in multiple valid answers"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","ExactMatchStrategy","Multiple Valid Answers Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic ExactMatchStrategy Multiple Valid Answers Scenarios should handle edge case of empty valid answers array","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle edge case of empty valid answers array"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","ExactMatchStrategy","Real Football Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic ExactMatchStrategy Real Football Scenarios should handle league winner comparison (single answer)","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle league winner comparison (single answer)"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","ExactMatchStrategy","Real Football Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic ExactMatchStrategy Real Football Scenarios should handle last place comparison (single answer)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle last place comparison (single answer)"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","TopScorerStrategy"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic TopScorerStrategy should extend ExactMatchStrategy functionality","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extend ExactMatchStrategy functionality"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","TopScorerStrategy","Single Top Scorer Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic TopScorerStrategy Single Top Scorer Scenarios should match single top scorer correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should match single top scorer correctly"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","TopScorerStrategy","Multiple Tied Top Scorers Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic TopScorerStrategy Multiple Tied Top Scorers Scenarios should handle two players tied for top scorer","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle two players tied for top scorer"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","TopScorerStrategy","Multiple Tied Top Scorers Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic TopScorerStrategy Multiple Tied Top Scorers Scenarios should handle three players tied for top scorer","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle three players tied for top scorer"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","TopScorerStrategy","Multiple Tied Top Scorers Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic TopScorerStrategy Multiple Tied Top Scorers Scenarios should not match when user predicted player not in tied group","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not match when user predicted player not in tied group"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","TopScorerStrategy","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic TopScorerStrategy Edge Cases should not log tie detection for single player (no tie)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not log tie detection for single player (no tie)"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","GoalDifferenceStrategy"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic GoalDifferenceStrategy should extend ExactMatchStrategy functionality","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extend ExactMatchStrategy functionality"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","GoalDifferenceStrategy","Single Best Goal Difference Team Scenarios"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic GoalDifferenceStrategy Single Best Goal Difference Team Scenarios should match single best goal difference team correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should match single best goal difference team correctly"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","GoalDifferenceStrategy","Multiple Tied Goal Difference Teams Scenarios"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic GoalDifferenceStrategy Multiple Tied Goal Difference Teams Scenarios should handle two teams tied for best goal difference","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle two teams tied for best goal difference"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","GoalDifferenceStrategy","Multiple Tied Goal Difference Teams Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic GoalDifferenceStrategy Multiple Tied Goal Difference Teams Scenarios should handle multiple teams tied for best goal difference","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle multiple teams tied for best goal difference"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","GoalDifferenceStrategy","Multiple Tied Goal Difference Teams Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic GoalDifferenceStrategy Multiple Tied Goal Difference Teams Scenarios should not match when user predicted team not in tied group","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not match when user predicted team not in tied group"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","Performance Testing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic Performance Testing should handle large arrays efficiently","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle large arrays efficiently"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","Performance Testing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic Performance Testing should perform early return optimization","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should perform early return optimization"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","Strategy Interface Compliance","ExactMatchStrategy Interface Compliance"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic Strategy Interface Compliance ExactMatchStrategy Interface Compliance should implement AnswerComparisonStrategy interface correctly","invocations":1,"location":null,"numPassingAsserts":12,"retryReasons":[],"status":"passed","title":"should implement AnswerComparisonStrategy interface correctly"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","Strategy Interface Compliance","TopScorerStrategy Interface Compliance"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic Strategy Interface Compliance TopScorerStrategy Interface Compliance should implement AnswerComparisonStrategy interface correctly","invocations":1,"location":null,"numPassingAsserts":12,"retryReasons":[],"status":"passed","title":"should implement AnswerComparisonStrategy interface correctly"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","Strategy Interface Compliance","GoalDifferenceStrategy Interface Compliance"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic Strategy Interface Compliance GoalDifferenceStrategy Interface Compliance should implement AnswerComparisonStrategy interface correctly","invocations":1,"location":null,"numPassingAsserts":12,"retryReasons":[],"status":"passed","title":"should implement AnswerComparisonStrategy interface correctly"},{"ancestorTitles":["DynamicPointsCalculator - Refactored Core Comparison Logic","Basic Logging Verification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Refactored Core Comparison Logic Basic Logging Verification should produce debug output for comparison operations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should produce debug output for comparison operations"}],"endTime":1752737028033,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/dynamicPointsCalculator-comparison.test.ts","startTime":1752737027846,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["GET /api/fixtures"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/fixtures should return 200 OK with fixtures on valid request","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 200 OK with fixtures on valid request"},{"ancestorTitles":["GET /api/fixtures"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/fixtures should return 400 Bad Request if league parameter is missing","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if league parameter is missing"},{"ancestorTitles":["GET /api/fixtures"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/fixtures should return 400 Bad Request if season parameter is missing","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if season parameter is missing"},{"ancestorTitles":["GET /api/fixtures"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/fixtures should return 400 Bad Request if round parameter is missing","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if round parameter is missing"},{"ancestorTitles":["GET /api/fixtures"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/fixtures should return 500 Internal Server Error if database query fails","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 500 Internal Server Error if database query fails"},{"ancestorTitles":["GET /api/fixtures"],"duration":70,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/fixtures should return 200 OK with an empty array if no fixtures are found","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 200 OK with an empty array if no fixtures are found"}],"endTime":1752737028234,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/fixtures/route.test.ts","startTime":1752737027923,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Cron Schedule Utilities","validateCronSchedule"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities validateCronSchedule should validate correct cron schedules","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should validate correct cron schedules"},{"ancestorTitles":["Cron Schedule Utilities","validateCronSchedule"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities validateCronSchedule should reject invalid cron schedules","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"should reject invalid cron schedules"},{"ancestorTitles":["Cron Schedule Utilities","validateCronSchedule"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities validateCronSchedule should handle null and undefined inputs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle null and undefined inputs"},{"ancestorTitles":["Cron Schedule Utilities","validateTimezone"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities validateTimezone should validate supported timezones","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should validate supported timezones"},{"ancestorTitles":["Cron Schedule Utilities","validateTimezone"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities validateTimezone should reject unsupported timezones","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should reject unsupported timezones"},{"ancestorTitles":["Cron Schedule Utilities","getCronConfiguration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities getCronConfiguration should return default configuration","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return default configuration"},{"ancestorTitles":["Cron Schedule Utilities","getCronConfiguration"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities getCronConfiguration should use environment variables when set","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should use environment variables when set"},{"ancestorTitles":["Cron Schedule Utilities","getCronConfiguration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities getCronConfiguration should fallback to UTC for invalid timezone","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fallback to UTC for invalid timezone"},{"ancestorTitles":["Cron Schedule Utilities","validateCronConfiguration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities validateCronConfiguration should validate correct configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate correct configuration"},{"ancestorTitles":["Cron Schedule Utilities","validateCronConfiguration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities validateCronConfiguration should detect invalid schedules","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect invalid schedules"},{"ancestorTitles":["Cron Schedule Utilities","validateCronConfiguration"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities validateCronConfiguration should detect invalid timezones","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect invalid timezones"},{"ancestorTitles":["Cron Schedule Utilities","validateCronConfiguration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities validateCronConfiguration should warn about schedule conflicts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should warn about schedule conflicts"},{"ancestorTitles":["Cron Schedule Utilities","validateCronConfiguration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities validateCronConfiguration should warn about disabled jobs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should warn about disabled jobs"},{"ancestorTitles":["Cron Schedule Utilities","describeCronSchedule"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities describeCronSchedule should describe common schedules","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should describe common schedules"},{"ancestorTitles":["Cron Schedule Utilities","describeCronSchedule"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities describeCronSchedule should describe custom schedules","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should describe custom schedules"},{"ancestorTitles":["Cron Schedule Utilities","describeCronSchedule"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities describeCronSchedule should handle invalid schedules","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle invalid schedules"},{"ancestorTitles":["Cron Schedule Utilities","getNextExecutionTime"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities getNextExecutionTime should calculate next Sunday execution for weekly schedule","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate next Sunday execution for weekly schedule"},{"ancestorTitles":["Cron Schedule Utilities","getNextExecutionTime"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities getNextExecutionTime should calculate next daily execution","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate next daily execution"},{"ancestorTitles":["Cron Schedule Utilities","getNextExecutionTime"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities getNextExecutionTime should handle edge case when execution time has passed today","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle edge case when execution time has passed today"},{"ancestorTitles":["Cron Schedule Utilities","checkDaylightSavingTime"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities checkDaylightSavingTime should detect DST timezones","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect DST timezones"},{"ancestorTitles":["Cron Schedule Utilities","checkDaylightSavingTime"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities checkDaylightSavingTime should detect non-DST timezones","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect non-DST timezones"},{"ancestorTitles":["Cron Schedule Utilities","checkDaylightSavingTime"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities checkDaylightSavingTime should handle all supported timezones","invocations":1,"location":null,"numPassingAsserts":17,"retryReasons":[],"status":"passed","title":"should handle all supported timezones"},{"ancestorTitles":["Cron Schedule Utilities","DEFAULT_SCHEDULES"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities DEFAULT_SCHEDULES should have valid default schedules","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should have valid default schedules"},{"ancestorTitles":["Cron Schedule Utilities","DEFAULT_SCHEDULES"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities DEFAULT_SCHEDULES should use environment variables when available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use environment variables when available"},{"ancestorTitles":["Cron Schedule Utilities","Integration tests"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities Integration tests should handle complete configuration lifecycle","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle complete configuration lifecycle"},{"ancestorTitles":["Cron Schedule Utilities","Integration tests"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Cron Schedule Utilities Integration tests should handle error scenarios gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle error scenarios gracefully"}],"endTime":1752737028320,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/utils/cron/schedule.test.ts","startTime":1752737028133,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["useLocalStorage"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"useLocalStorage should return initial value when localStorage is empty","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return initial value when localStorage is empty"},{"ancestorTitles":["useLocalStorage"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"useLocalStorage should return stored value from localStorage","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return stored value from localStorage"},{"ancestorTitles":["useLocalStorage"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"useLocalStorage should update localStorage when value changes","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update localStorage when value changes"},{"ancestorTitles":["useLocalStorage"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"useLocalStorage should support functional updates","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should support functional updates"},{"ancestorTitles":["useLocalStorage"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"useLocalStorage should remove value from localStorage","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should remove value from localStorage"},{"ancestorTitles":["useLocalStorage"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"useLocalStorage should handle localStorage errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle localStorage errors gracefully"},{"ancestorTitles":["useLocalStorage"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"useLocalStorage should handle SSR (window undefined)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle SSR (window undefined)"},{"ancestorTitles":["useLocalStorage"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"useLocalStorage should handle corrupted localStorage data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle corrupted localStorage data"},{"ancestorTitles":["useBettingFormStorage"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"useBettingFormStorage should initialize with default values","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with default values"},{"ancestorTitles":["useBettingFormStorage"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"useBettingFormStorage should update selections and store in localStorage","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update selections and store in localStorage"},{"ancestorTitles":["useBettingFormStorage"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"useBettingFormStorage should update predictions and store in localStorage","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update predictions and store in localStorage"},{"ancestorTitles":["useBettingFormStorage"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"useBettingFormStorage should clear all form data","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should clear all form data"},{"ancestorTitles":["useBettingFormStorage"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"useBettingFormStorage should restore data from localStorage on initialization","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should restore data from localStorage on initialization"}],"endTime":1752737028390,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/hooks/__tests__/useLocalStorage.test.ts","startTime":1752737028216,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeNumericAnswer","Valid Numbers"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeNumericAnswer Valid Numbers should normalize valid positive integers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should normalize valid positive integers"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeNumericAnswer","Valid Numbers"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeNumericAnswer Valid Numbers should normalize positive decimal numbers to integers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should normalize positive decimal numbers to integers"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeNumericAnswer","Valid Numbers"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeNumericAnswer Valid Numbers should convert negative numbers to positive integers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should convert negative numbers to positive integers"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeNumericAnswer","String Numbers"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeNumericAnswer String Numbers should convert valid string numbers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should convert valid string numbers"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeNumericAnswer","String Numbers"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeNumericAnswer String Numbers should handle string edge cases","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle string edge cases"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeNumericAnswer","Invalid Values"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeNumericAnswer Invalid Values should return null for null/undefined","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null for null/undefined"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeNumericAnswer","Invalid Values"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeNumericAnswer Invalid Values should return null for NaN and infinity","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return null for NaN and infinity"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeNumericAnswer","Invalid Values"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeNumericAnswer Invalid Values should return null for invalid types","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return null for invalid types"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeNumericAnswer","Invalid Values"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeNumericAnswer Invalid Values should return null for numbers outside valid range","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return null for numbers outside valid range"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeUserPrediction"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeUserPrediction should normalize valid user predictions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should normalize valid user predictions"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeUserPrediction"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeUserPrediction should warn and return null for invalid predictions","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should warn and return null for invalid predictions"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeValidAnswersArray"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeValidAnswersArray should normalize arrays of valid numbers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should normalize arrays of valid numbers"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeValidAnswersArray"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeValidAnswersArray should filter out invalid values","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter out invalid values"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeValidAnswersArray"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeValidAnswersArray should remove duplicates","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should remove duplicates"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeValidAnswersArray"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeValidAnswersArray should handle empty arrays","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty arrays"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeValidAnswersArray"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeValidAnswersArray should warn and return empty array for non-arrays","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should warn and return empty array for non-arrays"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeValidAnswersArray"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeValidAnswersArray should warn about invalid values in arrays","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should warn about invalid values in arrays"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","convertLegacyAnswerToArray"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities convertLegacyAnswerToArray should convert valid legacy answers to arrays","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should convert valid legacy answers to arrays"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","convertLegacyAnswerToArray"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities convertLegacyAnswerToArray should return empty array for invalid legacy answers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return empty array for invalid legacy answers"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeAnswer"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeAnswer should handle single values (legacy format)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle single values (legacy format)"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeAnswer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeAnswer should handle arrays (new format)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle arrays (new format)"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeAnswer"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeAnswer should handle null/undefined","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle null/undefined"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeAnswer"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeAnswer should filter invalid values from arrays","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter invalid values from arrays"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","normalizeAnswer"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities normalizeAnswer should handle invalid single values","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle invalid single values"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","doesNormalizedUserPredictionMatch","Single Valid Answer (Legacy Format)"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities doesNormalizedUserPredictionMatch Single Valid Answer (Legacy Format) should match valid single answers","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should match valid single answers"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","doesNormalizedUserPredictionMatch","Single Valid Answer (Legacy Format)"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities doesNormalizedUserPredictionMatch Single Valid Answer (Legacy Format) should not match different single answers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not match different single answers"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","doesNormalizedUserPredictionMatch","Multiple Valid Answers (New Format)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities doesNormalizedUserPredictionMatch Multiple Valid Answers (New Format) should match when user prediction is in the array","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should match when user prediction is in the array"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","doesNormalizedUserPredictionMatch","Multiple Valid Answers (New Format)"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities doesNormalizedUserPredictionMatch Multiple Valid Answers (New Format) should not match when user prediction is not in the array","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not match when user prediction is not in the array"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","doesNormalizedUserPredictionMatch","Edge Cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities doesNormalizedUserPredictionMatch Edge Cases should return false for invalid user predictions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return false for invalid user predictions"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","doesNormalizedUserPredictionMatch","Edge Cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities doesNormalizedUserPredictionMatch Edge Cases should return false for empty valid answers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return false for empty valid answers"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","doesNormalizedUserPredictionMatch","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities doesNormalizedUserPredictionMatch Edge Cases should return false when valid answers array contains only invalid values","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when valid answers array contains only invalid values"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","doesNormalizedUserPredictionMatch","Edge Cases"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities doesNormalizedUserPredictionMatch Edge Cases should handle mixed valid/invalid arrays correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle mixed valid/invalid arrays correctly"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","doesNormalizedUserPredictionMatch","Real Football Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities doesNormalizedUserPredictionMatch Real Football Scenarios should handle top scorer ties","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle top scorer ties"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","doesNormalizedUserPredictionMatch","Real Football Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities doesNormalizedUserPredictionMatch Real Football Scenarios should handle best goal difference ties","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle best goal difference ties"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","doesNormalizedUserPredictionMatch","Real Football Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities doesNormalizedUserPredictionMatch Real Football Scenarios should maintain backward compatibility with single answers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should maintain backward compatibility with single answers"},{"ancestorTitles":["DynamicPointsCalculator - Answer Normalization Utilities","doesNormalizedUserPredictionMatch","Performance with Large Datasets"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Answer Normalization Utilities doesNormalizedUserPredictionMatch Performance with Large Datasets should handle large arrays efficiently","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle large arrays efficiently"}],"endTime":1752737028396,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/dynamicPointsCalculator-normalization.test.ts","startTime":1752737028205,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Resend Email Service","validateEmail"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service validateEmail should validate correct email formats","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate correct email formats"},{"ancestorTitles":["Resend Email Service","validateEmail"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service validateEmail should reject invalid email formats","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should reject invalid email formats"},{"ancestorTitles":["Resend Email Service","validateEmailOptions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service validateEmailOptions should validate correct email options","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate correct email options"},{"ancestorTitles":["Resend Email Service","validateEmailOptions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service validateEmailOptions should reject invalid to email","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject invalid to email"},{"ancestorTitles":["Resend Email Service","validateEmailOptions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service validateEmailOptions should reject invalid from email","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject invalid from email"},{"ancestorTitles":["Resend Email Service","validateEmailOptions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service validateEmailOptions should reject empty subject","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject empty subject"},{"ancestorTitles":["Resend Email Service","validateEmailOptions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service validateEmailOptions should reject missing content","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject missing content"},{"ancestorTitles":["Resend Email Service","validateEmailOptions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service validateEmailOptions should validate multiple recipients","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate multiple recipients"},{"ancestorTitles":["Resend Email Service","validateEmailOptions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service validateEmailOptions should reject invalid CC emails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject invalid CC emails"},{"ancestorTitles":["Resend Email Service","sendEmail"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service sendEmail should send email successfully in test mode","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should send email successfully in test mode"},{"ancestorTitles":["Resend Email Service","sendEmail"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service sendEmail should reject invalid email options","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should reject invalid email options"},{"ancestorTitles":["Resend Email Service","sendEmail"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service sendEmail should handle Resend API success in production mode","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle Resend API success in production mode"},{"ancestorTitles":["Resend Email Service","sendEmail"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service sendEmail should handle Resend API error in production mode","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle Resend API error in production mode"},{"ancestorTitles":["Resend Email Service","sendEmail"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service sendEmail should handle network errors in production mode","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle network errors in production mode"},{"ancestorTitles":["Resend Email Service","sendSimpleEmail"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service sendSimpleEmail should send simple email with default from address","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should send simple email with default from address"},{"ancestorTitles":["Resend Email Service","sendSimpleEmail"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service sendSimpleEmail should send simple email with custom from address","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should send simple email with custom from address"},{"ancestorTitles":["Resend Email Service","sendSimpleEmail"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service sendSimpleEmail should handle multiple recipients","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle multiple recipients"},{"ancestorTitles":["Resend Email Service","testEmailConnection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service testEmailConnection should test connection with default email","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should test connection with default email"},{"ancestorTitles":["Resend Email Service","testEmailConnection"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service testEmailConnection should test connection with custom email","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should test connection with custom email"},{"ancestorTitles":["Resend Email Service","getEmailServiceStatus"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service getEmailServiceStatus should return status with test mode enabled","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return status with test mode enabled"},{"ancestorTitles":["Resend Email Service","getEmailServiceStatus"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Resend Email Service getEmailServiceStatus should return correct service status structure","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return correct service status structure"}],"endTime":1752737028483,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/resend.test.ts","startTime":1752737028263,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/cron/cup-activation","Authentication"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Authentication should reject requests without CRON_SECRET environment variable","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should reject requests without CRON_SECRET environment variable"},{"ancestorTitles":["/api/cron/cup-activation","Authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Authentication should reject requests without authorization","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should reject requests without authorization"},{"ancestorTitles":["/api/cron/cup-activation","Authentication"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Authentication should reject requests with invalid authorization header","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should reject requests with invalid authorization header"},{"ancestorTitles":["/api/cron/cup-activation","Authentication"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Authentication should accept requests with valid authorization header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept requests with valid authorization header"},{"ancestorTitles":["/api/cron/cup-activation","Authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Authentication should accept requests with valid x-cron-secret header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept requests with valid x-cron-secret header"},{"ancestorTitles":["/api/cron/cup-activation","Successful execution"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Successful execution should handle successful detection with no activation needed","invocations":1,"location":null,"numPassingAsserts":13,"retryReasons":[],"status":"passed","title":"should handle successful detection with no activation needed"},{"ancestorTitles":["/api/cron/cup-activation","Successful execution"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Successful execution should handle successful detection with cup activation","invocations":1,"location":null,"numPassingAsserts":11,"retryReasons":[],"status":"passed","title":"should handle successful detection with cup activation"},{"ancestorTitles":["/api/cron/cup-activation","Successful execution"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Successful execution should handle cache revalidation errors gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle cache revalidation errors gracefully"},{"ancestorTitles":["/api/cron/cup-activation","Error handling"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Error handling should handle detection service failures","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should handle detection service failures"},{"ancestorTitles":["/api/cron/cup-activation","Error handling"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Error handling should handle critical exceptions","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle critical exceptions"},{"ancestorTitles":["/api/cron/cup-activation","Performance and monitoring"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Performance and monitoring should track performance metrics","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should track performance metrics"},{"ancestorTitles":["/api/cron/cup-activation","Performance and monitoring"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Performance and monitoring should start and complete cron execution tracking","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should start and complete cron execution tracking"},{"ancestorTitles":["/api/cron/cup-activation","Performance and monitoring"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Performance and monitoring should log comprehensive execution details","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should log comprehensive execution details"}],"endTime":1752737028559,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/cron/cup-activation/route.test.ts","startTime":1752737028358,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SeasonCompletionDetectorService","detectAndMarkCompletedSeasons"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SeasonCompletionDetectorService detectAndMarkCompletedSeasons should handle no active seasons gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle no active seasons gracefully"},{"ancestorTitles":["SeasonCompletionDetectorService","detectAndMarkCompletedSeasons"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"SeasonCompletionDetectorService detectAndMarkCompletedSeasons should detect and mark completed seasons","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should detect and mark completed seasons"},{"ancestorTitles":["SeasonCompletionDetectorService","detectAndMarkCompletedSeasons"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SeasonCompletionDetectorService detectAndMarkCompletedSeasons should skip incomplete seasons","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should skip incomplete seasons"},{"ancestorTitles":["SeasonCompletionDetectorService","detectAndMarkCompletedSeasons"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SeasonCompletionDetectorService detectAndMarkCompletedSeasons should handle database errors gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle database errors gracefully"},{"ancestorTitles":["SeasonCompletionDetectorService","detectAndMarkCompletedSeasons"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SeasonCompletionDetectorService detectAndMarkCompletedSeasons should handle errors for individual seasons and continue processing","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle errors for individual seasons and continue processing"},{"ancestorTitles":["SeasonCompletionDetectorService","detectAndMarkCompletedSeasons"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SeasonCompletionDetectorService detectAndMarkCompletedSeasons should recognize all final status types","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should recognize all final status types"},{"ancestorTitles":["SeasonCompletionDetectorService","detectAndMarkCompletedSeasons"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SeasonCompletionDetectorService detectAndMarkCompletedSeasons should handle season with no fixtures","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle season with no fixtures"},{"ancestorTitles":["SeasonCompletionDetectorService","getSeasonCompletionStats"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SeasonCompletionDetectorService getSeasonCompletionStats should return completion statistics for active seasons","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return completion statistics for active seasons"},{"ancestorTitles":["SeasonCompletionDetectorService","getSeasonCompletionStats"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SeasonCompletionDetectorService getSeasonCompletionStats should handle errors when fetching stats for individual seasons","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle errors when fetching stats for individual seasons"},{"ancestorTitles":["SeasonCompletionDetectorService","edge cases and error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SeasonCompletionDetectorService edge cases and error handling should handle season update failure","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle season update failure"},{"ancestorTitles":["SeasonCompletionDetectorService","edge cases and error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SeasonCompletionDetectorService edge cases and error handling should use fallback season name when name is not available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use fallback season name when name is not available"}],"endTime":1752737028566,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/seasonCompletionDetectorService.test.ts","startTime":1752737028417,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CupActivationStatusChecker","checkCurrentSeasonActivationStatus"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker checkCurrentSeasonActivationStatus should return activated status when current season has cup activated","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return activated status when current season has cup activated"},{"ancestorTitles":["CupActivationStatusChecker","checkCurrentSeasonActivationStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker checkCurrentSeasonActivationStatus should return not activated status when current season has cup not activated","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return not activated status when current season has cup not activated"},{"ancestorTitles":["CupActivationStatusChecker","checkCurrentSeasonActivationStatus"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker checkCurrentSeasonActivationStatus should handle null last_round_special_activated field","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle null last_round_special_activated field"},{"ancestorTitles":["CupActivationStatusChecker","checkCurrentSeasonActivationStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker checkCurrentSeasonActivationStatus should return default values when no current season exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return default values when no current season exists"},{"ancestorTitles":["CupActivationStatusChecker","checkCurrentSeasonActivationStatus"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker checkCurrentSeasonActivationStatus should throw error when database query fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when database query fails"},{"ancestorTitles":["CupActivationStatusChecker","checkCurrentSeasonActivationStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker checkCurrentSeasonActivationStatus should handle unexpected errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle unexpected errors gracefully"},{"ancestorTitles":["CupActivationStatusChecker","checkSeasonActivationStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker checkSeasonActivationStatus should return activated status for specific season when cup is activated","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return activated status for specific season when cup is activated"},{"ancestorTitles":["CupActivationStatusChecker","checkSeasonActivationStatus"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker checkSeasonActivationStatus should return not activated status for specific season when cup is not activated","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return not activated status for specific season when cup is not activated"},{"ancestorTitles":["CupActivationStatusChecker","checkSeasonActivationStatus"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker checkSeasonActivationStatus should return default values when season is not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return default values when season is not found"},{"ancestorTitles":["CupActivationStatusChecker","checkSeasonActivationStatus"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker checkSeasonActivationStatus should throw error for invalid season ID","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should throw error for invalid season ID"},{"ancestorTitles":["CupActivationStatusChecker","checkSeasonActivationStatus"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker checkSeasonActivationStatus should throw error when database query fails for specific season","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when database query fails for specific season"},{"ancestorTitles":["CupActivationStatusChecker","checkSeasonActivationStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker checkSeasonActivationStatus should handle unexpected errors for specific season gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle unexpected errors for specific season gracefully"},{"ancestorTitles":["CupActivationStatusChecker","isCurrentSeasonCupActivated"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker isCurrentSeasonCupActivated should return true when current season cup is activated","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when current season cup is activated"},{"ancestorTitles":["CupActivationStatusChecker","isCurrentSeasonCupActivated"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker isCurrentSeasonCupActivated should return false when current season cup is not activated","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when current season cup is not activated"},{"ancestorTitles":["CupActivationStatusChecker","isCurrentSeasonCupActivated"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker isCurrentSeasonCupActivated should return false when no current season exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when no current season exists"},{"ancestorTitles":["CupActivationStatusChecker","isSeasonCupActivated"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker isSeasonCupActivated should return true when specified season cup is activated","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when specified season cup is activated"},{"ancestorTitles":["CupActivationStatusChecker","isSeasonCupActivated"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker isSeasonCupActivated should return false when specified season cup is not activated","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when specified season cup is not activated"},{"ancestorTitles":["CupActivationStatusChecker","isSeasonCupActivated"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationStatusChecker isSeasonCupActivated should return false when specified season does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when specified season does not exist"}],"endTime":1752737028616,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/cup/__tests__/cupActivationStatusChecker.test.ts","startTime":1752737028462,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","Type Guards","isMultipleAnswer"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities Type Guards isMultipleAnswer should return true for arrays","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return true for arrays"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","Type Guards","isMultipleAnswer"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities Type Guards isMultipleAnswer should return false for single numbers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return false for single numbers"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","Type Guards","isMultipleAnswer"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities Type Guards isMultipleAnswer should return false for NaN","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for NaN"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","Type Guards","isSingleAnswer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities Type Guards isSingleAnswer should return true for valid numbers","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return true for valid numbers"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","Type Guards","isSingleAnswer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities Type Guards isSingleAnswer should return false for arrays","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return false for arrays"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","Type Guards","isSingleAnswer"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities Type Guards isSingleAnswer should return false for NaN","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for NaN"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","normalizeAnswerToArray"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities normalizeAnswerToArray should return arrays unchanged","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return arrays unchanged"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","normalizeAnswerToArray"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities normalizeAnswerToArray should convert single numbers to single-item arrays","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should convert single numbers to single-item arrays"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","normalizeAnswerToArray"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities normalizeAnswerToArray should handle edge cases","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle edge cases"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","doesUserPredictionMatch","Single Valid Answer Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities doesUserPredictionMatch Single Valid Answer Scenarios should return true when user prediction matches single valid answer","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return true when user prediction matches single valid answer"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","doesUserPredictionMatch","Single Valid Answer Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities doesUserPredictionMatch Single Valid Answer Scenarios should return false when user prediction does not match single valid answer","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return false when user prediction does not match single valid answer"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","doesUserPredictionMatch","Multiple Valid Answers Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities doesUserPredictionMatch Multiple Valid Answers Scenarios should return true when user prediction matches one of multiple valid answers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return true when user prediction matches one of multiple valid answers"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","doesUserPredictionMatch","Multiple Valid Answers Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities doesUserPredictionMatch Multiple Valid Answers Scenarios should return false when user prediction does not match any valid answer","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return false when user prediction does not match any valid answer"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","doesUserPredictionMatch","Multiple Valid Answers Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities doesUserPredictionMatch Multiple Valid Answers Scenarios should return true when user prediction matches single item in array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when user prediction matches single item in array"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","doesUserPredictionMatch","Multiple Valid Answers Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities doesUserPredictionMatch Multiple Valid Answers Scenarios should return false when user prediction does not match single item in array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when user prediction does not match single item in array"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","doesUserPredictionMatch","Multiple Valid Answers Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities doesUserPredictionMatch Multiple Valid Answers Scenarios should return false for empty valid answers array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for empty valid answers array"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","doesUserPredictionMatch","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities doesUserPredictionMatch Edge Cases should handle NaN values correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle NaN values correctly"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","doesUserPredictionMatch","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities doesUserPredictionMatch Edge Cases should handle zero values correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle zero values correctly"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","doesUserPredictionMatch","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities doesUserPredictionMatch Edge Cases should handle negative values correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle negative values correctly"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","Type Compatibility"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities Type Compatibility should allow ValidAnswer to accept both numbers and arrays","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should allow ValidAnswer to accept both numbers and arrays"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","Type Compatibility"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities Type Compatibility should allow AnswerComparisonData to handle mixed answer types","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should allow AnswerComparisonData to handle mixed answer types"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","Type Compatibility"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities Type Compatibility should allow AnswerComparisonData to handle legacy single answer format","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should allow AnswerComparisonData to handle legacy single answer format"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","Integration with Utility Functions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities Integration with Utility Functions should work correctly with realistic football data scenarios","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should work correctly with realistic football data scenarios"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","Integration with Utility Functions"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities Integration with Utility Functions should handle large arrays efficiently","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle large arrays efficiently"},{"ancestorTitles":["DynamicPointsCalculator - Type Definitions and Utilities","Integration with Utility Functions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Type Definitions and Utilities Integration with Utility Functions should maintain consistency between type guards and utility functions","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should maintain consistency between type guards and utility functions"}],"endTime":1752737028707,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/dynamicPointsCalculator-types.test.ts","startTime":1752737028587,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/standings","GET","when cup is not active"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET when cup is not active should return league standings with inactive cup status","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return league standings with inactive cup status"},{"ancestorTitles":["/api/standings","GET","when cup is not active"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET when cup is not active should include proper cache headers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include proper cache headers"},{"ancestorTitles":["/api/standings","GET","when cup is active"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET when cup is active should return both league and cup standings","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return both league and cup standings"},{"ancestorTitles":["/api/standings","GET","when cup is active"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET when cup is active should handle cup standings fetch failure gracefully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle cup standings fetch failure gracefully"},{"ancestorTitles":["/api/standings","GET","when no current season exists"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET when no current season exists should return league standings with null season info","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return league standings with null season info"},{"ancestorTitles":["/api/standings","GET","error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET error handling should return 500 when league standings calculation fails","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 500 when league standings calculation fails"},{"ancestorTitles":["/api/standings","GET","error handling"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET error handling should return 500 when league standings service throws","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 500 when league standings service throws"},{"ancestorTitles":["/api/standings","GET","error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET error handling should continue with league standings when cup status check fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should continue with league standings when cup status check fails"},{"ancestorTitles":["/api/standings","GET","performance logging"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET performance logging should log processing time and participant counts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log processing time and participant counts"},{"ancestorTitles":["/api/standings","GET","backward compatibility"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET backward compatibility should always include league_standings field for existing clients","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should always include league_standings field for existing clients"},{"ancestorTitles":["/api/standings","GET","backward compatibility"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET backward compatibility should maintain the same league standings data structure","invocations":1,"location":null,"numPassingAsserts":12,"retryReasons":[],"status":"passed","title":"should maintain the same league standings data structure"}],"endTime":1752737028730,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/standings/route.test.ts","startTime":1752737028579,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["POST /api/season-answers"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 200 OK on successful submission of season answers","invocations":1,"location":null,"numPassingAsserts":12,"retryReasons":[],"status":"passed","title":"should return 200 OK on successful submission of season answers"},{"ancestorTitles":["POST /api/season-answers"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 401 Unauthorized if user is not authenticated","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return 401 Unauthorized if user is not authenticated"},{"ancestorTitles":["POST /api/season-answers"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 401 Unauthorized if there is an authentication error","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return 401 Unauthorized if there is an authentication error"},{"ancestorTitles":["POST /api/season-answers"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 400 Bad Request if request body is not a valid array","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if request body is not a valid array"},{"ancestorTitles":["POST /api/season-answers"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 400 Bad Request if request body is an empty array","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if request body is an empty array"},{"ancestorTitles":["POST /api/season-answers"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 400 Bad Request if any required fields are missing","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if any required fields are missing"},{"ancestorTitles":["POST /api/season-answers"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 500 Internal Server Error if there is a database error during upsert","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return 500 Internal Server Error if there is a database error during upsert"},{"ancestorTitles":["POST /api/season-answers"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 500 Internal Server Error if an unexpected error occurs","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return 500 Internal Server Error if an unexpected error occurs"},{"ancestorTitles":["POST /api/season-answers"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should handle different question types correctly","invocations":1,"location":null,"numPassingAsserts":11,"retryReasons":[],"status":"passed","title":"should handle different question types correctly"}],"endTime":1752737028741,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/season-answers/route.test.ts","startTime":1752737028509,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DynamicPointsCalculator - Enhanced Logging and Performance Monitoring","Performance Timing","ExactMatchStrategy Performance Logging"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Enhanced Logging and Performance Monitoring Performance Timing ExactMatchStrategy Performance Logging should log performance timing information for comparisons","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should log performance timing information for comparisons"},{"ancestorTitles":["DynamicPointsCalculator - Enhanced Logging and Performance Monitoring","Performance Timing","ExactMatchStrategy Performance Logging"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Enhanced Logging and Performance Monitoring Performance Timing ExactMatchStrategy Performance Logging should use info level for slow comparisons (>1ms)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use info level for slow comparisons (>1ms)"},{"ancestorTitles":["DynamicPointsCalculator - Enhanced Logging and Performance Monitoring","Performance Timing","ExactMatchStrategy Performance Logging"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Enhanced Logging and Performance Monitoring Performance Timing ExactMatchStrategy Performance Logging should use info level for large valid answer arrays (>10)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use info level for large valid answer arrays (>10)"},{"ancestorTitles":["DynamicPointsCalculator - Enhanced Logging and Performance Monitoring","Performance Timing","ExactMatchStrategy Performance Logging"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Enhanced Logging and Performance Monitoring Performance Timing ExactMatchStrategy Performance Logging should use debug level for fast, small comparisons","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use debug level for fast, small comparisons"},{"ancestorTitles":["DynamicPointsCalculator - Enhanced Logging and Performance Monitoring","Performance Timing","TopScorerStrategy Performance Logging"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Enhanced Logging and Performance Monitoring Performance Timing TopScorerStrategy Performance Logging should log tie processing time for multiple tied players","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should log tie processing time for multiple tied players"},{"ancestorTitles":["DynamicPointsCalculator - Enhanced Logging and Performance Monitoring","Performance Timing","TopScorerStrategy Performance Logging"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Enhanced Logging and Performance Monitoring Performance Timing TopScorerStrategy Performance Logging should use info level for complex ties (>5 players)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use info level for complex ties (>5 players)"},{"ancestorTitles":["DynamicPointsCalculator - Enhanced Logging and Performance Monitoring","Performance Timing","TopScorerStrategy Performance Logging"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Enhanced Logging and Performance Monitoring Performance Timing TopScorerStrategy Performance Logging should use info level for slow tie processing (>2ms)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use info level for slow tie processing (>2ms)"},{"ancestorTitles":["DynamicPointsCalculator - Enhanced Logging and Performance Monitoring","Performance Timing","TopScorerStrategy Performance Logging"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Enhanced Logging and Performance Monitoring Performance Timing TopScorerStrategy Performance Logging should not log tie detection for single player scenarios","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not log tie detection for single player scenarios"},{"ancestorTitles":["DynamicPointsCalculator - Enhanced Logging and Performance Monitoring","Performance Timing","GoalDifferenceStrategy Performance Logging"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Enhanced Logging and Performance Monitoring Performance Timing GoalDifferenceStrategy Performance Logging should log tie processing time for multiple tied teams","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log tie processing time for multiple tied teams"},{"ancestorTitles":["DynamicPointsCalculator - Enhanced Logging and Performance Monitoring","Performance Timing","GoalDifferenceStrategy Performance Logging"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Enhanced Logging and Performance Monitoring Performance Timing GoalDifferenceStrategy Performance Logging should use info level for large ties (>8 teams)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use info level for large ties (>8 teams)"},{"ancestorTitles":["DynamicPointsCalculator - Enhanced Logging and Performance Monitoring","Log Level Controls"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Enhanced Logging and Performance Monitoring Log Level Controls should provide appropriate log level controls for different verbosity needs","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should provide appropriate log level controls for different verbosity needs"},{"ancestorTitles":["DynamicPointsCalculator - Enhanced Logging and Performance Monitoring","Enhanced Logging Content"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Enhanced Logging and Performance Monitoring Enhanced Logging Content should include comprehensive performance metrics in log data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include comprehensive performance metrics in log data"},{"ancestorTitles":["DynamicPointsCalculator - Enhanced Logging and Performance Monitoring","Enhanced Logging Content"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Enhanced Logging and Performance Monitoring Enhanced Logging Content should format timing information consistently","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should format timing information consistently"}],"endTime":1752737028819,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/dynamicPointsCalculator-logging.test.ts","startTime":1752737028677,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return complete season data with both league and cup winners","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should return complete season data with both league and cup winners"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return season with only league winner when cup was not activated","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return season with only league winner when cup was not activated"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return season with no winners when season is not completed","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return season with no winners when season is not completed"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should handle legacy data without competition_type correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle legacy data without competition_type correctly"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return 400 for invalid season ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for invalid season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return 400 for floating point season ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for floating point season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return 400 for negative season ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for negative season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return 404 when season does not exist","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 404 when season does not exist"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return 500 on database error for season fetch","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 500 on database error for season fetch"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return 500 on database error for winners fetch","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 500 on database error for winners fetch"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should include proper caching headers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include proper caching headers"}],"endTime":1752737028876,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/hall-of-fame/season/[id]/complete/route.test.ts","startTime":1752737028744,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["UserDataAggregationService - Integration Tests","getUserPerformanceData"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"UserDataAggregationService - Integration Tests getUserPerformanceData should correctly aggregate comprehensive user performance data","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should correctly aggregate comprehensive user performance data"},{"ancestorTitles":["UserDataAggregationService - Integration Tests","getUserPerformanceData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserDataAggregationService - Integration Tests getUserPerformanceData should handle user not found in standings","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle user not found in standings"},{"ancestorTitles":["UserDataAggregationService - Integration Tests","getUserPerformanceData"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"UserDataAggregationService - Integration Tests getUserPerformanceData should handle standings calculation failure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle standings calculation failure"},{"ancestorTitles":["UserDataAggregationService - Integration Tests","getUserPerformanceData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserDataAggregationService - Integration Tests getUserPerformanceData should handle database errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database errors gracefully"},{"ancestorTitles":["UserDataAggregationService - Integration Tests","getUserPerformanceData"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"UserDataAggregationService - Integration Tests getUserPerformanceData should calculate position changes correctly for different scenarios","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate position changes correctly for different scenarios"},{"ancestorTitles":["UserDataAggregationService - Integration Tests","getUserPerformanceData"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"UserDataAggregationService - Integration Tests getUserPerformanceData should handle streak calculation correctly for various patterns","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle streak calculation correctly for various patterns"},{"ancestorTitles":["UserDataAggregationService - Integration Tests","getAllUsersPerformanceData"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"UserDataAggregationService - Integration Tests getAllUsersPerformanceData should aggregate performance data for all users in standings","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should aggregate performance data for all users in standings"},{"ancestorTitles":["UserDataAggregationService - Integration Tests","getAllUsersPerformanceData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserDataAggregationService - Integration Tests getAllUsersPerformanceData should handle empty standings gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty standings gracefully"},{"ancestorTitles":["UserDataAggregationService - Integration Tests","getAllUsersPerformanceData"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserDataAggregationService - Integration Tests getAllUsersPerformanceData should filter out failed user data retrievals","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter out failed user data retrievals"},{"ancestorTitles":["UserDataAggregationService - Integration Tests","getAllUsersPerformanceData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserDataAggregationService - Integration Tests getAllUsersPerformanceData should handle calculateStandings failure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle calculateStandings failure"},{"ancestorTitles":["UserDataAggregationService - Integration Tests","Edge Cases and Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"UserDataAggregationService - Integration Tests Edge Cases and Error Handling should handle missing user profile data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle missing user profile data"},{"ancestorTitles":["UserDataAggregationService - Integration Tests","Edge Cases and Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserDataAggregationService - Integration Tests Edge Cases and Error Handling should handle missing betting history","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle missing betting history"}],"endTime":1752737028882,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/userDataAggregationService.test.ts","startTime":1752737028757,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getCurrentBettingRoundId"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getCurrentBettingRoundId should return round_id when active season and NS fixture exist","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"should return round_id when active season and NS fixture exist"},{"ancestorTitles":["getCurrentBettingRoundId"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getCurrentBettingRoundId should return null when active season exists but no NS fixtures found","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return null when active season exists but no NS fixtures found"},{"ancestorTitles":["getCurrentBettingRoundId"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"getCurrentBettingRoundId should return null when no active season is found","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return null when no active season is found"},{"ancestorTitles":["getCurrentBettingRoundId"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getCurrentBettingRoundId should return null when active season exists but fixture query fails","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return null when active season exists but fixture query fails"},{"ancestorTitles":["getCurrentBettingRoundId"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"getCurrentBettingRoundId should return null on an unexpected error during execution","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null on an unexpected error during execution"}],"endTime":1752737029016,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/rounds.test.ts","startTime":1752737028875,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Input Validation"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Input Validation should return empty array for invalid competitionApiId","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return empty array for invalid competitionApiId"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Input Validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Input Validation should return empty array for negative competitionApiId","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return empty array for negative competitionApiId"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Input Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Input Validation should return empty array for invalid seasonYear","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return empty array for invalid seasonYear"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Input Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Input Validation should return empty array for negative seasonYear","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return empty array for negative seasonYear"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","API Data Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers API Data Handling should handle null response from getCurrentTopScorers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle null response from getCurrentTopScorers"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","API Data Handling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers API Data Handling should handle empty response from getCurrentTopScorers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty response from getCurrentTopScorers"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Single Top Scorer Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Single Top Scorer Scenarios should return single player ID when one player has highest goals","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return single player ID when one player has highest goals"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Multiple Top Scorers (Tie Scenarios)"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Multiple Top Scorers (Tie Scenarios) should return all player IDs when two players are tied for top scorer","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return all player IDs when two players are tied for top scorer"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Multiple Top Scorers (Tie Scenarios)"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Multiple Top Scorers (Tie Scenarios) should return all player IDs when three players are tied for top scorer","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return all player IDs when three players are tied for top scorer"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Multiple Top Scorers (Tie Scenarios)"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Multiple Top Scorers (Tie Scenarios) should return all player IDs when five or more players are tied","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return all player IDs when five or more players are tied"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Edge Cases"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Edge Cases should handle all players having zero goals","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle all players having zero goals"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Edge Cases should handle single player in league","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle single player in league"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Data Validation and Filtering"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Data Validation and Filtering should filter out players with invalid goal counts","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter out players with invalid goal counts"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Data Validation and Filtering"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Data Validation and Filtering should filter out players with invalid player_api_id","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter out players with invalid player_api_id"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Data Validation and Filtering"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Data Validation and Filtering should return empty array when no valid players remain after filtering","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return empty array when no valid players remain after filtering"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Duplicate Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Duplicate Handling should remove duplicate player IDs if they somehow appear","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should remove duplicate player IDs if they somehow appear"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Error Handling should handle unexpected errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle unexpected errors gracefully"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Error Handling should handle malformed data gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle malformed data gracefully"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Performance and Integration"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Performance and Integration should handle large datasets efficiently","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle large datasets efficiently"},{"ancestorTitles":["LeagueDataServiceImpl - getTopScorers","Performance and Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getTopScorers Performance and Integration should call getCurrentTopScorers with correct parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call getCurrentTopScorers with correct parameters"}],"endTime":1752737029035,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/leagueDataService-topScorers.test.ts","startTime":1752737028898,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["MatchAnalysisService","Match Analysis","Completed Matches"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"MatchAnalysisService Match Analysis Completed Matches should analyze completed match successfully","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should analyze completed match successfully"},{"ancestorTitles":["MatchAnalysisService","Match Analysis","Completed Matches"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MatchAnalysisService Match Analysis Completed Matches should handle matches with detailed stats","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle matches with detailed stats"},{"ancestorTitles":["MatchAnalysisService","Match Analysis","Upcoming Matches"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MatchAnalysisService Match Analysis Upcoming Matches should analyze upcoming match for predictions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should analyze upcoming match for predictions"},{"ancestorTitles":["MatchAnalysisService","Match Analysis","Fallback Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MatchAnalysisService Match Analysis Fallback Scenarios should provide fallback analysis when AI unavailable","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should provide fallback analysis when AI unavailable"},{"ancestorTitles":["MatchAnalysisService","Match Analysis","Fallback Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MatchAnalysisService Match Analysis Fallback Scenarios should handle AI generation errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle AI generation errors gracefully"},{"ancestorTitles":["MatchAnalysisService","Round Analysis"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MatchAnalysisService Round Analysis should analyze round trends successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should analyze round trends successfully"},{"ancestorTitles":["MatchAnalysisService","Round Analysis"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"MatchAnalysisService Round Analysis should calculate round statistics correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate round statistics correctly"},{"ancestorTitles":["MatchAnalysisService","Round Analysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MatchAnalysisService Round Analysis should handle empty match list","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle empty match list"},{"ancestorTitles":["MatchAnalysisService","Prediction Insights"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"MatchAnalysisService Prediction Insights should generate prediction insights for upcoming matches","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate prediction insights for upcoming matches"},{"ancestorTitles":["MatchAnalysisService","Prediction Insights"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MatchAnalysisService Prediction Insights should handle matches without form data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle matches without form data"},{"ancestorTitles":["MatchAnalysisService","Prediction Insights"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MatchAnalysisService Prediction Insights should provide fallback insights when AI unavailable","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide fallback insights when AI unavailable"},{"ancestorTitles":["MatchAnalysisService","Analysis Parsing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MatchAnalysisService Analysis Parsing should extract surprise factor correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract surprise factor correctly"},{"ancestorTitles":["MatchAnalysisService","Analysis Parsing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MatchAnalysisService Analysis Parsing should extract difficulty level correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract difficulty level correctly"},{"ancestorTitles":["MatchAnalysisService","Analysis Parsing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MatchAnalysisService Analysis Parsing should default to reasonable values for unclear analysis","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should default to reasonable values for unclear analysis"}],"endTime":1752737029042,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/matchAnalysisService.test.ts","startTime":1752737028903,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CupActivationLogger","Basic Logging Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Basic Logging Methods should log debug messages with proper context","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should log debug messages with proper context"},{"ancestorTitles":["CupActivationLogger","Basic Logging Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Basic Logging Methods should log info messages with proper context","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should log info messages with proper context"},{"ancestorTitles":["CupActivationLogger","Basic Logging Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Basic Logging Methods should log warning messages with proper context","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should log warning messages with proper context"},{"ancestorTitles":["CupActivationLogger","Basic Logging Methods"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Basic Logging Methods should log error messages with error object","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should log error messages with error object"},{"ancestorTitles":["CupActivationLogger","Basic Logging Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Basic Logging Methods should use default service name when not provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use default service name when not provided"},{"ancestorTitles":["CupActivationLogger","Basic Logging Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Basic Logging Methods should generate unique session IDs","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate unique session IDs"},{"ancestorTitles":["CupActivationLogger","Basic Logging Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Basic Logging Methods should include timestamps in context","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should include timestamps in context"},{"ancestorTitles":["CupActivationLogger","Operation Tracking"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Operation Tracking should track operation start and end","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"should track operation start and end"},{"ancestorTitles":["CupActivationLogger","Operation Tracking"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Operation Tracking should track operation duration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should track operation duration"},{"ancestorTitles":["CupActivationLogger","Specialized Logging Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Specialized Logging Methods should log fixture data analysis","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should log fixture data analysis"},{"ancestorTitles":["CupActivationLogger","Specialized Logging Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Specialized Logging Methods should log activation condition result - condition met","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should log activation condition result - condition met"},{"ancestorTitles":["CupActivationLogger","Specialized Logging Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Specialized Logging Methods should log activation condition result - condition not met","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should log activation condition result - condition not met"},{"ancestorTitles":["CupActivationLogger","Specialized Logging Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Specialized Logging Methods should log status check - already activated","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should log status check - already activated"},{"ancestorTitles":["CupActivationLogger","Specialized Logging Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Specialized Logging Methods should log status check - not activated","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should log status check - not activated"},{"ancestorTitles":["CupActivationLogger","Specialized Logging Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Specialized Logging Methods should log activation decision - should activate","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should log activation decision - should activate"},{"ancestorTitles":["CupActivationLogger","Specialized Logging Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Specialized Logging Methods should log activation decision - no action","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should log activation decision - no action"},{"ancestorTitles":["CupActivationLogger","Audit Log Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Audit Log Management should create comprehensive audit log","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should create comprehensive audit log"},{"ancestorTitles":["CupActivationLogger","Audit Log Management"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Audit Log Management should create audit log with errors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create audit log with errors"},{"ancestorTitles":["CupActivationLogger","Audit Log Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Audit Log Management should retrieve audit logs by session","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should retrieve audit logs by session"},{"ancestorTitles":["CupActivationLogger","Audit Log Management"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Audit Log Management should retrieve audit logs by season","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should retrieve audit logs by season"},{"ancestorTitles":["CupActivationLogger","Log Management"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Log Management should clear all logs","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should clear all logs"},{"ancestorTitles":["CupActivationLogger","Log Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Log Management should export logs in proper format","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should export logs in proper format"},{"ancestorTitles":["CupActivationLogger","Convenience Functions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Convenience Functions should use convenience functions with singleton logger","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should use convenience functions with singleton logger"},{"ancestorTitles":["CupActivationLogger","Convenience Functions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CupActivationLogger Convenience Functions should use startOperation convenience function","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should use startOperation convenience function"}],"endTime":1752737029110,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/cup/__tests__/cupActivationLogger.test.ts","startTime":1752737028882,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["AI Configuration","isAIConfigured"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration isAIConfigured should return true when OpenAI API key is present","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when OpenAI API key is present"},{"ancestorTitles":["AI Configuration","isAIConfigured"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration isAIConfigured should return false when OpenAI API key is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when OpenAI API key is missing"},{"ancestorTitles":["AI Configuration","isAIConfigured"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration isAIConfigured should return false when OpenAI API key is empty","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when OpenAI API key is empty"},{"ancestorTitles":["AI Configuration","Feature flags"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration Feature flags should return true for AI_ENABLED when set to true","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for AI_ENABLED when set to true"},{"ancestorTitles":["AI Configuration","Feature flags"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration Feature flags should return false for AI_ENABLED when set to false","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for AI_ENABLED when set to false"},{"ancestorTitles":["AI Configuration","Feature flags"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration Feature flags should default to true for AI_ENABLED when not set","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should default to true for AI_ENABLED when not set"},{"ancestorTitles":["AI Configuration","Feature flags"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration Feature flags should handle STORY_GENERATION_ENABLED","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle STORY_GENERATION_ENABLED"},{"ancestorTitles":["AI Configuration","Feature flags"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration Feature flags should handle MATCH_ANALYSIS_ENABLED","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle MATCH_ANALYSIS_ENABLED"},{"ancestorTitles":["AI Configuration","Feature flags"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration Feature flags should handle USER_ANALYSIS_ENABLED","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle USER_ANALYSIS_ENABLED"},{"ancestorTitles":["AI Configuration","Feature flags"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration Feature flags should default to true for all features when not set","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should default to true for all features when not set"},{"ancestorTitles":["AI Configuration","Feature flags"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration Feature flags should return false for any feature when AI is not configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for any feature when AI is not configured"},{"ancestorTitles":["AI Configuration","getAIProvider"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration getAIProvider should return openai when AI_PROVIDER is openai","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return openai when AI_PROVIDER is openai"},{"ancestorTitles":["AI Configuration","getAIProvider"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration getAIProvider should return openai when AI_PROVIDER is not set","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return openai when AI_PROVIDER is not set"},{"ancestorTitles":["AI Configuration","getAIProvider"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration getAIProvider should return custom provider when set","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return custom provider when set"},{"ancestorTitles":["AI Configuration","parseBooleanFeature"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration parseBooleanFeature should parse true values correctly","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should parse true values correctly"},{"ancestorTitles":["AI Configuration","parseBooleanFeature"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration parseBooleanFeature should parse false values correctly","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should parse false values correctly"},{"ancestorTitles":["AI Configuration","parseBooleanFeature"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration parseBooleanFeature should return default value for undefined input","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return default value for undefined input"},{"ancestorTitles":["AI Configuration","parseBooleanFeature"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration parseBooleanFeature should return default value for unrecognized input","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return default value for unrecognized input"},{"ancestorTitles":["AI Configuration","Integration scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration Integration scenarios should work correctly with complete AI configuration","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should work correctly with complete AI configuration"},{"ancestorTitles":["AI Configuration","Integration scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AI Configuration Integration scenarios should handle missing configuration gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle missing configuration gracefully"}],"endTime":1752737029206,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/config/__tests__/ai.test.ts","startTime":1752737029056,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Cron Alerting System","Execution Tracking"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Execution Tracking should start and complete a successful execution","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should start and complete a successful execution"},{"ancestorTitles":["Cron Alerting System","Execution Tracking"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Execution Tracking should track failed execution","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should track failed execution"},{"ancestorTitles":["Cron Alerting System","Execution Tracking"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Execution Tracking should track timeout execution","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should track timeout execution"},{"ancestorTitles":["Cron Alerting System","Execution Tracking"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Execution Tracking should handle completion of non-existent execution gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle completion of non-existent execution gracefully"},{"ancestorTitles":["Cron Alerting System","Health Summary"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Health Summary should return empty summary for no executions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty summary for no executions"},{"ancestorTitles":["Cron Alerting System","Health Summary"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Health Summary should calculate health metrics correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate health metrics correctly"},{"ancestorTitles":["Cron Alerting System","Health Summary"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Health Summary should calculate average duration correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate average duration correctly"},{"ancestorTitles":["Cron Alerting System","Alert Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Alert Generation should trigger alert after consecutive failures reach threshold","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should trigger alert after consecutive failures reach threshold"},{"ancestorTitles":["Cron Alerting System","Alert Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Alert Generation should trigger recovery alert after failures are resolved","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should trigger recovery alert after failures are resolved"},{"ancestorTitles":["Cron Alerting System","Alert Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Alert Generation should trigger performance alert for slow executions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should trigger performance alert for slow executions"},{"ancestorTitles":["Cron Alerting System","Alert Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Alert Generation should respect cooldown period for alerts","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should respect cooldown period for alerts"},{"ancestorTitles":["Cron Alerting System","Webhook Notifications"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Webhook Notifications should send webhook notification successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should send webhook notification successfully"},{"ancestorTitles":["Cron Alerting System","Webhook Notifications"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Webhook Notifications should handle webhook notification failure gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle webhook notification failure gracefully"},{"ancestorTitles":["Cron Alerting System","Configuration"],"duration":32,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Configuration should disable alerting when CRON_ALERTS_ENABLED is false","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should disable alerting when CRON_ALERTS_ENABLED is false"},{"ancestorTitles":["Cron Alerting System","Configuration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Configuration should use custom configuration from environment variables","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use custom configuration from environment variables"},{"ancestorTitles":["Cron Alerting System","Job Status Determination"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Job Status Determination should mark job as healthy with no failures","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should mark job as healthy with no failures"},{"ancestorTitles":["Cron Alerting System","Job Status Determination"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Job Status Determination should mark job as degraded with some failures","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should mark job as degraded with some failures"},{"ancestorTitles":["Cron Alerting System","Job Status Determination"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System Job Status Determination should mark job as failing when threshold is reached","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should mark job as failing when threshold is reached"},{"ancestorTitles":["Cron Alerting System","History Management"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System History Management should limit execution history to 100 entries per job","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should limit execution history to 100 entries per job"},{"ancestorTitles":["Cron Alerting System","History Management"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Cron Alerting System History Management should return recent executions in descending order","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return recent executions in descending order"}],"endTime":1752737029226,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/utils/cron/alerts.test.ts","startTime":1752737029050,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Input Validation"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Input Validation should return empty array for invalid competitionApiId","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return empty array for invalid competitionApiId"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Input Validation"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Input Validation should return empty array for negative competitionApiId","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return empty array for negative competitionApiId"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Input Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Input Validation should return empty array for invalid seasonYear","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array for invalid seasonYear"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Input Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Input Validation should return empty array for negative seasonYear","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array for negative seasonYear"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","API Data Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams API Data Handling should handle null response from getCurrentLeagueTable","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle null response from getCurrentLeagueTable"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","API Data Handling"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams API Data Handling should handle empty standings array","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty standings array"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Single Best Goal Difference Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Single Best Goal Difference Scenarios should return single team ID when one team has best goal difference","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return single team ID when one team has best goal difference"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Multiple Best Goal Difference (Tie Scenarios)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Multiple Best Goal Difference (Tie Scenarios) should return all team IDs when two teams are tied for best goal difference","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return all team IDs when two teams are tied for best goal difference"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Multiple Best Goal Difference (Tie Scenarios)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Multiple Best Goal Difference (Tie Scenarios) should return all team IDs when three teams are tied for best goal difference","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return all team IDs when three teams are tied for best goal difference"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Multiple Best Goal Difference (Tie Scenarios)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Multiple Best Goal Difference (Tie Scenarios) should return all team IDs when five or more teams are tied","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return all team IDs when five or more teams are tied"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Edge Cases should handle negative goal differences correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle negative goal differences correctly"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Edge Cases should handle all teams having zero goal difference","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle all teams having zero goal difference"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Edge Cases should handle single team in league","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle single team in league"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Edge Cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Edge Cases should filter out teams with invalid goal difference values","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter out teams with invalid goal difference values"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Edge Cases should filter out teams with invalid team_id","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter out teams with invalid team_id"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Edge Cases should return empty array when no valid teams remain after filtering","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return empty array when no valid teams remain after filtering"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Duplicate Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Duplicate Handling should remove duplicate team IDs if they somehow appear","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should remove duplicate team IDs if they somehow appear"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Error Handling should handle unexpected errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle unexpected errors gracefully"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Error Handling should handle malformed data gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle malformed data gracefully"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Performance and Integration"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Performance and Integration should handle large datasets efficiently","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle large datasets efficiently"},{"ancestorTitles":["LeagueDataServiceImpl - getBestGoalDifferenceTeams","Performance and Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LeagueDataServiceImpl - getBestGoalDifferenceTeams Performance and Integration should call getCurrentLeagueTable with correct parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call getCurrentLeagueTable with correct parameters"}],"endTime":1752737029242,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/leagueDataService-goalDifference.test.ts","startTime":1752737029071,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Scoring Logic - calculateAndStoreMatchPoints"],"duration":40,"failureDetails":[],"failureMessages":[],"fullName":"Scoring Logic - calculateAndStoreMatchPoints should correctly score a completed round with simple predictions","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should correctly score a completed round with simple predictions"},{"ancestorTitles":["Scoring Logic - calculateAndStoreMatchPoints"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Scoring Logic - calculateAndStoreMatchPoints should return an error if the betting round fixtures cannot be fetched","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return an error if the betting round fixtures cannot be fetched"},{"ancestorTitles":["Scoring Logic - calculateAndStoreMatchPoints"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Scoring Logic - calculateAndStoreMatchPoints should return early if not all fixtures are finished","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return early if not all fixtures are finished"},{"ancestorTitles":["Scoring Logic - calculateAndStoreMatchPoints"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Scoring Logic - calculateAndStoreMatchPoints should handle dynamic points processing failure gracefully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle dynamic points processing failure gracefully"},{"ancestorTitles":["Scoring Logic - processAndStoreDynamicPointsForRound"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Scoring Logic - processAndStoreDynamicPointsForRound should fetch details, calculate points, and call RPC on success","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should fetch details, calculate points, and call RPC on success"},{"ancestorTitles":["Scoring Logic - processAndStoreDynamicPointsForRound"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Scoring Logic - processAndStoreDynamicPointsForRound should return success with 0 updates if no user answers exist","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return success with 0 updates if no user answers exist"},{"ancestorTitles":["Scoring Logic - processAndStoreDynamicPointsForRound"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Scoring Logic - processAndStoreDynamicPointsForRound should return error if fetching round details fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return error if fetching round details fails"},{"ancestorTitles":["Scoring Logic - processAndStoreDynamicPointsForRound"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Scoring Logic - processAndStoreDynamicPointsForRound should return error if handle_dynamic_points_update RPC fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return error if handle_dynamic_points_update RPC fails"},{"ancestorTitles":["Non-participant Scoring Rule"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Non-participant Scoring Rule should give non-participants the minimum participant score","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should give non-participants the minimum participant score"},{"ancestorTitles":["Non-participant Scoring Rule"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Non-participant Scoring Rule should handle case where no users participated","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle case where no users participated"},{"ancestorTitles":["Non-participant Scoring Rule"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Non-participant Scoring Rule should handle case where all users participated","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle case where all users participated"},{"ancestorTitles":["Non-participant Scoring Rule"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Non-participant Scoring Rule should distribute points correctly across fixtures","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should distribute points correctly across fixtures"},{"ancestorTitles":["Non-participant Scoring Rule"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Non-participant Scoring Rule should handle database errors gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle database errors gracefully"}],"endTime":1752737029319,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/scoring.test.ts","startTime":1752737029139,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DynamicPointsCalculator - Integration Tests","End-to-End Calculation Scenarios"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Integration Tests End-to-End Calculation Scenarios should handle single answer scenario correctly","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle single answer scenario correctly"},{"ancestorTitles":["DynamicPointsCalculator - Integration Tests","End-to-End Calculation Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Integration Tests End-to-End Calculation Scenarios should handle multiple ties scenario correctly","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should handle multiple ties scenario correctly"},{"ancestorTitles":["DynamicPointsCalculator - Integration Tests","End-to-End Calculation Scenarios"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Integration Tests End-to-End Calculation Scenarios should handle mixed scenario (some ties, some single winners)","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle mixed scenario (some ties, some single winners)"},{"ancestorTitles":["DynamicPointsCalculator - Integration Tests","End-to-End Calculation Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Integration Tests End-to-End Calculation Scenarios should handle user with no predictions gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle user with no predictions gracefully"},{"ancestorTitles":["DynamicPointsCalculator - Integration Tests","Idempotency Verification"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Integration Tests Idempotency Verification should produce identical results when called multiple times with same data","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should produce identical results when called multiple times with same data"},{"ancestorTitles":["DynamicPointsCalculator - Integration Tests","Idempotency Verification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Integration Tests Idempotency Verification should maintain idempotency with edge case data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should maintain idempotency with edge case data"},{"ancestorTitles":["DynamicPointsCalculator - Integration Tests","Performance Benchmarks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Integration Tests Performance Benchmarks should complete calculation within performance threshold","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should complete calculation within performance threshold"},{"ancestorTitles":["DynamicPointsCalculator - Integration Tests","Backward Compatibility & Regression Tests"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicPointsCalculator - Integration Tests Backward Compatibility & Regression Tests should maintain exact same behavior for legacy single-answer scenarios","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"should maintain exact same behavior for legacy single-answer scenarios"}],"endTime":1752737029399,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/dynamicPointsCalculator-integration.test.ts","startTime":1752737029237,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Enhanced Football API Client","fetchFixtureEvents"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Enhanced Football API Client fetchFixtureEvents should fetch fixture events successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fetch fixture events successfully"},{"ancestorTitles":["Enhanced Football API Client","fetchFixtureEvents"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Enhanced Football API Client fetchFixtureEvents should fetch events with optional filters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fetch events with optional filters"},{"ancestorTitles":["Enhanced Football API Client","fetchFixtureEvents"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Enhanced Football API Client fetchFixtureEvents should handle API errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle API errors"},{"ancestorTitles":["Enhanced Football API Client","fetchFixtureEvents"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Enhanced Football API Client fetchFixtureEvents should handle network errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle network errors"},{"ancestorTitles":["Enhanced Football API Client","fetchFixtureStatistics"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Enhanced Football API Client fetchFixtureStatistics should fetch fixture statistics successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fetch fixture statistics successfully"},{"ancestorTitles":["Enhanced Football API Client","fetchFixtureStatistics"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Enhanced Football API Client fetchFixtureStatistics should fetch statistics with team filter","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fetch statistics with team filter"},{"ancestorTitles":["Enhanced Football API Client","fetchFixturePlayerStats"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Enhanced Football API Client fetchFixturePlayerStats should fetch player statistics successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fetch player statistics successfully"},{"ancestorTitles":["Enhanced Football API Client","fetchComprehensiveMatchData"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Enhanced Football API Client fetchComprehensiveMatchData should fetch comprehensive match data successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should fetch comprehensive match data successfully"},{"ancestorTitles":["Enhanced Football API Client","fetchComprehensiveMatchData"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Enhanced Football API Client fetchComprehensiveMatchData should handle partial failures gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle partial failures gracefully"},{"ancestorTitles":["Enhanced Football API Client","fetchComprehensiveMatchData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Enhanced Football API Client fetchComprehensiveMatchData should return null if fixture data fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if fixture data fails"},{"ancestorTitles":["Enhanced Football API Client","Error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Enhanced Football API Client Error handling should throw an error if the API key is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if the API key is missing"}],"endTime":1752737029402,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/football-api/__tests__/client.test.ts","startTime":1752737029243,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["RoundCompletionDetectorService","detectAndMarkCompletedRounds"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RoundCompletionDetectorService detectAndMarkCompletedRounds should exist as a function on the service","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should exist as a function on the service"},{"ancestorTitles":["RoundCompletionDetectorService","detectAndMarkCompletedRounds"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RoundCompletionDetectorService detectAndMarkCompletedRounds should detect a completed round and mark its status as scoring","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect a completed round and mark its status as scoring"},{"ancestorTitles":["RoundCompletionDetectorService","detectAndMarkCompletedRounds"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RoundCompletionDetectorService detectAndMarkCompletedRounds should return success with no completed rounds if no open rounds are found","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return success with no completed rounds if no open rounds are found"},{"ancestorTitles":["RoundCompletionDetectorService","detectAndMarkCompletedRounds"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"RoundCompletionDetectorService detectAndMarkCompletedRounds should not mark a round if at least one fixture is not finished","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should not mark a round if at least one fixture is not finished"},{"ancestorTitles":["RoundCompletionDetectorService","detectAndMarkCompletedRounds"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RoundCompletionDetectorService detectAndMarkCompletedRounds should handle rounds with no linked fixtures gracefully (log warning, consider incomplete)","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should handle rounds with no linked fixtures gracefully (log warning, consider incomplete)"},{"ancestorTitles":["RoundCompletionDetectorService","detectAndMarkCompletedRounds"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RoundCompletionDetectorService detectAndMarkCompletedRounds should return errors if fetching open rounds fails","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return errors if fetching open rounds fails"},{"ancestorTitles":["RoundCompletionDetectorService","detectAndMarkCompletedRounds"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"RoundCompletionDetectorService detectAndMarkCompletedRounds should return errors if updating round status fails","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return errors if updating round status fails"}],"endTime":1752737029425,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/roundCompletionDetectorService.test.ts","startTime":1752737029267,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["UserPerformanceAnalysisService","User Analysis","Average Performer"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService User Analysis Average Performer should analyze user performance successfully","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should analyze user performance successfully"},{"ancestorTitles":["UserPerformanceAnalysisService","User Analysis","Average Performer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService User Analysis Average Performer should handle user with recent improvement","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle user with recent improvement"},{"ancestorTitles":["UserPerformanceAnalysisService","User Analysis","Poor Performer"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService User Analysis Poor Performer should provide encouraging analysis for struggling users","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should provide encouraging analysis for struggling users"},{"ancestorTitles":["UserPerformanceAnalysisService","User Analysis","Top Performer"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService User Analysis Top Performer should analyze top performer appropriately","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should analyze top performer appropriately"},{"ancestorTitles":["UserPerformanceAnalysisService","Improvement Suggestions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService Improvement Suggestions should generate specific improvement suggestions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate specific improvement suggestions"},{"ancestorTitles":["UserPerformanceAnalysisService","Improvement Suggestions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService Improvement Suggestions should provide beginner-friendly suggestions for new users","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should provide beginner-friendly suggestions for new users"},{"ancestorTitles":["UserPerformanceAnalysisService","Improvement Suggestions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService Improvement Suggestions should handle users with no clear weak areas","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle users with no clear weak areas"},{"ancestorTitles":["UserPerformanceAnalysisService","Motivational Messages"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService Motivational Messages should generate encouraging messages for average performers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate encouraging messages for average performers"},{"ancestorTitles":["UserPerformanceAnalysisService","Motivational Messages"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService Motivational Messages should provide uplifting messages for struggling users","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should provide uplifting messages for struggling users"},{"ancestorTitles":["UserPerformanceAnalysisService","Motivational Messages"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService Motivational Messages should celebrate top performers appropriately","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should celebrate top performers appropriately"},{"ancestorTitles":["UserPerformanceAnalysisService","Fallback Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService Fallback Scenarios should provide fallback analysis when AI unavailable","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should provide fallback analysis when AI unavailable"},{"ancestorTitles":["UserPerformanceAnalysisService","Fallback Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService Fallback Scenarios should provide fallback suggestions when AI fails","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should provide fallback suggestions when AI fails"},{"ancestorTitles":["UserPerformanceAnalysisService","Fallback Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService Fallback Scenarios should provide fallback motivational message when AI fails","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should provide fallback motivational message when AI fails"},{"ancestorTitles":["UserPerformanceAnalysisService","Data Analysis"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService Data Analysis should correctly identify performance trends","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should correctly identify performance trends"},{"ancestorTitles":["UserPerformanceAnalysisService","Data Analysis"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService Data Analysis should handle users with minimal data","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle users with minimal data"},{"ancestorTitles":["UserPerformanceAnalysisService","Data Analysis"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService Data Analysis should handle empty performance data gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty performance data gracefully"},{"ancestorTitles":["UserPerformanceAnalysisService","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService Error Handling should handle malformed user data gracefully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle malformed user data gracefully"},{"ancestorTitles":["UserPerformanceAnalysisService","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"UserPerformanceAnalysisService Error Handling should handle AI service timeouts","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle AI service timeouts"}],"endTime":1752737029469,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/userPerformanceAnalysisService.test.ts","startTime":1752737029331,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Utility Functions (src/lib/utils.ts)","calculateTimeDifference"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Utility Functions (src/lib/utils.ts) calculateTimeDifference should calculate the difference in hours by default","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate the difference in hours by default"},{"ancestorTitles":["Utility Functions (src/lib/utils.ts)","calculateTimeDifference"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Utility Functions (src/lib/utils.ts) calculateTimeDifference should calculate the difference in minutes","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate the difference in minutes"},{"ancestorTitles":["Utility Functions (src/lib/utils.ts)","calculateTimeDifference"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Utility Functions (src/lib/utils.ts) calculateTimeDifference should calculate the difference in seconds","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate the difference in seconds"},{"ancestorTitles":["Utility Functions (src/lib/utils.ts)","calculateTimeDifference"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Utility Functions (src/lib/utils.ts) calculateTimeDifference should calculate the difference in milliseconds","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate the difference in milliseconds"},{"ancestorTitles":["Utility Functions (src/lib/utils.ts)","calculateTimeDifference"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Utility Functions (src/lib/utils.ts) calculateTimeDifference should handle negative differences correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle negative differences correctly"},{"ancestorTitles":["Utility Functions (src/lib/utils.ts)","calculateTimeDifference"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Utility Functions (src/lib/utils.ts) calculateTimeDifference should return 0 for identical dates","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 0 for identical dates"}],"endTime":1752737029562,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/utils.test.ts","startTime":1752737029430,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["PredictionSchema"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"PredictionSchema should validate complete predictions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate complete predictions"},{"ancestorTitles":["PredictionSchema"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PredictionSchema should reject predictions with null values","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject predictions with null values"},{"ancestorTitles":["PredictionSchema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PredictionSchema should reject predictions with empty strings","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject predictions with empty strings"},{"ancestorTitles":["validatePrediction"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"validatePrediction should return isValid true for valid predictions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return isValid true for valid predictions"},{"ancestorTitles":["validatePrediction"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"validatePrediction should return errors for invalid predictions (null/empty)","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return errors for invalid predictions (null/empty)"}],"endTime":1752737029578,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/schemas/__tests__/questionnaireSchema.test.ts","startTime":1752737029442,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Submission Service"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Submission Service should submit both bets and answers successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should submit both bets and answers successfully"},{"ancestorTitles":["Submission Service"],"duration":45,"failureDetails":[],"failureMessages":[],"fullName":"Submission Service should throw error if bets submission fails","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should throw error if bets submission fails"},{"ancestorTitles":["Submission Service"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Submission Service should throw error if answers submission fails after bets succeed","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should throw error if answers submission fails after bets succeed"}],"endTime":1752737029609,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/submissionService.test.ts","startTime":1752737029433,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["OpenAI Service","Service Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OpenAI Service Service Initialization should initialize successfully with valid configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize successfully with valid configuration"},{"ancestorTitles":["OpenAI Service","Service Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OpenAI Service Service Initialization should handle initialization errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle initialization errors"},{"ancestorTitles":["OpenAI Service","Content Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OpenAI Service Content Generation should generate content successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate content successfully"},{"ancestorTitles":["OpenAI Service","Content Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OpenAI Service Content Generation should use default configuration when not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use default configuration when not provided"},{"ancestorTitles":["OpenAI Service","Content Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OpenAI Service Content Generation should handle API errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle API errors gracefully"},{"ancestorTitles":["OpenAI Service","Content Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OpenAI Service Content Generation should handle empty responses","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty responses"},{"ancestorTitles":["OpenAI Service","Content Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OpenAI Service Content Generation should handle rate limiting","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle rate limiting"},{"ancestorTitles":["OpenAI Service","Global Functions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OpenAI Service Global Functions generateAIContent should work as expected","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"generateAIContent should work as expected"},{"ancestorTitles":["OpenAI Service","Global Functions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OpenAI Service Global Functions isAIAvailable should return correct status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"isAIAvailable should return correct status"},{"ancestorTitles":["OpenAI Service","Global Functions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OpenAI Service Global Functions getAIProviderName should return correct names based on config","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"getAIProviderName should return correct names based on config"},{"ancestorTitles":["OpenAI Service","Configuration Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OpenAI Service Configuration Validation should validate token limits","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate token limits"},{"ancestorTitles":["OpenAI Service","Configuration Validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OpenAI Service Configuration Validation should validate temperature range","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate temperature range"},{"ancestorTitles":["OpenAI Service","Error Recovery"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OpenAI Service Error Recovery should recover from temporary failures","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should recover from temporary failures"},{"ancestorTitles":["OpenAI Service Integration","Service Unavailable Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OpenAI Service Integration Service Unavailable Scenarios should return null for generateAIContent when not configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for generateAIContent when not configured"},{"ancestorTitles":["OpenAI Service Integration","Service Unavailable Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OpenAI Service Integration Service Unavailable Scenarios should return fallback provider name when not configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return fallback provider name when not configured"}],"endTime":1752737029660,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/openai.test.ts","startTime":1752737029533,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getCurrentSeasonId"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"getCurrentSeasonId should return the season ID when one season is current","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return the season ID when one season is current"},{"ancestorTitles":["getCurrentSeasonId"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getCurrentSeasonId should return null when no season is current","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return null when no season is current"},{"ancestorTitles":["getCurrentSeasonId"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"getCurrentSeasonId should return null when no data is returned without error","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return null when no data is returned without error"},{"ancestorTitles":["getCurrentSeasonId"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getCurrentSeasonId should return null on a database query error","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return null on a database query error"},{"ancestorTitles":["getCurrentSeasonId"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"getCurrentSeasonId should return null on an unexpected error during execution","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null on an unexpected error during execution"}],"endTime":1752737029697,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/seasons.test.ts","startTime":1752737029581,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Cup Scoring Service (Stub)","calculateRoundCupPoints"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Cup Scoring Service (Stub) calculateRoundCupPoints should return success with stub implementation","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return success with stub implementation"},{"ancestorTitles":["Cup Scoring Service (Stub)","calculateRoundCupPoints"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cup Scoring Service (Stub) calculateRoundCupPoints should accept options parameter","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should accept options parameter"},{"ancestorTitles":["Cup Scoring Service (Stub)","getCupStandings"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cup Scoring Service (Stub) getCupStandings should return empty array with stub implementation","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return empty array with stub implementation"},{"ancestorTitles":["Cup Scoring Service (Stub)","getCupStandings"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Cup Scoring Service (Stub) getCupStandings should handle undefined season ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle undefined season ID"}],"endTime":1752737029738,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/cup/__tests__/cupScoringService.test.ts","startTime":1752737029622,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["GET /api/teams"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 200 OK with teams on valid request","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"should return 200 OK with teams on valid request"},{"ancestorTitles":["GET /api/teams"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 400 Bad Request if league parameter is missing","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if league parameter is missing"},{"ancestorTitles":["GET /api/teams"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 400 Bad Request if season parameter is missing","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if season parameter is missing"},{"ancestorTitles":["GET /api/teams"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 400 Bad Request if league parameter is not a number","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if league parameter is not a number"},{"ancestorTitles":["GET /api/teams"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 400 Bad Request if season parameter is not a number","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if season parameter is not a number"},{"ancestorTitles":["GET /api/teams"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 404 Not Found if season is not found in DB","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 404 Not Found if season is not found in DB"},{"ancestorTitles":["GET /api/teams"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 500 Internal Server Error if findSeasonId query fails","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 500 Internal Server Error if findSeasonId query fails"},{"ancestorTitles":["GET /api/teams"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 500 Internal Server Error if getTeamsForSeason query fails","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return 500 Internal Server Error if getTeamsForSeason query fails"},{"ancestorTitles":["GET /api/teams"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 200 OK with an empty array if no teams are found","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return 200 OK with an empty array if no teams are found"}],"endTime":1752737029741,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/teams/route.test.ts","startTime":1752737029597,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Cup Scoring Integration"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Cup Scoring Integration should handle cup scoring disabled scenario","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cup scoring disabled scenario"}],"endTime":1752737029817,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/__tests__/cupScoringIntegration.test.ts","startTime":1752737029714,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Supabase Queries","getFixturesForRound"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Supabase Queries getFixturesForRound should return formatted matches when query is successful","invocations":1,"location":null,"numPassingAsserts":13,"retryReasons":[],"status":"passed","title":"should return formatted matches when query is successful"},{"ancestorTitles":["Supabase Queries","getFixturesForRound"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Supabase Queries getFixturesForRound should return null and log error when query fails","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return null and log error when query fails"},{"ancestorTitles":["Supabase Queries","getFixturesForRound"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Supabase Queries getFixturesForRound should return an empty array when no fixtures are found","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return an empty array when no fixtures are found"},{"ancestorTitles":["Supabase Queries","getCurrentBettingRoundFixtures"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Supabase Queries getCurrentBettingRoundFixtures should return null if no open betting round is found","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return null if no open betting round is found"},{"ancestorTitles":["Supabase Queries","getCurrentBettingRoundFixtures"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Supabase Queries getCurrentBettingRoundFixtures should return null on unexpected error fetching open round","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return null on unexpected error fetching open round"},{"ancestorTitles":["Supabase Queries","getCurrentBettingRoundFixtures"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Supabase Queries getCurrentBettingRoundFixtures should return round info with empty matches if open round has no fixtures","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return round info with empty matches if open round has no fixtures"},{"ancestorTitles":["Supabase Queries","getCurrentBettingRoundFixtures"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Supabase Queries getCurrentBettingRoundFixtures should return the correct round and fixtures when an open round exists","invocations":1,"location":null,"numPassingAsserts":11,"retryReasons":[],"status":"passed","title":"should return the correct round and fixtures when an open round exists"},{"ancestorTitles":["Supabase Queries","getCurrentBettingRoundFixtures"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Supabase Queries getCurrentBettingRoundFixtures should return null on error fetching round fixtures","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return null on error fetching round fixtures"},{"ancestorTitles":["Supabase Queries","getCurrentBettingRoundFixtures"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Supabase Queries getCurrentBettingRoundFixtures should return null on error fetching fixture details","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"should return null on error fetching fixture details"}],"endTime":1752737029866,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/lib/supabase/queries.test.ts","startTime":1752737029675,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Database Test Utilities","connectToTestDb"],"duration":69,"failureDetails":[],"failureMessages":[],"fullName":"Database Test Utilities connectToTestDb should successfully connect to the test database","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should successfully connect to the test database"},{"ancestorTitles":["Database Test Utilities","connectToTestDb"],"duration":37,"failureDetails":[],"failureMessages":[],"fullName":"Database Test Utilities connectToTestDb should throw error if environment variables are missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if environment variables are missing"},{"ancestorTitles":["Database Test Utilities","truncateAllTables"],"duration":1271,"failureDetails":[],"failureMessages":[],"fullName":"Database Test Utilities truncateAllTables should truncate all tables without errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should truncate all tables without errors"},{"ancestorTitles":["Database Test Utilities","truncateAllTables"],"duration":1161,"failureDetails":[{"matcherResult":{"actual":1,"expected":0,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m0\u001b[39m\nReceived: \u001b[31m1\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m0\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.test.ts:70:36)"],"fullName":"Database Test Utilities truncateAllTables should result in empty tables after truncation","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should result in empty tables after truncation"},{"ancestorTitles":["Database Test Utilities","seedTestData"],"duration":1293,"failureDetails":[{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mresolves\u001b[2m.\u001b[22mnot\u001b[2m.\u001b[22mtoThrow\u001b[2m()\u001b[22m\n\nReceived promise rejected instead of resolved\nRejected to value: \u001b[31m[Error: Failed to seed test data: Failed to seed betting round fixtures: insert or update on table \"betting_round_fixtures\" violates foreign key constraint \"betting_round_fixtures_fixture_id_fkey\"]\u001b[39m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mresolves\u001b[2m.\u001b[22mnot\u001b[2m.\u001b[22mtoThrow\u001b[2m()\u001b[22m\n\nReceived promise rejected instead of resolved\nRejected to value: \u001b[31m[Error: Failed to seed test data: Failed to seed betting round fixtures: insert or update on table \"betting_round_fixtures\" violates foreign key constraint \"betting_round_fixtures_fixture_id_fkey\"]\u001b[39m\n    at expect (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/expect/build/index.js:113:15)\n    at Object.expect (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.test.ts:83:13)\n    at Promise.then.completed (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Database Test Utilities seedTestData should seed test data successfully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should seed test data successfully"},{"ancestorTitles":["Database Test Utilities","seedTestData"],"duration":976,"failureDetails":[{}],"failureMessages":["Error: Failed to seed test data: Failed to seed seasons: insert or update on table \"seasons\" violates foreign key constraint \"seasons_competition_id_fkey\"\n    at seedTestData (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:463:11)\n    at Object.<anonymous> (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.test.ts:87:7)"],"fullName":"Database Test Utilities seedTestData should create expected test data","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should create expected test data"},{"ancestorTitles":["Database Test Utilities","resetDatabase"],"duration":3591,"failureDetails":[{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mresolves\u001b[2m.\u001b[22mnot\u001b[2m.\u001b[22mtoThrow\u001b[2m()\u001b[22m\n\nReceived promise rejected instead of resolved\nRejected to value: \u001b[31m[Error: Failed to seed test data: Failed to seed rounds: insert or update on table \"rounds\" violates foreign key constraint \"rounds_season_id_fkey\"]\u001b[39m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mresolves\u001b[2m.\u001b[22mnot\u001b[2m.\u001b[22mtoThrow\u001b[2m()\u001b[22m\n\nReceived promise rejected instead of resolved\nRejected to value: \u001b[31m[Error: Failed to seed test data: Failed to seed rounds: insert or update on table \"rounds\" violates foreign key constraint \"rounds_season_id_fkey\"]\u001b[39m\n    at expect (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/expect/build/index.js:113:15)\n    at Object.expect (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.test.ts:115:13)\n    at Promise.then.completed (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Database Test Utilities resetDatabase should reset database with seeding by default","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should reset database with seeding by default"},{"ancestorTitles":["Database Test Utilities","resetDatabase"],"duration":589,"failureDetails":[{"matcherResult":{"actual":1,"expected":0,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m0\u001b[39m\nReceived: \u001b[31m1\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m0\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.test.ts:130:36)"],"fullName":"Database Test Utilities resetDatabase should reset database without seeding when seed=false","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should reset database without seeding when seed=false"},{"ancestorTitles":["Database Test Utilities","disconnectDb"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Database Test Utilities disconnectDb should disconnect without errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should disconnect without errors"}],"endTime":1752737030431,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mDatabase Test Utilities › truncateAllTables › should result in empty tables after truncation\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m0\u001b[39m\n    Received: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 68 |\u001b[39m       \u001b[36mconst\u001b[39m { data\u001b[33m:\u001b[39m teams } \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m client\u001b[33m.\u001b[39m\u001b[36mfrom\u001b[39m(\u001b[32m'teams'\u001b[39m)\u001b[33m.\u001b[39mselect(\u001b[32m'*'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 69 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 70 |\u001b[39m       expect(competitions\u001b[33m?\u001b[39m\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBe(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 71 |\u001b[39m       expect(seasons\u001b[33m?\u001b[39m\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBe(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m       expect(teams\u001b[33m?\u001b[39m\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBe(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/utils/db.test.ts\u001b[39m\u001b[0m\u001b[2m:70:36)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mDatabase Test Utilities › seedTestData › should seed test data successfully\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mresolves\u001b[2m.\u001b[22mnot\u001b[2m.\u001b[22mtoThrow\u001b[2m()\u001b[22m\n\n    Received promise rejected instead of resolved\n    Rejected to value: \u001b[31m[Error: Failed to seed test data: Failed to seed betting round fixtures: insert or update on table \"betting_round_fixtures\" violates foreign key constraint \"betting_round_fixtures_fixture_id_fkey\"]\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 81 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 82 |\u001b[39m     it(\u001b[32m'should seed test data successfully'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 83 |\u001b[39m       \u001b[36mawait\u001b[39m expect(seedTestData())\u001b[33m.\u001b[39mresolves\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoThrow()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 84 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 85 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 86 |\u001b[39m     it(\u001b[32m'should create expected test data'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat expect (\u001b[22m\u001b[2mnode_modules/expect/build/index.js\u001b[2m:113:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.expect (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/utils/db.test.ts\u001b[39m\u001b[0m\u001b[2m:83:13)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mDatabase Test Utilities › seedTestData › should create expected test data\u001b[39m\u001b[22m\n\n    Failed to seed test data: Failed to seed seasons: insert or update on table \"seasons\" violates foreign key constraint \"seasons_competition_id_fkey\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 461 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 462 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Seeding failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 463 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to seed test data: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 464 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 465 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 466 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat seedTestData (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:463:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/utils/db.test.ts\u001b[39m\u001b[0m\u001b[2m:87:7)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mDatabase Test Utilities › resetDatabase › should reset database with seeding by default\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mresolves\u001b[2m.\u001b[22mnot\u001b[2m.\u001b[22mtoThrow\u001b[2m()\u001b[22m\n\n    Received promise rejected instead of resolved\n    Rejected to value: \u001b[31m[Error: Failed to seed test data: Failed to seed rounds: insert or update on table \"rounds\" violates foreign key constraint \"rounds_season_id_fkey\"]\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 113 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 114 |\u001b[39m     it(\u001b[32m'should reset database with seeding by default'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 115 |\u001b[39m       \u001b[36mawait\u001b[39m expect(resetDatabase())\u001b[33m.\u001b[39mresolves\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoThrow()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 116 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 117 |\u001b[39m       \u001b[90m// Verify data was seeded\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 118 |\u001b[39m       \u001b[36mconst\u001b[39m { data\u001b[33m:\u001b[39m competitions } \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m client\u001b[33m.\u001b[39m\u001b[36mfrom\u001b[39m(\u001b[32m'competitions'\u001b[39m)\u001b[33m.\u001b[39mselect(\u001b[32m'*'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat expect (\u001b[22m\u001b[2mnode_modules/expect/build/index.js\u001b[2m:113:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.expect (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/utils/db.test.ts\u001b[39m\u001b[0m\u001b[2m:115:13)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mDatabase Test Utilities › resetDatabase › should reset database without seeding when seed=false\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m0\u001b[39m\n    Received: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 128 |\u001b[39m       \u001b[90m// Verify tables are empty\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 129 |\u001b[39m       \u001b[36mconst\u001b[39m { data\u001b[33m:\u001b[39m competitions } \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m client\u001b[33m.\u001b[39m\u001b[36mfrom\u001b[39m(\u001b[32m'competitions'\u001b[39m)\u001b[33m.\u001b[39mselect(\u001b[32m'*'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 130 |\u001b[39m       expect(competitions\u001b[33m?\u001b[39m\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBe(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 131 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 132 |\u001b[39m       \u001b[36mconst\u001b[39m { data\u001b[33m:\u001b[39m teams } \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m client\u001b[33m.\u001b[39m\u001b[36mfrom\u001b[39m(\u001b[32m'teams'\u001b[39m)\u001b[33m.\u001b[39mselect(\u001b[32m'*'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 133 |\u001b[39m       expect(teams\u001b[33m?\u001b[39m\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBe(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/utils/db.test.ts\u001b[39m\u001b[0m\u001b[2m:130:36)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.test.ts","startTime":1752737020868,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["WinnerDeterminationService Integration Tests","determineSeasonWinners"],"duration":3092,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/winnerDeterminationService.test.ts:138:48)"],"fullName":"WinnerDeterminationService Integration Tests determineSeasonWinners should return existing winners if already determined integration","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return existing winners if already determined integration"},{"ancestorTitles":["WinnerDeterminationService Integration Tests","determineSeasonWinners"],"duration":4528,"failureDetails":[{}],"failureMessages":["Error: No betting round found in test data\n    at setupStandingsTestData (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/winnerDeterminationService.test.ts:62:23)\n    at Object.<anonymous> (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/winnerDeterminationService.test.ts:147:28)"],"fullName":"WinnerDeterminationService Integration Tests determineSeasonWinners should determine single winner successfully integration","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should determine single winner successfully integration"},{"ancestorTitles":["WinnerDeterminationService Integration Tests","determineSeasonWinners"],"duration":1989,"failureDetails":[{}],"failureMessages":["Error: Failed to seed test data: Failed to seed rounds: insert or update on table \"rounds\" violates foreign key constraint \"rounds_season_id_fkey\"\n    at seedTestData (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:463:11)\n    at /Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:694:9"],"fullName":"WinnerDeterminationService Integration Tests determineSeasonWinners should handle tied winners correctly integration","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle tied winners correctly integration"},{"ancestorTitles":["WinnerDeterminationService Integration Tests","determineSeasonWinners"],"duration":863,"failureDetails":[],"failureMessages":[],"fullName":"WinnerDeterminationService Integration Tests determineSeasonWinners should handle failure when no players found integration","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle failure when no players found integration"},{"ancestorTitles":["WinnerDeterminationService Integration Tests","determineSeasonWinners"],"duration":879,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n    at Object.toBe (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/winnerDeterminationService.test.ts:279:48)"],"fullName":"WinnerDeterminationService Integration Tests determineSeasonWinners should handle season with existing winners that have null profile names integration","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle season with existing winners that have null profile names integration"},{"ancestorTitles":["WinnerDeterminationService Integration Tests","determineWinnersForCompletedSeasons"],"duration":1283,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveLength\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected length: \u001b[32m1\u001b[39m\nReceived length: \u001b[31m7\u001b[39m\nReceived array:  \u001b[31m[{\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"64014d1d-3af2-410a-9af6-b15e03a0d36f\", \"username\": \"Test User 2\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"6f7e4bc7-691b-47d0-9e1d-9abb676431b1\", \"username\": \"Test User 3\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"8b411628-7754-48d0-9a14-8670f54251ac\", \"username\": \"Test User 1\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"a35adb89-dae9-4647-881d-b0cde296c75f\", \"username\": \"Charlie\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"a4f7ed5c-8192-4c2a-b05a-b8f01e75fb53\", \"username\": \"Alice\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"cda9b5cb-948f-44d1-8160-b4290baf3708\", \"username\": \"Bob\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"fcf6cc9c-5758-422d-9aab-726db9347d6a\", \"username\": \"Diana\"}]\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveLength\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected length: \u001b[32m1\u001b[39m\nReceived length: \u001b[31m7\u001b[39m\nReceived array:  \u001b[31m[{\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"64014d1d-3af2-410a-9af6-b15e03a0d36f\", \"username\": \"Test User 2\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"6f7e4bc7-691b-47d0-9e1d-9abb676431b1\", \"username\": \"Test User 3\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"8b411628-7754-48d0-9a14-8670f54251ac\", \"username\": \"Test User 1\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"a35adb89-dae9-4647-881d-b0cde296c75f\", \"username\": \"Charlie\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"a4f7ed5c-8192-4c2a-b05a-b8f01e75fb53\", \"username\": \"Alice\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"cda9b5cb-948f-44d1-8160-b4290baf3708\", \"username\": \"Bob\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"fcf6cc9c-5758-422d-9aab-726db9347d6a\", \"username\": \"Diana\"}]\u001b[39m\n    at Object.toHaveLength (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/winnerDeterminationService.test.ts:316:34)"],"fullName":"WinnerDeterminationService Integration Tests determineWinnersForCompletedSeasons should process multiple completed seasons successfully integration","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"failed","title":"should process multiple completed seasons successfully integration"},{"ancestorTitles":["WinnerDeterminationService Integration Tests","determineWinnersForCompletedSeasons"],"duration":1222,"failureDetails":[],"failureMessages":[],"fullName":"WinnerDeterminationService Integration Tests determineWinnersForCompletedSeasons should return empty array when no completed seasons found integration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array when no completed seasons found integration"},{"ancestorTitles":["WinnerDeterminationService Integration Tests","determineWinnersForCompletedSeasons"],"duration":1728,"failureDetails":[{}],"failureMessages":["Error: Failed to create test profiles: Failed to create test profiles: insert or update on table \"profiles\" violates foreign key constraint \"profiles_id_fkey\"\n    at createTestProfiles (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:652:11)\n    at setupStandingsTestData (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/winnerDeterminationService.test.ts:54:5)\n    at Object.<anonymous> (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/winnerDeterminationService.test.ts:353:7)"],"fullName":"WinnerDeterminationService Integration Tests determineWinnersForCompletedSeasons should handle individual season processing errors and continue with others integration","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle individual season processing errors and continue with others integration"}],"endTime":1752737037232,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mWinnerDeterminationService Integration Tests › determineSeasonWinners › should return existing winners if already determined integration\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32mtrue\u001b[39m\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 136 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m service\u001b[33m.\u001b[39mdetermineSeasonWinners(seasonId)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 137 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 138 |\u001b[39m       expect(result\u001b[33m.\u001b[39misSeasonAlreadyDetermined)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 139 |\u001b[39m       expect(result\u001b[33m.\u001b[39mwinners)\u001b[33m.\u001b[39mtoHaveLength(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 140 |\u001b[39m       expect(result\u001b[33m.\u001b[39mwinners[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39muser_id)\u001b[33m.\u001b[39mtoBe(actualUserId)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 141 |\u001b[39m       expect(result\u001b[33m.\u001b[39mwinners[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39mtotal_points)\u001b[33m.\u001b[39mtoBe(\u001b[35m120\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/services/winnerDeterminationService.test.ts\u001b[39m\u001b[0m\u001b[2m:138:48)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mWinnerDeterminationService Integration Tests › determineSeasonWinners › should determine single winner successfully integration\u001b[39m\u001b[22m\n\n    No betting round found in test data\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 60 |\u001b[39m     \u001b[90m// We need to create fixtures first, then bets\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 61 |\u001b[39m     \u001b[36mconst\u001b[39m { data\u001b[33m:\u001b[39m round } \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m client\u001b[33m.\u001b[39m\u001b[36mfrom\u001b[39m(\u001b[32m'betting_rounds'\u001b[39m)\u001b[33m.\u001b[39mselect(\u001b[32m'id'\u001b[39m)\u001b[33m.\u001b[39mlimit(\u001b[35m1\u001b[39m)\u001b[33m.\u001b[39msingle()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 62 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mround) \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m'No betting round found in test data'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                       \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 63 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 64 |\u001b[39m     \u001b[36mconst\u001b[39m { data\u001b[33m:\u001b[39m fixtures } \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m client\u001b[33m.\u001b[39m\u001b[36mfrom\u001b[39m(\u001b[32m'fixtures'\u001b[39m)\u001b[33m.\u001b[39mselect(\u001b[32m'id'\u001b[39m)\u001b[33m.\u001b[39mlimit(\u001b[35m3\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 65 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mfixtures \u001b[33m||\u001b[39m fixtures\u001b[33m.\u001b[39mlength \u001b[33m<\u001b[39m \u001b[35m3\u001b[39m) \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m'Not enough fixtures in test data'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat setupStandingsTestData (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/services/winnerDeterminationService.test.ts\u001b[39m\u001b[0m\u001b[2m:62:23)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/services/winnerDeterminationService.test.ts\u001b[39m\u001b[0m\u001b[2m:147:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mWinnerDeterminationService Integration Tests › determineSeasonWinners › should handle tied winners correctly integration\u001b[39m\u001b[22m\n\n    Failed to seed test data: Failed to seed rounds: insert or update on table \"rounds\" violates foreign key constraint \"rounds_season_id_fkey\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 461 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 462 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Seeding failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 463 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to seed test data: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 464 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 465 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 466 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat seedTestData (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:463:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:694:9\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mWinnerDeterminationService Integration Tests › determineSeasonWinners › should handle season with existing winners that have null profile names integration\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32mtrue\u001b[39m\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 277 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m service\u001b[33m.\u001b[39mdetermineSeasonWinners(seasonId)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 278 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 279 |\u001b[39m       expect(result\u001b[33m.\u001b[39misSeasonAlreadyDetermined)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 280 |\u001b[39m       expect(result\u001b[33m.\u001b[39mwinners[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39musername)\u001b[33m.\u001b[39mtoBeUndefined()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 281 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 282 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/services/winnerDeterminationService.test.ts\u001b[39m\u001b[0m\u001b[2m:279:48)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mWinnerDeterminationService Integration Tests › determineWinnersForCompletedSeasons › should process multiple completed seasons successfully integration\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveLength\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected length: \u001b[32m1\u001b[39m\n    Received length: \u001b[31m7\u001b[39m\n    Received array:  \u001b[31m[{\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"64014d1d-3af2-410a-9af6-b15e03a0d36f\", \"username\": \"Test User 2\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"6f7e4bc7-691b-47d0-9e1d-9abb676431b1\", \"username\": \"Test User 3\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"8b411628-7754-48d0-9a14-8670f54251ac\", \"username\": \"Test User 1\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"a35adb89-dae9-4647-881d-b0cde296c75f\", \"username\": \"Charlie\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"a4f7ed5c-8192-4c2a-b05a-b8f01e75fb53\", \"username\": \"Alice\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"cda9b5cb-948f-44d1-8160-b4290baf3708\", \"username\": \"Bob\"}, {\"dynamic_points\": 0, \"game_points\": 0, \"is_tied\": true, \"rank\": 1, \"total_points\": 0, \"user_id\": \"fcf6cc9c-5758-422d-9aab-726db9347d6a\", \"username\": \"Diana\"}]\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 314 |\u001b[39m       expect(results[\u001b[35m1\u001b[39m]\u001b[33m.\u001b[39mseasonId)\u001b[33m.\u001b[39mtoBe(\u001b[35m2\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 315 |\u001b[39m       expect(results[\u001b[35m1\u001b[39m]\u001b[33m.\u001b[39merrors)\u001b[33m.\u001b[39mtoHaveLength(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m \u001b[90m// No error because global standings are returned\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 316 |\u001b[39m       expect(results[\u001b[35m1\u001b[39m]\u001b[33m.\u001b[39mwinners)\u001b[33m.\u001b[39mtoHaveLength(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m \u001b[90m// Same winner as Season 1\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 317 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 318 |\u001b[39m       \u001b[90m// Verify winners were inserted for both seasons (since both get the same global standings)\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 319 |\u001b[39m       \u001b[36mconst\u001b[39m { data\u001b[33m:\u001b[39m allWinners } \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m client\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toHaveLength (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/services/winnerDeterminationService.test.ts\u001b[39m\u001b[0m\u001b[2m:316:34)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mWinnerDeterminationService Integration Tests › determineWinnersForCompletedSeasons › should handle individual season processing errors and continue with others integration\u001b[39m\u001b[22m\n\n    Failed to create test profiles: Failed to create test profiles: insert or update on table \"profiles\" violates foreign key constraint \"profiles_id_fkey\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 650 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 651 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Profile creation failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 652 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to create test profiles: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 653 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 654 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 655 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createTestProfiles (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:652:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat setupStandingsTestData (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/services/winnerDeterminationService.test.ts\u001b[39m\u001b[0m\u001b[2m:54:5)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/services/winnerDeterminationService.test.ts\u001b[39m\u001b[0m\u001b[2m:353:7)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/winnerDeterminationService.test.ts","startTime":1752737020877,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","calculateCupStandings"],"duration":2237,"failureDetails":[{}],"failureMessages":["Error: Failed to create test profiles: Failed to create test profiles: insert or update on table \"profiles\" violates foreign key constraint \"profiles_id_fkey\"\n    at createTestProfiles (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:652:11)\n    at setupCupStandingsTestData (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/cup/__tests__/cupWinnerDeterminationService.test.ts:55:5)\n    at Object.<anonymous> (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/cup/__tests__/cupWinnerDeterminationService.test.ts:98:28)"],"fullName":"CupWinnerDeterminationService Integration Tests calculateCupStandings should calculate standings with proper ranking and tie handling","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should calculate standings with proper ranking and tie handling"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","calculateCupStandings"],"duration":1644,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests calculateCupStandings should handle no participants scenario","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle no participants scenario"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","calculateCupStandings"],"duration":1146,"failureDetails":[{}],"failureMessages":["Error: Failed to seed test data: Failed to seed betting round fixtures: insert or update on table \"betting_round_fixtures\" violates foreign key constraint \"betting_round_fixtures_fixture_id_fkey\"\n    at seedTestData (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:463:11)\n    at /Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:694:9"],"fullName":"CupWinnerDeterminationService Integration Tests calculateCupStandings should handle invalid season ID gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle invalid season ID gracefully"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","calculateCupStandings"],"duration":2187,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveLength\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected length: \u001b[32m1\u001b[39m\nReceived length: \u001b[31m0\u001b[39m\nReceived array:  \u001b[31m[]\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveLength\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected length: \u001b[32m1\u001b[39m\nReceived length: \u001b[31m0\u001b[39m\nReceived array:  \u001b[31m[]\u001b[39m\n    at Object.toHaveLength (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/cup/__tests__/cupWinnerDeterminationService.test.ts:165:32)"],"fullName":"CupWinnerDeterminationService Integration Tests calculateCupStandings should handle null points values","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle null points values"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","calculateCupStandings"],"duration":1418,"failureDetails":[{}],"failureMessages":["Error: Failed to create test profiles: Failed to create test profiles: insert or update on table \"profiles\" violates foreign key constraint \"profiles_id_fkey\"\n    at createTestProfiles (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:652:11)\n    at Object.<anonymous> (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/cup/__tests__/cupWinnerDeterminationService.test.ts:173:7)"],"fullName":"CupWinnerDeterminationService Integration Tests calculateCupStandings should handle missing profile information","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle missing profile information"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","calculateCupStandings"],"duration":855,"failureDetails":[{}],"failureMessages":["Error: Failed to create test profiles: Failed to create test profiles: insert or update on table \"profiles\" violates foreign key constraint \"profiles_id_fkey\"\n    at createTestProfiles (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:652:11)\n    at Object.<anonymous> (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/cup/__tests__/cupWinnerDeterminationService.test.ts:200:7)"],"fullName":"CupWinnerDeterminationService Integration Tests calculateCupStandings should sort users with same points consistently by username","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should sort users with same points consistently by username"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","identifyWinners"],"duration":351,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests identifyWinners should identify single winner correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should identify single winner correctly"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","identifyWinners"],"duration":256,"failureDetails":[{}],"failureMessages":["Error: Failed to seed test data: Failed to seed seasons: insert or update on table \"seasons\" violates foreign key constraint \"seasons_competition_id_fkey\"\n    at seedTestData (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:463:11)\n    at /Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:694:9"],"fullName":"CupWinnerDeterminationService Integration Tests identifyWinners should identify multiple tied winners","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should identify multiple tied winners"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","identifyWinners"],"duration":745,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests identifyWinners should handle empty standings","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty standings"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","identifyWinners"],"duration":280,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests identifyWinners should handle standings with no rank 1 users","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle standings with no rank 1 users"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","identifyWinners"],"duration":682,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests identifyWinners should respect numberOfWinners parameter but include all tied users","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should respect numberOfWinners parameter but include all tied users"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","determineCupWinners"],"duration":824,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests determineCupWinners should return existing winners if already determined (idempotency)","invocations":1,"location":null,"numPassingAsserts":11,"retryReasons":[],"status":"passed","title":"should return existing winners if already determined (idempotency)"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","determineCupWinners"],"duration":1249,"failureDetails":[{}],"failureMessages":["Error: Failed to create test profiles: Failed to create test profiles: insert or update on table \"profiles\" violates foreign key constraint \"profiles_id_fkey\"\n    at createTestProfiles (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:652:11)\n    at setupCupStandingsTestData (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/cup/__tests__/cupWinnerDeterminationService.test.ts:55:5)\n    at Object.<anonymous> (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/cup/__tests__/cupWinnerDeterminationService.test.ts:324:28)"],"fullName":"CupWinnerDeterminationService Integration Tests determineCupWinners should determine new winners successfully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should determine new winners successfully"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","determineCupWinners"],"duration":711,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests determineCupWinners should handle no participants scenario (edge case)","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle no participants scenario (edge case)"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","determineCupWinners"],"duration":1655,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests determineCupWinners should handle database error during winner recording","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle database error during winner recording"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","determineCupWinners"],"duration":865,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests determineCupWinners should handle all zero scores scenario (edge case)","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should handle all zero scores scenario (edge case)"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","determineCupWinnersForCompletedSeasons"],"duration":1006,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests determineCupWinnersForCompletedSeasons should process multiple eligible seasons","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should process multiple eligible seasons"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","determineCupWinnersForCompletedSeasons"],"duration":486,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests determineCupWinnersForCompletedSeasons should handle no eligible seasons","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle no eligible seasons"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","determineCupWinnersForCompletedSeasons"],"duration":758,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests determineCupWinnersForCompletedSeasons should skip seasons that already have winners","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should skip seasons that already have winners"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","determineCupWinnersForCompletedSeasons"],"duration":493,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests determineCupWinnersForCompletedSeasons should handle database error fetching eligible seasons","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database error fetching eligible seasons"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","determineCupWinnersForCompletedSeasons"],"duration":788,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests determineCupWinnersForCompletedSeasons should continue processing other seasons if one fails","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should continue processing other seasons if one fails"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","Integration Scenarios"],"duration":1110,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests Integration Scenarios should handle complex tie scenarios correctly","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should handle complex tie scenarios correctly"},{"ancestorTitles":["CupWinnerDeterminationService Integration Tests","Integration Scenarios"],"duration":1005,"failureDetails":[],"failureMessages":[],"fullName":"CupWinnerDeterminationService Integration Tests Integration Scenarios should maintain data consistency across standings calculation and winner determination","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should maintain data consistency across standings calculation and winner determination"}],"endTime":1752737044352,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCupWinnerDeterminationService Integration Tests › calculateCupStandings › should calculate standings with proper ranking and tie handling\u001b[39m\u001b[22m\n\n    Failed to create test profiles: Failed to create test profiles: insert or update on table \"profiles\" violates foreign key constraint \"profiles_id_fkey\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 650 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 651 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Profile creation failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 652 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to create test profiles: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 653 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 654 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 655 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createTestProfiles (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:652:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat setupCupStandingsTestData (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/services/cup/__tests__/cupWinnerDeterminationService.test.ts\u001b[39m\u001b[0m\u001b[2m:55:5)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/services/cup/__tests__/cupWinnerDeterminationService.test.ts\u001b[39m\u001b[0m\u001b[2m:98:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCupWinnerDeterminationService Integration Tests › calculateCupStandings › should handle invalid season ID gracefully\u001b[39m\u001b[22m\n\n    Failed to seed test data: Failed to seed betting round fixtures: insert or update on table \"betting_round_fixtures\" violates foreign key constraint \"betting_round_fixtures_fixture_id_fkey\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 461 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 462 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Seeding failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 463 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to seed test data: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 464 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 465 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 466 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat seedTestData (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:463:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:694:9\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCupWinnerDeterminationService Integration Tests › calculateCupStandings › should handle null points values\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveLength\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected length: \u001b[32m1\u001b[39m\n    Received length: \u001b[31m0\u001b[39m\n    Received array:  \u001b[31m[]\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 163 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m service\u001b[33m.\u001b[39mcalculateCupStandings(seasonId)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 164 |\u001b[39m       \u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 165 |\u001b[39m       expect(result\u001b[33m.\u001b[39mstandings)\u001b[33m.\u001b[39mtoHaveLength(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 166 |\u001b[39m       expect(result\u001b[33m.\u001b[39mstandings[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39mtotal_points)\u001b[33m.\u001b[39mtoBe(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 167 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 168 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toHaveLength (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/services/cup/__tests__/cupWinnerDeterminationService.test.ts\u001b[39m\u001b[0m\u001b[2m:165:32)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCupWinnerDeterminationService Integration Tests › calculateCupStandings › should handle missing profile information\u001b[39m\u001b[22m\n\n    Failed to create test profiles: Failed to create test profiles: insert or update on table \"profiles\" violates foreign key constraint \"profiles_id_fkey\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 650 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 651 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Profile creation failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 652 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to create test profiles: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 653 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 654 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 655 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createTestProfiles (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:652:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/services/cup/__tests__/cupWinnerDeterminationService.test.ts\u001b[39m\u001b[0m\u001b[2m:173:7)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCupWinnerDeterminationService Integration Tests › calculateCupStandings › should sort users with same points consistently by username\u001b[39m\u001b[22m\n\n    Failed to create test profiles: Failed to create test profiles: insert or update on table \"profiles\" violates foreign key constraint \"profiles_id_fkey\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 650 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 651 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Profile creation failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 652 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to create test profiles: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 653 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 654 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 655 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createTestProfiles (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:652:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/services/cup/__tests__/cupWinnerDeterminationService.test.ts\u001b[39m\u001b[0m\u001b[2m:200:7)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCupWinnerDeterminationService Integration Tests › identifyWinners › should identify multiple tied winners\u001b[39m\u001b[22m\n\n    Failed to seed test data: Failed to seed seasons: insert or update on table \"seasons\" violates foreign key constraint \"seasons_competition_id_fkey\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 461 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 462 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Seeding failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 463 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to seed test data: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 464 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 465 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 466 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat seedTestData (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:463:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:694:9\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCupWinnerDeterminationService Integration Tests › determineCupWinners › should determine new winners successfully\u001b[39m\u001b[22m\n\n    Failed to create test profiles: Failed to create test profiles: insert or update on table \"profiles\" violates foreign key constraint \"profiles_id_fkey\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 650 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 651 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Profile creation failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 652 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to create test profiles: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 653 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 654 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 655 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createTestProfiles (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:652:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat setupCupStandingsTestData (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/services/cup/__tests__/cupWinnerDeterminationService.test.ts\u001b[39m\u001b[0m\u001b[2m:55:5)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/services/cup/__tests__/cupWinnerDeterminationService.test.ts\u001b[39m\u001b[0m\u001b[2m:324:28)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/services/cup/__tests__/cupWinnerDeterminationService.test.ts","startTime":1752737020797,"status":"failed","summary":""}],"wasInterrupted":false}
