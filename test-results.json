{"numFailedTestSuites":3,"numFailedTests":3,"numPassedTestSuites":10,"numPassedTests":114,"numPendingTestSuites":2,"numPendingTests":33,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":15,"numTotalTests":150,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1752662063387,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Authentication"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Authentication should reject requests without authentication","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should reject requests without authentication"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Authentication"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Authentication should accept Bearer token authentication","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should accept Bearer token authentication"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Authentication"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Authentication should accept X-Cron-Secret header authentication","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should accept X-Cron-Secret header authentication"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Authentication"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Authentication should reject invalid authentication tokens","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should reject invalid authentication tokens"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Authentication"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Authentication should handle missing CRON_SECRET configuration","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle missing CRON_SECRET configuration"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","GET /api/admin/hall-of-fame"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API GET /api/admin/hall-of-fame should return Hall of Fame data with default parameters","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should return Hall of Fame data with default parameters"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","GET /api/admin/hall-of-fame"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API GET /api/admin/hall-of-fame should handle filters correctly","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle filters correctly"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","GET /api/admin/hall-of-fame"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API GET /api/admin/hall-of-fame should enforce maximum limit","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should enforce maximum limit"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","POST /api/admin/hall-of-fame"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API POST /api/admin/hall-of-fame should create a new Hall of Fame entry","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should create a new Hall of Fame entry"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","POST /api/admin/hall-of-fame"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API POST /api/admin/hall-of-fame should update existing winner when override_existing is true","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should update existing winner when override_existing is true"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","POST /api/admin/hall-of-fame"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API POST /api/admin/hall-of-fame should reject when winner already exists without override","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should reject when winner already exists without override"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","POST /api/admin/hall-of-fame"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API POST /api/admin/hall-of-fame should validate required fields","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should validate required fields"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","POST /api/admin/hall-of-fame"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API POST /api/admin/hall-of-fame should handle non-existent season","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle non-existent season"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","POST /api/admin/hall-of-fame"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API POST /api/admin/hall-of-fame should handle non-existent user","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle non-existent user"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","DELETE /api/admin/hall-of-fame"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API DELETE /api/admin/hall-of-fame should delete winner by winner_id","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should delete winner by winner_id"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","DELETE /api/admin/hall-of-fame"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API DELETE /api/admin/hall-of-fame should delete winner by season_id","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should delete winner by season_id"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","DELETE /api/admin/hall-of-fame"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API DELETE /api/admin/hall-of-fame should require either winner_id or season_id","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should require either winner_id or season_id"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","DELETE /api/admin/hall-of-fame"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API DELETE /api/admin/hall-of-fame should handle non-existent winner","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle non-existent winner"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","DELETE /api/admin/hall-of-fame"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API DELETE /api/admin/hall-of-fame should handle delete errors","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle delete errors"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Error handling"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Error handling should handle database errors in GET","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle database errors in GET"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Error handling"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Error handling should handle unexpected errors","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle unexpected errors"},{"ancestorTitles":["/api/admin/hall-of-fame - Admin Hall of Fame Management API","Logging"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/admin/hall-of-fame - Admin Hall of Fame Management API Logging should log successful operations","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should log successful operations"}],"coverage":{},"endTime":1752662067513,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/admin/hall-of-fame/route.test.ts","startTime":1752662067513,"status":"skipped","summary":""},{"assertionResults":[{"ancestorTitles":["GET /api/players"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 200 OK with players on valid request","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return 200 OK with players on valid request"},{"ancestorTitles":["GET /api/players"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 400 Bad Request if league parameter is missing","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if league parameter is missing"},{"ancestorTitles":["GET /api/players"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 400 Bad Request if season parameter is missing","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if season parameter is missing"},{"ancestorTitles":["GET /api/players"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 400 Bad Request if league parameter is not a number","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if league parameter is not a number"},{"ancestorTitles":["GET /api/players"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 400 Bad Request if season parameter is not a number","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if season parameter is not a number"},{"ancestorTitles":["GET /api/players"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 404 Not Found if season is not found in DB","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 404 Not Found if season is not found in DB"},{"ancestorTitles":["GET /api/players"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 500 Internal Server Error if findSeasonId query fails","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 500 Internal Server Error if findSeasonId query fails"},{"ancestorTitles":["GET /api/players"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 500 Internal Server Error if getPlayersForSeason query fails","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 500 Internal Server Error if getPlayersForSeason query fails"},{"ancestorTitles":["GET /api/players"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/players should return 200 OK with an empty array if no players are found","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 200 OK with an empty array if no players are found"}],"endTime":1752662064892,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/players/route.test.ts","startTime":1752662064316,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/standings","GET","when cup is not active"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET when cup is not active should return league standings with inactive cup status","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return league standings with inactive cup status"},{"ancestorTitles":["/api/standings","GET","when cup is not active"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET when cup is not active should include proper cache headers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include proper cache headers"},{"ancestorTitles":["/api/standings","GET","when cup is active"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET when cup is active should return both league and cup standings","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return both league and cup standings"},{"ancestorTitles":["/api/standings","GET","when cup is active"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET when cup is active should handle cup standings fetch failure gracefully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle cup standings fetch failure gracefully"},{"ancestorTitles":["/api/standings","GET","when no current season exists"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET when no current season exists should return league standings with null season info","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return league standings with null season info"},{"ancestorTitles":["/api/standings","GET","error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET error handling should return 500 when league standings calculation fails","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 500 when league standings calculation fails"},{"ancestorTitles":["/api/standings","GET","error handling"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET error handling should return 500 when league standings service throws","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 500 when league standings service throws"},{"ancestorTitles":["/api/standings","GET","error handling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET error handling should continue with league standings when cup status check fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should continue with league standings when cup status check fails"},{"ancestorTitles":["/api/standings","GET","performance logging"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET performance logging should log processing time and participant counts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log processing time and participant counts"},{"ancestorTitles":["/api/standings","GET","backward compatibility"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET backward compatibility should always include league_standings field for existing clients","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should always include league_standings field for existing clients"},{"ancestorTitles":["/api/standings","GET","backward compatibility"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/standings GET backward compatibility should maintain the same league standings data structure","invocations":1,"location":null,"numPassingAsserts":12,"retryReasons":[],"status":"passed","title":"should maintain the same league standings data structure"}],"endTime":1752662064943,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/standings/route.test.ts","startTime":1752662064339,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should return cup standings with default pagination","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should return cup standings with default pagination"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should return cup standings with custom pagination","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should return cup standings with custom pagination"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should handle custom sorting by points descending","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle custom sorting by points descending"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should handle specific season filter","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle specific season filter"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should return empty results when no standings data exists","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should return empty results when no standings data exists"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should handle profile fetch errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle profile fetch errors gracefully"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should handle invalid sort parameter","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle invalid sort parameter"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should handle cup scoring service errors","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle cup scoring service errors"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should include proper cache headers","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should include proper cache headers"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should validate pagination limits","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should validate pagination limits"},{"ancestorTitles":["/api/last-round-special/standings - Cup Standings API","GET /api/last-round-special/standings"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"/api/last-round-special/standings - Cup Standings API GET /api/last-round-special/standings should include metadata and query info in response","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should include metadata and query info in response"}],"coverage":{},"endTime":1752662067513,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/last-round-special/standings/route.test.ts","startTime":1752662067513,"status":"skipped","summary":""},{"assertionResults":[{"ancestorTitles":["GET /api/teams"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 200 OK with teams on valid request","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"should return 200 OK with teams on valid request"},{"ancestorTitles":["GET /api/teams"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 400 Bad Request if league parameter is missing","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if league parameter is missing"},{"ancestorTitles":["GET /api/teams"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 400 Bad Request if season parameter is missing","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if season parameter is missing"},{"ancestorTitles":["GET /api/teams"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 400 Bad Request if league parameter is not a number","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if league parameter is not a number"},{"ancestorTitles":["GET /api/teams"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 400 Bad Request if season parameter is not a number","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if season parameter is not a number"},{"ancestorTitles":["GET /api/teams"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 404 Not Found if season is not found in DB","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 404 Not Found if season is not found in DB"},{"ancestorTitles":["GET /api/teams"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 500 Internal Server Error if findSeasonId query fails","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 500 Internal Server Error if findSeasonId query fails"},{"ancestorTitles":["GET /api/teams"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 500 Internal Server Error if getTeamsForSeason query fails","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return 500 Internal Server Error if getTeamsForSeason query fails"},{"ancestorTitles":["GET /api/teams"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/teams should return 200 OK with an empty array if no teams are found","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return 200 OK with an empty array if no teams are found"}],"endTime":1752662065084,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/teams/route.test.ts","startTime":1752662064930,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/cron/cup-activation","Authentication"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Authentication should reject requests without CRON_SECRET environment variable","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should reject requests without CRON_SECRET environment variable"},{"ancestorTitles":["/api/cron/cup-activation","Authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Authentication should reject requests without authorization","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should reject requests without authorization"},{"ancestorTitles":["/api/cron/cup-activation","Authentication"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Authentication should reject requests with invalid authorization header","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should reject requests with invalid authorization header"},{"ancestorTitles":["/api/cron/cup-activation","Authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Authentication should accept requests with valid authorization header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept requests with valid authorization header"},{"ancestorTitles":["/api/cron/cup-activation","Authentication"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Authentication should accept requests with valid x-cron-secret header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept requests with valid x-cron-secret header"},{"ancestorTitles":["/api/cron/cup-activation","Successful execution"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Successful execution should handle successful detection with no activation needed","invocations":1,"location":null,"numPassingAsserts":13,"retryReasons":[],"status":"passed","title":"should handle successful detection with no activation needed"},{"ancestorTitles":["/api/cron/cup-activation","Successful execution"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Successful execution should handle successful detection with cup activation","invocations":1,"location":null,"numPassingAsserts":11,"retryReasons":[],"status":"passed","title":"should handle successful detection with cup activation"},{"ancestorTitles":["/api/cron/cup-activation","Successful execution"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Successful execution should handle cache revalidation errors gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle cache revalidation errors gracefully"},{"ancestorTitles":["/api/cron/cup-activation","Error handling"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Error handling should handle detection service failures","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should handle detection service failures"},{"ancestorTitles":["/api/cron/cup-activation","Error handling"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Error handling should handle critical exceptions","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle critical exceptions"},{"ancestorTitles":["/api/cron/cup-activation","Performance and monitoring"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Performance and monitoring should track performance metrics","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should track performance metrics"},{"ancestorTitles":["/api/cron/cup-activation","Performance and monitoring"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Performance and monitoring should start and complete cron execution tracking","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should start and complete cron execution tracking"},{"ancestorTitles":["/api/cron/cup-activation","Performance and monitoring"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/cup-activation Performance and monitoring should log comprehensive execution details","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should log comprehensive execution details"}],"endTime":1752662065134,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/cron/cup-activation/route.test.ts","startTime":1752662064968,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/hall-of-fame/stats - Hall of Fame Statistics API","Successful requests"],"duration":542,"failureDetails":[{}],"failureMessages":["Error: Failed to seed test data: Failed to seed rounds: insert or update on table \"rounds\" violates foreign key constraint \"rounds_season_id_fkey\"\n    at seedTestData (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:415:11)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/hall-of-fame/stats/route.test.ts:20:5)"],"fullName":"/api/hall-of-fame/stats - Hall of Fame Statistics API Successful requests should return aggregated stats with default parameters","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return aggregated stats with default parameters"}],"endTime":1752662065172,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/hall-of-fame/stats - Hall of Fame Statistics API › Successful requests › should return aggregated stats with default parameters\u001b[39m\u001b[22m\n\n    Failed to seed test data: Failed to seed rounds: insert or update on table \"rounds\" violates foreign key constraint \"rounds_season_id_fkey\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 413 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 414 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Seeding failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 415 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to seed test data: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 416 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 417 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 418 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat seedTestData (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:415:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/hall-of-fame/stats/route.test.ts\u001b[39m\u001b[0m\u001b[2m:20:5)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/hall-of-fame/stats/route.test.ts","startTime":1752662063866,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/cron/winner-determination","Authentication"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Authentication should reject requests without CRON_SECRET environment variable","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject requests without CRON_SECRET environment variable"},{"ancestorTitles":["/api/cron/winner-determination","Authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Authentication should reject requests without CRON_SECRET","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject requests without CRON_SECRET"},{"ancestorTitles":["/api/cron/winner-determination","Authentication"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Authentication should reject requests with invalid CRON_SECRET","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject requests with invalid CRON_SECRET"},{"ancestorTitles":["/api/cron/winner-determination","Authentication"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Authentication should accept requests with valid Bearer token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept requests with valid Bearer token"},{"ancestorTitles":["/api/cron/winner-determination","Authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Authentication should accept requests with valid X-Cron-Secret header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept requests with valid X-Cron-Secret header"},{"ancestorTitles":["/api/cron/winner-determination","Winner determination processing"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Winner determination processing should handle successful processing with no seasons to process","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle successful processing with no seasons to process"},{"ancestorTitles":["/api/cron/winner-determination","Winner determination processing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Winner determination processing should handle successful processing with new winners determined","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle successful processing with new winners determined"},{"ancestorTitles":["/api/cron/winner-determination","Winner determination processing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Winner determination processing should handle processing with already determined seasons","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle processing with already determined seasons"},{"ancestorTitles":["/api/cron/winner-determination","Winner determination processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Winner determination processing should handle processing with some errors but still succeed","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle processing with some errors but still succeed"},{"ancestorTitles":["/api/cron/winner-determination","Winner determination processing"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Winner determination processing should handle processing with only errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle processing with only errors"},{"ancestorTitles":["/api/cron/winner-determination","Winner determination processing"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Winner determination processing should handle service throwing an error","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle service throwing an error"},{"ancestorTitles":["/api/cron/winner-determination","Winner determination processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Winner determination processing should handle cache revalidation errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle cache revalidation errors gracefully"},{"ancestorTitles":["/api/cron/winner-determination","Response format"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Response format should include all required fields in successful response","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include all required fields in successful response"},{"ancestorTitles":["/api/cron/winner-determination","Response format"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Response format should include all required fields in error response","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include all required fields in error response"},{"ancestorTitles":["/api/cron/winner-determination","Response format"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/winner-determination Response format should only include detailed_errors when there are errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should only include detailed_errors when there are errors"}],"endTime":1752662065172,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/cron/winner-determination/route.test.ts","startTime":1752662064984,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/cron/season-completion","Authentication"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Authentication should reject requests without CRON_SECRET","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject requests without CRON_SECRET"},{"ancestorTitles":["/api/cron/season-completion","Authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Authentication should reject requests with invalid CRON_SECRET","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject requests with invalid CRON_SECRET"},{"ancestorTitles":["/api/cron/season-completion","Authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Authentication should accept requests with valid Bearer token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept requests with valid Bearer token"},{"ancestorTitles":["/api/cron/season-completion","Authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Authentication should accept requests with valid X-Cron-Secret header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept requests with valid X-Cron-Secret header"},{"ancestorTitles":["/api/cron/season-completion","Season completion detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Season completion detection should handle successful detection with no completed seasons","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle successful detection with no completed seasons"},{"ancestorTitles":["/api/cron/season-completion","Season completion detection"],"duration":64,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Season completion detection should handle successful detection with completed seasons","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle successful detection with completed seasons"},{"ancestorTitles":["/api/cron/season-completion","Season completion detection"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Season completion detection should handle detection with errors but still succeed if some seasons completed","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle detection with errors but still succeed if some seasons completed"},{"ancestorTitles":["/api/cron/season-completion","Season completion detection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Season completion detection should handle detection with only errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle detection with only errors"},{"ancestorTitles":["/api/cron/season-completion","Season completion detection"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Season completion detection should handle service throwing an error","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle service throwing an error"},{"ancestorTitles":["/api/cron/season-completion","Season completion detection"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Season completion detection should handle winner determination errors without failing season completion","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle winner determination errors without failing season completion"},{"ancestorTitles":["/api/cron/season-completion","Response format"],"duration":44,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Response format should include all required fields in successful response","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include all required fields in successful response"},{"ancestorTitles":["/api/cron/season-completion","Response format"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/cron/season-completion Response format should include all required fields in error response","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include all required fields in error response"}],"endTime":1752662065262,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/cron/season-completion/route.test.ts","startTime":1752662064908,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["POST /api/season-answers"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 200 OK on successful submission of season answers","invocations":1,"location":null,"numPassingAsserts":12,"retryReasons":[],"status":"passed","title":"should return 200 OK on successful submission of season answers"},{"ancestorTitles":["POST /api/season-answers"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 401 Unauthorized if user is not authenticated","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return 401 Unauthorized if user is not authenticated"},{"ancestorTitles":["POST /api/season-answers"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 401 Unauthorized if there is an authentication error","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return 401 Unauthorized if there is an authentication error"},{"ancestorTitles":["POST /api/season-answers"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 400 Bad Request if request body is not a valid array","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if request body is not a valid array"},{"ancestorTitles":["POST /api/season-answers"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 400 Bad Request if request body is an empty array","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if request body is an empty array"},{"ancestorTitles":["POST /api/season-answers"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 400 Bad Request if any required fields are missing","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if any required fields are missing"},{"ancestorTitles":["POST /api/season-answers"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 500 Internal Server Error if there is a database error during upsert","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return 500 Internal Server Error if there is a database error during upsert"},{"ancestorTitles":["POST /api/season-answers"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should return 500 Internal Server Error if an unexpected error occurs","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return 500 Internal Server Error if an unexpected error occurs"},{"ancestorTitles":["POST /api/season-answers"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/season-answers should handle different question types correctly","invocations":1,"location":null,"numPassingAsserts":11,"retryReasons":[],"status":"passed","title":"should handle different question types correctly"}],"endTime":1752662065302,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/season-answers/route.test.ts","startTime":1752662065115,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["GET /api/fixtures"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/fixtures should return 200 OK with fixtures on valid request","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 200 OK with fixtures on valid request"},{"ancestorTitles":["GET /api/fixtures"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/fixtures should return 400 Bad Request if league parameter is missing","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if league parameter is missing"},{"ancestorTitles":["GET /api/fixtures"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/fixtures should return 400 Bad Request if season parameter is missing","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if season parameter is missing"},{"ancestorTitles":["GET /api/fixtures"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/fixtures should return 400 Bad Request if round parameter is missing","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if round parameter is missing"},{"ancestorTitles":["GET /api/fixtures"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/fixtures should return 500 Internal Server Error if database query fails","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 500 Internal Server Error if database query fails"},{"ancestorTitles":["GET /api/fixtures"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/fixtures should return 200 OK with an empty array if no fixtures are found","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return 200 OK with an empty array if no fixtures are found"}],"endTime":1752662065318,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/fixtures/route.test.ts","startTime":1752662065198,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Successful requests"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Successful requests should return season winner data for valid season ID","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return season winner data for valid season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Successful requests"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Successful requests should handle string season ID correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle string season ID correctly"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Successful requests"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Successful requests should return correct data structure","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return correct data structure"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Error handling should return 400 for invalid season ID","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 for invalid season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Error handling should return 400 for negative season ID","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 for negative season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Error handling should return 400 for zero season ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for zero season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Error handling should return 404 when season winner not found","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 404 when season winner not found"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Error handling should handle database errors","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle database errors"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Error handling should handle unexpected errors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle unexpected errors"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Edge cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Edge cases should handle very large season IDs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle very large season IDs"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Edge cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Edge cases should handle floating point season IDs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle floating point season IDs"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Edge cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Edge cases should handle empty season ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Logging"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Logging should log successful requests","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should log successful requests"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Logging"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Logging should log failed requests","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log failed requests"},{"ancestorTitles":["/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API","Database query structure"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id] - Season-specific Hall of Fame API Database query structure should use correct select query with all required joins","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should use correct select query with all required joins"}],"endTime":1752662065403,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/hall-of-fame/season/[id]/route.test.ts","startTime":1752662065142,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return complete season data with both league and cup winners","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should return complete season data with both league and cup winners"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return season with only league winner when cup was not activated","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return season with only league winner when cup was not activated"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return season with no winners when season is not completed","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return season with no winners when season is not completed"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should handle legacy data without competition_type correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle legacy data without competition_type correctly"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return 400 for invalid season ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for invalid season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return 400 for floating point season ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for floating point season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return 400 for negative season ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for negative season ID"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return 404 when season does not exist","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 404 when season does not exist"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return 500 on database error for season fetch","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 500 on database error for season fetch"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should return 500 on database error for winners fetch","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 500 on database error for winners fetch"},{"ancestorTitles":["/api/hall-of-fame/season/[id]/complete","GET /api/hall-of-fame/season/[id]/complete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"/api/hall-of-fame/season/[id]/complete GET /api/hall-of-fame/season/[id]/complete should include proper caching headers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include proper caching headers"}],"endTime":1752662065542,"message":"","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/hall-of-fame/season/[id]/complete/route.test.ts","startTime":1752662065446,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/hall-of-fame - Main Hall of Fame API","Successful requests"],"duration":1074,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveLength\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected length: \u001b[32m2\u001b[39m\nReceived length: \u001b[31m0\u001b[39m\nReceived array:  \u001b[31m[]\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveLength\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected length: \u001b[32m2\u001b[39m\nReceived length: \u001b[31m0\u001b[39m\nReceived array:  \u001b[31m[]\u001b[39m\n    at Object.toHaveLength (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/hall-of-fame/route.test.ts:48:25)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/hall-of-fame - Main Hall of Fame API Successful requests should return Hall of Fame data with default parameters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return Hall of Fame data with default parameters"}],"endTime":1752662065707,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m/api/hall-of-fame - Main Hall of Fame API › Successful requests › should return Hall of Fame data with default parameters\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveLength\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected length: \u001b[32m2\u001b[39m\n    Received length: \u001b[31m0\u001b[39m\n    Received array:  \u001b[31m[]\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 46 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 47 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 48 |\u001b[39m       expect(data\u001b[33m.\u001b[39mdata)\u001b[33m.\u001b[39mtoHaveLength(\u001b[35m2\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 49 |\u001b[39m       expect(data\u001b[33m.\u001b[39mpagination)\u001b[33m.\u001b[39mtoEqual({\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m         total_items\u001b[33m:\u001b[39m \u001b[35m2\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 51 |\u001b[39m         total_pages\u001b[33m:\u001b[39m \u001b[35m1\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toHaveLength (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/app/api/hall-of-fame/route.test.ts\u001b[39m\u001b[0m\u001b[2m:48:25)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/hall-of-fame/route.test.ts","startTime":1752662063874,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["POST /api/bets"],"duration":442,"failureDetails":[{}],"failureMessages":["Error: Failed to seed test data: Failed to seed seasons: duplicate key value violates unique constraint \"seasons_competition_id_api_season_year_key\"\n    at seedTestData (/Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:415:11)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at /Users/arnarjohannsson/Code/TippSlottet/league-coupon/tests/utils/db.ts:646:9"],"fullName":"POST /api/bets should return 200 OK on successful bet submission for an open round","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return 200 OK on successful bet submission for an open round"},{"ancestorTitles":["POST /api/bets"],"duration":613,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/bets should return 401 Unauthorized if user is not authenticated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 401 Unauthorized if user is not authenticated"},{"ancestorTitles":["POST /api/bets"],"duration":581,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/bets should return 400 Bad Request if request body is not a valid array","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if request body is not a valid array"},{"ancestorTitles":["POST /api/bets"],"duration":601,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/bets should return 403 Forbidden if kickoff time is in the past","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 403 Forbidden if kickoff time is in the past"},{"ancestorTitles":["POST /api/bets"],"duration":576,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/bets should return 400 Bad Request if any submitted fixture is not in a betting round","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 Bad Request if any submitted fixture is not in a betting round"}],"endTime":1752662067455,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPOST /api/bets › should return 200 OK on successful bet submission for an open round\u001b[39m\u001b[22m\n\n    Failed to seed test data: Failed to seed seasons: duplicate key value violates unique constraint \"seasons_competition_id_api_season_year_key\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 413 |\u001b[39m   } \u001b[36mcatch\u001b[39m (error) {\u001b[22m\n\u001b[2m     \u001b[90m 414 |\u001b[39m     console\u001b[33m.\u001b[39merror(\u001b[32m'[TEST_DB] Seeding failed:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 415 |\u001b[39m     \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`Failed to seed test data: ${error instanceof Error ? error.message : 'Unknown error'}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 416 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 417 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 418 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat seedTestData (\u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:415:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mtests/utils/db.ts\u001b[2m:646:9\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/arnarjohannsson/Code/TippSlottet/league-coupon/src/app/api/bets/route.test.ts","startTime":1752662063920,"status":"failed","summary":""}],"wasInterrupted":false}
