**Product Requirements Document (PRD): Refactoring Sections and Improving Button Accessibility**

**1. Introduction**

This document outlines the requirements for refactoring common UI elements within the application, specifically the container and header structure used by different content sections (like "1x2" and "Questions"). It also addresses the need to improve the size and accessibility of buttons within the "1x2" section, which currently have usability issues on smaller screens. The goal is to enhance code maintainability, ensure visual consistency, fix existing bugs (header background inconsistency), and improve user interaction according to accessibility best practices.

**2. Goals**

*   Improve code reusability and maintainability by extracting common section structures into dedicated components.
*   Ensure visual consistency across different content sections (e.g., headers should look the same).
*   Fix the bug where the "1x2" section header has an incorrect background color compared to the "Questions" section header.
*   Improve the usability and accessibility of buttons in the "1x2" section by increasing their minimum size and touch target area.
*   Maintain the overall design aesthetic while making these improvements.
*   Adhere to clean code principles (DRY, Single Responsibility) as outlined in [clean-code.mdc](mdc:.cursor/rules/clean-code.mdc) and React best practices ([react.mdc](mdc:.cursor/rules/react.mdc)).

**3. Use Cases**

*   A developer wants to add a new content section to the page and easily reuse the standard header and container styling/functionality.
*   A user views the "1x2" and "Questions" sections and observes a consistent header design.
*   A user interacting with the "1x2" section on a mobile device (like iPhone SE 2020) finds the selection buttons easy to tap without accidentally hitting the wrong one.
*   A developer modifies the standard section header design, and the change automatically applies to all sections using the shared component.

**4. Functional Requirements**

*   **FR1: Create Shared Section Component:**
    *   **FR1.1:** Create a new reusable React component named `SectionContainer` (e.g., `src/components/SectionContainer.tsx`).
    *   **FR1.2:** The `SectionContainer` component must accept props for `title` (string, required), `subtitle` (string, optional), and `children` (ReactNode, required) to display the section's content.
    *   **FR1.3:** The component must render a consistent outer container structure (handling background, border, shadow, padding etc.).
    *   **FR1.4:** The component must render a consistent header structure displaying the title and subtitle.
    *   **FR1.5:** The component *should* accept an optional `footer` prop (ReactNode) to render content at the bottom of the section within a distinct area.
    *   **FR1.6:** The component *should* support optional collapsibility via props like `collapsible` (boolean) and `initialCollapsed` (boolean), including visual indicators (e.g., Chevron icons) and accessibility attributes (`aria-expanded`, keyboard controls).
    *   **FR1.7:** The component *should* allow passing additional `className` props for customizing the container and header elements if needed (`className`, `headerClassName`).

*   **FR2: Refactor Existing Sections:**
    *   **FR2.1:** Refactor the `Questionnaire` component (`src/components/Questionnaire/Questionnaire.tsx`) to use the new `SectionContainer` component for its main structure and header. The original content should be passed as children. The collapsibility feature should be retained using the `SectionContainer`'s props.
    *   **FR2.2:** Refactor the `BettingCoupon` component (`src/components/BettingCoupon/BettingCoupon.tsx`) to use the new `SectionContainer` component for its main structure and header. The list of matches should be passed as children. This section should likely *not* be collapsible (`collapsible={false}`).

*   **FR3: Improve 1x2 Button Styling:**
    *   **FR3.1:** Identify the buttons used for '1', 'X', '2' selections within the `BettingCoupon` component.
    *   **FR3.2:** Update the Tailwind CSS classes for these buttons to ensure a minimum width and height suitable for touch targets (e.g., using `min-w-[X]`, `min-h-[Y]`, sufficient `p-X`, `p-Y`). Aim for at least 44x44px effective size.
    *   **FR3.3:** Ensure the buttons remain visually appealing and reasonably sized relative to the surrounding elements, adapting appropriately on different screen sizes (responsive design).
    *   **FR3.4:** Verify the button text/icons are clearly legible.

**5. Non-Functional Requirements**

*   **NFR1: Consistency:** The refactored sections must maintain visual consistency with each other regarding header style, container appearance, and spacing, resolving the previous inconsistency.
*   **NFR2: Accessibility (A11y):**
    *   Buttons in the 1x2 section must meet minimum touch target size recommendations (e.g., WCAG 44x44px).
    *   If collapsibility is implemented in `SectionContainer`, it must be keyboard accessible and use appropriate ARIA attributes.
*   **NFR3: Code Quality:** The refactoring should follow project code quality guidelines ([codequality.mdc](mdc:.cursor/rules/codequality.mdc)), clean code principles ([clean-code.mdc](mdc:.cursor/rules/clean-code.mdc)), and React/TypeScript best practices ([react.mdc](mdc:.cursor/rules/react.mdc), [typescript.mdc](mdc:.cursor/rules/typescript.mdc)). Code should be DRY.
*   **NFR4: Responsiveness:** All changes must work correctly and look good across different screen sizes, particularly on mobile devices.
*   **NFR5: No Functionality Regression:** The core functionality of selecting match outcomes (1x2) and answering questions must remain unchanged.

**6. Design & UX**

*   The overall look and feel should remain consistent with the current design language.
*   The primary UX change is making the 1x2 buttons larger and easier to interact with, especially on touch devices.
*   Headers across sections should now be identical in style (e.g., using the teal gradient background unless explicitly overridden).

**7. Future Considerations**

*   Consider if other parts of the application could benefit from using `SectionContainer`.
*   Evaluate if introducing a UI library like `shadcn/ui` is beneficial *after* this refactoring if more complex components are needed later.