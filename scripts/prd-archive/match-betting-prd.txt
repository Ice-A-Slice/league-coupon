**Product Requirements Document (PRD): 1X2 Betting Coupon Component**

**1. Introduction**

This document describes the requirements for a reusable UI component representing a "1X2" betting coupon. The component is intended to be modular, mobile-first, and easily integrated into various applications requiring users to predict the outcome (Home win, Draw, Away win) of football matches.

**2. Goals**

*   Create a visually appealing and intuitive mobile-first UI component for 1X2 betting.
*   Enable users to select and deselect outcomes (1, X, 2) for a list of matches.
*   Ensure the component is reusable and can be easily integrated into other projects.
*   Separate UI presentation from betting logic (submission, grading, scoring), which will reside in the consuming application.

**3. Use Cases**

*   A user views a list of football matches presented on the coupon.
*   A user selects '1' (Home win) for a specific match.
*   A user selects 'X' (Draw) for another match.
*   A user changes their selection for a match from '1' to '2' (Away win).
*   A user clicks on their current selection ('1') again, deselecting any choice for that match.
*   The consuming application receives updates whenever the user changes their selections.

**4. Functional Requirements**

*   **FR1: Display Matches:** The component must display a list of matches.
    *   **FR1.1:** Each match entry must clearly display the names of the Home team and the Away team.
    *   **FR1.2:** Each match entry must have a unique identifier/number clearly visible (e.g., 1, 2, 3...).
*   **FR2: Outcome Selection:** The component must provide interactive elements for selecting the outcome of each match.
    *   **FR2.1:** For each match, three distinct selection options must be available: '1' (Home win), 'X' (Draw), and '2' (Away win). These should likely be buttons or similar clickable elements.
    *   **FR2.2:** Only one outcome (or no outcome) can be selected per match at any given time.
    *   **FR2.3:** Clicking a selection option should visually indicate that it is selected (e.g., change background color, border).
    *   **FR2.4:** Clicking an already selected option for a match should deselect it, returning the match to an unselected state.
    *   **FR2.5:** Clicking a different option for a match should deselect the previous choice and select the new one.
*   **FR3: Report Selections:** The component must notify the consuming application about changes in user selections.
    *   **FR3.1:** An event/callback mechanism must be provided to report the current state of all user selections whenever a selection changes. The data should clearly indicate which match and which outcome (or null/undefined if deselected) is chosen for each match where a selection exists.

**5. Component Interface (API/Props & Callbacks)**

*   **Input Props:**
    *   `matches`: An array of match objects. Each object should contain at least:
        *   `id`: A unique identifier for the match (e.g., number or string).
        *   `homeTeam`: String representing the home team's name.
        *   `awayTeam`: String representing the away team's name.
    *   `initialSelections` (Optional): An object or map representing previously made selections to pre-populate the coupon (e.g., `{ matchId1: '1', matchId3: 'X' }`).
*   **Output Callbacks:**
    *   `onSelectionChange`: A function that is called whenever a user selects or deselects an outcome for any match. It should receive an argument representing the current state of all selections (e.g., an object like `{ matchId1: '1', matchId2: null, matchId4: '2' }`).

**6. Non-Functional Requirements**

*   **NFR1: Mobile-First Design:** The component layout and interactions must be optimized primarily for mobile devices, but should also be usable on larger screens.
*   **NFR2: Performance:** The component should render efficiently, even with a moderate number of matches (e.g., 10-20). Interactions should feel responsive.
*   **NFR3: Reusability:** The component should be self-contained and have minimal external dependencies beyond the framework (e.g., React). Styling should ideally be encapsulated or rely on a shared system like Tailwind CSS if used in the target environment.
*   **NFR4: Data Agnostic:** The component should function correctly using mock data (e.g., Allsvenskan matches) or data fetched from a real API, as long as the data conforms to the defined `matches` prop structure.

**7. Design & UX**

*   The design should be clean and modern, drawing inspiration from the provided reference images (like the OneFootball example's layout).
*   Clear visual distinction between selected and unselected states for the 1X2 options.
*   Adequate touch target sizes for mobile interaction.
*   Consistent spacing and alignment.

**8. Out of Scope**

*   User authentication.
*   Odds display.
*   League/tournament information display.
*   Submitting the coupon.
*   Saving bets to a backend.
*   Grading bets against real results.
*   Calculating points or scores.
*   Handling payments or stakes. 