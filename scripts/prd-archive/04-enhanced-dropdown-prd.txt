# PRD: 04-Enhanced Dropdown Component for Question Section

## 1. Problem Statement
The current dropdown select fields used in the application's question section utilize the standard HTML `<select>` element. While functional, this component presents several limitations:
- **Poor User Experience:** Navigating long lists of options via scrolling can be cumbersome.
- **Lack of Search:** Users cannot type to filter or quickly find specific options.
- **Limited Styling:** The native appearance is difficult to customize consistently across browsers and doesn't align with modern UI aesthetics.
- **Accessibility Concerns:** While native elements have baseline accessibility, advanced features like search require careful ARIA implementation which is missing.

## 2. Goals
- Replace the existing dropdowns in the question section with an enhanced, user-friendly component.
- Improve visual appeal and consistency with the application's design language.
- Enable users to easily find options through both scrolling and text-based searching/filtering.
- Ensure the component is fully accessible according to WCAG standards.
- Utilize a well-established UI library to avoid reinventing complex functionality and ensure robustness.

## 3. Proposed Solution
Implement the `shadcn/ui` **Combobox** component (which leverages `cmdk` and Radix UI primitives) to replace all instances of the standard dropdowns within the question section.

## 4. Key Features
- **Modern UI:** Visually appealing design consistent with the application's theme.
- **Dropdown Interaction:** A dropdown list displaying options should appear upon clicking or focusing the input field.
- **Scrolling:** The list of options within the dropdown should be scrollable for longer lists.
- **Search/Filtering:** Users should be able to type into the input field, and the dropdown list should dynamically filter to show matching options.
- **State Management:** Selecting an option should update the input field's displayed value and the relevant underlying application state.
- **Keyboard Navigation:**
    - Full navigation using arrow keys (up/down) within the dropdown list.
    - Selection confirmation using the Enter key.
    - Closing the dropdown using the Escape key.
- **Accessibility:**
    - Proper ARIA attributes (e.g., `aria-expanded`, `aria-controls`, `aria-activedescendant`, roles like `combobox`, `listbox`, `option`).
    - Correct focus management between the input and the dropdown list/options.
    - Compatibility with screen readers and other assistive technologies.

## 5. Acceptance Criteria
- All previously identified dropdowns in the question section are replaced by the `shadcn/ui` Combobox component.
- Typing into the Combobox input accurately filters the list of options in real-time.
- Scrolling within the dropdown list is smooth and functional.
- All specified keyboard navigation controls (arrows, Enter, Escape) work correctly.
- The component passes automated accessibility checks (e.g., Axe DevTools) and is navigable via screen reader.
- The visual styling of the Combobox component is consistent with the overall application design.
- The component correctly updates the application state upon selection.

## 6. Out of Scope
- Changes to dropdowns outside the designated question section.
- Adding new options to the dropdowns (this component focuses on the UI/UX of selection).

## 7. Dependencies
- Installation and configuration of `shadcn/ui` and its dependencies (e.g., `cmdk`, `@radix-ui/react-popover`, etc.) if not already present. 